%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: report.dvi
%%Pages: 8
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Helvetica-Bold Helvetica Times-Bold Times-Roman
%%+ Times-Italic
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -f report.dvi
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 2001.08.31:1628
%%BeginProcSet: texc.pro
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (report.dvi)
@start
%DVIPSBitmapFont: Fa cmbsy9 9 2
/Fa 2 104 df<EC03FE143F14FF010313C0491300EB0FFC5C131F5CB3A4133F5C137F49
5A485BD807FEC7FCEAFFF813E013F8EA07FE3801FF806C7F6D7E133F80131FB3A480130F
806DB4FC6D13C0010013FE143F14031F4B7AB72C>102 D<B47E13F813FE3807FF800001
7F6C6C7E133F80131FB3A480130F806D7E6D7E010013C0EC3FFE140F143FECFFC0010313
00495A495A5C131F5CB3A4133F5C137F48485A00075BB448C7FC13F813801F4B7AB72C>
I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmcsc10 9 6
/Fb 6 115 df<007FB81280A3903A8003F8007FD87C00150F0078160700701603A20060
160100E017C0A3481600A6C71600B3AB4A7E011FB6FCA332337CB23B>84
D<B71280A2390FE0003F000714071503A2150116C0A21500A21403A21600A25C5C90B5FC
A2EBE00F8080A21660A291C7FC16E016C0A31501A21503A2ED0F80000F143FB7FCA22326
7DA52A>101 D<B53803FFFCA23A0FF0003FC06C48EB1F80AE90B6FCA29038E0001FB048
6CEB3FC0B53803FFFCA226267DA52E>104 D<D8FFE0EC07FF6D5C000F16F0000716E0D8
06F8141BA2017C1433A36D1463A26D14C3A290390F800183A3903907C00303A2903803E0
06A3903801F00CA2903800F818A3EC7C30A2EC3E60A3EC1FC0A2000FEB0F80A2D83FC0EC
07F03BFFF007007FFFA230267DA538>109 D<49B4FC010F13E090383F01F890387C007C
4848133FD803E0EB0F80000715C04848EB07E0491303001F15F048C7EA01F8A24815FCA2
007E1400A200FE15FEA9007FEC01FCA36C15F86D1303001F15F06D1307000F15E06C6CEB
0FC06C6CEB1F806C6CEB3F006C6C137E90383F01F890380FFFE0010190C7FC27287DA62F
>111 D<B512FCECFFC0390FE007F00007EB01F86E7E157E811680A61600157E5D4A5AEC
07F090B512C092C7FC9038E00FC0EC03F01401816E7EA481A4160315FF157F486C1407B5
EB3F8EED0FFCC8EA03F028277DA52D>114 D E
%EndDVIPSBitmapFont
/Fc 138[46 25 36 36 2[46 46 66 25 2[25 46 46 25 41 46
17[56 14[61 1[56 12[46 46 46 46 2[23 46[{TeXBase1Encoding ReEncodeFont}
22 91.3242 /Times-Italic rf
%DVIPSBitmapFont: Fd cmtt9 9 12
/Fd 12 86 df<120FEA3FC013E0EA7FF0A213F8A2123FA2120F120113F01203EA07E012
1FEA7FC0EAFF8013005A12700D14738927>44 D<EB03F0497EA2497EA4143CEB1F3EA5EB
3F3FA3EB3E1FA2017E7FA4496C7EA548486C7EA390B5FCA24880A3EBF003A248486C7EA4
000F803A7FFC0FFF8000FF15C06D5A497E007F1580222F7EAE27>65
D<387FFFFC14FFB612C06C80813907E00FF81407EC01FC6E7EA2157E157F811680151FA3
16C0150FABED1F80A3153F1600A25D15FEA24A5A4A5A140F007FB55A5DB65A6C91C7FC14
FC222E7FAD27>68 D<007FB61280B712C0A37E3907E0000FA6ED078092C7FCA4EC07804A
7EA390B5FCA5EBE00FA36E5A91C8FCA4ED03C0ED07E0A7007FB6FCB7FCA36C15C0232E7F
AD27>I<007FB512E0B612F0A36C14E039001F8000B3B2007FB512E0B612F0A36C14E01C
2E7BAD27>73 D<387FFFC080B5FC7E5CD803F0C8FCB3AAED0780ED0FC0A7007FB6FCA2B7
FC7E1680222E7FAD27>76 D<3A7FF003FFE0486C4813F0A213FC007F6D13E00007903800
3E0013DEA313CFA3148013C714C0A213C314E0A213C114F0A3EBC0F8A31478147CA2143C
143EA2141E141F140FA3EC07BEA3EC03FEEA7FFCEAFFFE1401A26C486C5A242E7FAD27>
78 D<007FB5FCB612E081816C803907E003FEEC00FF81ED3F80151F16C0150FA6151F16
80153FED7F005DEC03FE90B55A5D5D5D92C7FC01E0C8FCADEA7FFEB5FCA36C5A222E7FAD
27>80 D<387FFFF0B512FE6E7E816C803907E01FF014076E7E1401811400A514015D1403
4A5A141F90B55A5D5DA281EBE01F6E7E14076E7EA816F0EDF1F8A4397FFE01FBB5EBFFF0
8016E06C48EB7FC0C8EA1F00252F7FAD27>82 D<90387FC0E03901FFF1F0000713FF5A5A
EA3FE0EB801F387F000F007E130712FE5A1403A3EC01E06C90C7FC127E127FEA3FC013F8
6CB47E6C13F86C13FE6CEBFF80C614C0010F13E0010013F0140FEC07F81403140115FC14
00127812FCA46CEB01F8A26C130390388007F09038F01FE090B5FC15C0150000F85B3870
1FF81E307CAE27>I<007FB61280B712C0A439FC03F00FA60078EC0780000091C7FCB3AB
90B512C04880A36C5C222E7EAD27>I<3A7FFE01FFF8B54813FCA36C486C13F83A07E000
1F80B3AB6D133F00031500A26D5B0001147E6D13FE6C6C485A90387F87F814FF6D5B010F
13C06D5BD901FEC7FC262F80AD27>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmmi5 5 4
/Fe 4 109 df<137013F8A213F013E01300A6EA0F80EA1FC0EA31E01261A2EAC3C01203
EA0780A3EA0F001308EA1E18A213301370EA0FE0EA07800D1D7D9C16>105
D<EB0180EB03C01307A2EB038090C7FCA6137CEA01FEEA038FEA070F1206120C1200A213
1EA45BA45BA4EA70F012F8EAF9E0485AB45A007EC7FC12257E9C18>I<EA1FE0A212035B
A4485AA4380F00F8EB01FCEB070CEB0C1C381E383CEB607CEA1FC0EBE038383FF800EA3C
7C131E14040078130CA21418130F00F013F0386003E0161D7C9C1F>I<EA1FC0123F1207
1380A4EA0F00A4121EA45AA45AA3138012F1A3EAF300127E123C0A1D7C9C14>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmsy6 6 2
/Ff 2 107 df<903807FFF0133F5BD801FCC7FCEA03E0485A48C8FC121E121C123C5A12
70A212F05AA2B612F0A300E0C8FCA27E1270A212787E121C121E7E6C7EEA03E0EA01FC6C
B512F0133F13071C237A9D2A>50 D<12E0B3B3AD033179A413>106
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmex9 9 8
/Fg 8 89 df<B612C0A600FCC8FCB3B3B3B3B3B3B31A85688133>50
D<B612C0A6C7120FB3B3B3B3B3B3B31A85808133>I<12FCB3B3B3B3B3B3B3B612C0A61A
85688233>I<EC0FC0B3B3B3B3B3B3B3B6FCA61A85808233>I<12FCB3B3AB062F688033>
I<12FCB3B3AB062F6C8033>I<BB12801AC0A3D87FC0C914E06C6C1603F0007F6C6CEF1F
F06C6C17076C6C1701F100F86C6C18786C6C183C6C6D171C1A0C6D6C170E6D6C17066D7E
1A036D6C17006D7E6D7EA26D7E6D7F6E7EA26E7E6E7E6E7EA26E7E6E7E6E7EA26E7F6F7E
153FA26F5A93CAFC153E157E5D5D4A5A4A5A14074A5A5D4ACBFC143E5C14FC495A4A1703
49481706495A010F180E4948170C91CB121C013E183C49187801FC18F84848170149EF07
F04848171F4848177F4848933803FFE0001F94B5FC48BAFC1AC05ABBFC1A80484B7C7F51
>80 D<BE12F889A3D87FFCCB000F806DF0000F003F08007F6C6C1A0F6C6D070313806E19
006C1C3F6C6DF20FC06C6D1A076EF203E06C1C016D6CF200F06D6C1B706E1B306D1C186D
7F6D6D1A0C6F1A007F6D7F6D7F81147F6E7E6E7E82806E7F6E7F82806E7F6F7E82153F6F
7E6F7F83816F7F6F7F8381707E707E8382707F82A27090CCFC705A705A16014C5A4C5A4C
5A5F4C5A163F4CCDFC16FE4B5A4B5A5E4B5A150F4B5A4B5A4BCEFC157E5D14014A5A4A5A
4A5A4A5A4B1A0C4ACE12185C02FE1B3849481B3049481B704A1BF04948F201E0010F1B03
4948F20FC049481A1F49CE127F01FE973801FF80491A0748481A7F00030807B512004848
0607B6FC48BD5A5AA248645ABEFC6566697C7F6F>88 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi6 6 21
/Fh 21 117 df<127812FCA212FEA2127E1206A3120CA2121C121812301260124007107A
8513>59 D<90B6FC16E0903907C003F0ED00F8494813FC167C167EA249C7127C16FCA2ED
01F8013EEB03F0ED07E0ED1F8090393FFFFE005B90397C003F80ED07C0ED03E04914F015
01A216F8484814F01503A2ED07E04848EB0FC0ED1F80ED3F00000714FEB612F815C02722
7CA12E>66 D<91380FF0039138FFFE06903903F8070E90390FC0019E013FC712FE017C14
7C5B4848143C485A48481438485A121F90C8FC481530123E007E1500A25AA516C0A2ED01
80A2007CEC0300A2003C1406003E5C6C5C6C6C13706C6C5B3903F807802600FFFEC7FCEB
1FF028247CA22C>I<90B6FC16E0903907C003F8ED00FC4948133E161E161FEE0F8049C7
FCA317C0133EA4491580161FA21700495CA2163E5E485A5E4B5A4B5A4848495A4B5A033E
C7FC0007EB01F8B612E092C8FC2A227CA132>I<90B612FCA2903807C000163C4948131C
A2160CA249C7FCA21530A2013EEB6000A215E0140190387FFFC0A2EB7C03140101F85BA4
4848C8FCA4485AA31207B57EA226227CA127>70 D<91380FF0039138FFFE06903903F807
0E90390FC0019E013FC712FE017C147C5B4848143C485A48481438485A121F90C8FC4815
30123E007E1500A25AA4913803FFFCA291380007C0A2ED0F80127CA27EED1F007E6C6C5B
D807E0136F3903F803C6C6B51202D91FF8C7FC28247CA22F>I<90B57E92C7FCEB07C0A2
495AA449C8FCA4133EA45BA45BED0180A2ED0300485A1506A2150E48485B153C15F80007
1303B6FC5D21227CA12A>76 D<D9FFE0EC0FFEEF1FFC010716801737010DED6F00EB0CF0
17CFEE018F0118159EEE031E02781306A201304A5A16181630A2496C495A16C0A2ED0180
01C049485A141E15065DD801804A5A1518EC0F301560D803004A5A15C01580260F800713
07D8FFF8903800FFFED9F0065C37227CA13A>I<D9FFE0EBFFF0A2D907F0EB0F00160ED9
0DF8130C130C80147C01185C80A28001305CEC0F80A2EC07C001605C15E0140315F0D9C0
015B15F8140015FC4848EB7D80157F153FA248C76CC7FCA281EA0F80D8FFF01306A22C22
7CA130>I<90B512FEEDFFC0903907C007F0ED01F890380F800016FC167CA249C712FCA3
16F8013E1301ED03F016E0ED0FC049EB3F0090387FFFFC15E0017CC8FC5BA4485AA4485A
A31207EAFFFEA226227CA127>80 D<ECFE03903807FFC690380F01EE90383C007E017013
3E49131C5B1201A200031418A215007F7FEA01FE3800FFE0EB7FFE6D7E010F1380010013
C0EC0FE014031401EC00F0A2003014E0A3EC01C012700078EB0380EC0700007E130E38E7
807C38C3FFF038807F8020247CA226>83 D<001FB612FCA29039003E007C003C151C0038
5B12300070151812605C5AA3C648481300A4495AA4495AA4495AA449C8FCA35B381FFFFE
5C26227DA124>I<EB0FE0EB7FF83801F03C3803C01C3807803C380F007C121E003E1338
14005AA35AA400781304140C00381338003C1370381F03E0380FFF803801FC0016177E95
1C>99 D<EC03E0EC3FC0A21403A2EC0780A4EC0F00A4EB1F1EEBFF9E3801E0DE3803807E
3807007C48133C121E123E003C5B127CA3485BA215401560903801E0C012781303393807
E180391C1CF300380FF87F3807E03C1B247EA220>I<13F8EA0FF0A21200A2485AA4485A
A4380787E0EB9FF8EBB83CEBE01C380FC01E1380A21300001E5BA35C5AA2ECF020153048
1460EB01E015C0A239F000E380ECFF000060133C1C247CA224>104
D<1338137CA2137813701300A7EA0780EA1FC0EA38E01230EA60F0EAC1E0A3EA03C0A3EA
0780A2EA0F0013041306EA1E0CA21318121CEA1E70EA0FE0EA07800F237DA116>I<1418
143C147CA214381400A7EB0780EB1FE01338EB60F013C0A2EA0180A2380001E0A4EB03C0
A4EB0780A4EB0F00A4131EA21238EA783CEAF8381378EA70F0EA7FC0001FC7FC162D81A1
19>I<13F8EA0FF0A21200A2485AA4485AA43807801E147FEB81C3EB8387380F060F495A
1318EB700E4848C7FCA213FCEA1E7EEA3C0F80EB0781158039780F0300A21402EB070600
F0138CEB03F8386000F019247CA221>I<EA01F0EA1FE0A21201A2EA03C0A4EA0780A4EA
0F00A4121EA45AA45AA213401360EAF0C0A3EAF1801271EA3F00121E0C247DA214>I<38
0F01F0381FC7F83831CE1CEA61F8EBF03C00C1137C13E014383803C000A4485AA448C7FC
A4121EA2120C16177D951D>114 D<133013785BA4485AA4485AB51280A23803C000485A
A448C7FCA4121EA25B1480383C03001306A25BEA1C38EA0FF0EA07C011217D9F18>116
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmr6 6 12
/Fi 12 62 df<90387FFFC0A2D903F8C7FC6D5AA4EB0FFE90B512E03903F1F1F8390FC1
F07ED81F01131F003EEC0F80007E15C0007C140700FC15E0A4007C15C0007E140F003E15
80001FEC1F00D80FC1137E3903F1F1F8C6B512E0D90FFEC7FCEB01F0A4497E90387FFFC0
A223227CA12B>8 D<130C1338137013E0EA01C0EA038013005A120EA25AA25AA3127812
70A312F0AB1270A312781238A37EA27EA27E7E1380EA01C0EA00E013701338130C0E317A
A418>40 D<12C012707E7E7E7E7E1380EA01C0A2EA00E0A21370A313781338A3133CAB13
38A313781370A313E0A2EA01C0A2EA038013005A120E5A5A5A12C00E317CA418>I<13E0
1201120712FF12F91201B3A7487EB512C0A212217AA01E>49 D<EA01FC3807FF80381C0F
C0383003E0386001F0EB00F812F86C13FCA2147C1278003013FCC7FC14F8A2EB01F0EB03
E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600185A5A383FFFF85AB512F0
A216217CA01E>I<13FF000313C0380F03E0381C00F014F8003E13FC147CA2001E13FC12
0CC712F8A2EB01F0EB03E0EB0FC03801FF00A2380003E0EB00F01478147C143E143F1230
127812FCA2143E48137E0060137C003813F8381E03F0380FFFC00001130018227DA01E>
I<14E01301A213031307A2130D131D13391331136113E113C1EA01811203EA0701120612
0C121C12181230127012E0B6FCA2380001E0A6EB03F0EB3FFFA218227DA11E>I<001013
30381E01F0381FFFE014C01480EBFE00EA1BF00018C7FCA513FE381BFF80381F03C0381C
01E0381800F014F8C71278A2147CA21230127812F8A214784813F8006013F0387001E012
38381E07803807FF00EA01F816227CA01E>I<EB0FC0EB7FF03801F0383803C018380780
3C380F007C121E001C1338003C1300A2127C1278EB7FC038F9FFE038FB80F038FE003814
3C48131EA248131FA41278A36C131EA2001C133C001E13386C1370380781E03801FFC038
007F0018227DA01E>I<1230123C003FB5FCA24813FE14FC3860001C143814704813E014
C0EA0001EB0380EB07001306130E5BA25BA21378A35BA41201A76C5A18237CA11E>I<13
7F3803FFC0380781E0380E00704813380018131C1238A3123C003F1338381FC078EBE0F0
380FF9E03807FF80120114C0000713F0380F0FF8381C03FC383801FE3870007E141F4813
0F1407A314060070130E0078130C6C1338001F13F03807FFC0C6130018227DA01E>I<B7
12FEA3CAFCA9B712FEA3270F7C932F>61 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmmi9 9 24
/Fj 24 113 df<EC1F80EC7FC0903801F0F0EB03E0903807C078EB0F8090381F003C133E
A249133E5BA2485A1203A2485AA249137E120FA2485AA215FE003F14FC90C7FC90B5FCA2
5A15F8387E0001140300FE14F05AA2EC07E0A215C048130FA2EC1F80A21500143EA25C00
785BA2495A6C485A495A6C485A49C7FCEA07FCEA03F01F367DB424>18
D<123C127E12FFA4127E123C08087A8715>58 D<123C127EB4FCA21380A2127F123D1201
A412031300A25A1206120E120C121C5A5A126009177A8715>I<127012FCB4FCEA7FC0EA
1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF91
38007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEA2EE07FCEE1FF0EE7F
C0923801FF00ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB
1FF0EB7FC04848C9FCEA07FCEA1FF0EA7FC048CAFC12FC12702F2E7AA93C>62
D<16035E5EA24C7EA2163F167FA216FFA2ED01BFED033F831506161F150C1518A2153015
70156015C083EC01800203130F15001406A25C141C14184A80A2027FB5FC91B6FCA29039
01800007A249C7FC1306835B16035B5B1370136013E01201D807F04A7EB549B512F0A25B
34367DB53A>65 D<010FB612F017FEEFFF80903B003FC0003FE0EF0FF017074B14F81703
027F15FCA292C7FCA25C18F84A140718F00101150F18E04AEC1FC0EF3F800103ED7F00EE
01FE4AEB07F891B612E04915809139F8001FF04AEB03FCEE00FE010F157FA24AEC3F80A2
011F16C0A25CA2133F18804A147FA2017FEDFF005F91C712014C5A494A5A4C5A49EC3FE0
0001913801FF80B748C7FC16F816C036337DB23A>I<DB0FF81318DB7FFF13380203B5EA
C078913A0FFC03E0F091393FC000F102FFC7123BD901FC141FD907F815E04948140F4948
1407EB3F80017F16C049C81203485A5B00031780485A485AA248481600A2485A94C7FC12
7F5BA312FF90CBFCA45AA21738A21730A21770176017E0007F4B5A5F16036C6C4AC7FC16
0E6C6C5C6C6C5C6C6C5C6C6C495A6C6CEB07C02700FF803FC8FC90383FFFFC010F13F001
01138035377CB437>I<010FB712FEA218FC903A003FC000031700187C4B143CA2027F15
1C181892C8FCA25CA24A1303A201014A1338040613304A1500160E13035E4A137C91B512
FC5B5EECF0001638130F16305C1860011F027013E0046013C04A140104001380133F1703
4A15005F017F150EA291C8121E5F49157C5F4914030001ED1FF0B8FCA25F37337DB239>
69 D<010FB712FCA218F8903A003FC00007170018785D1838147F183092C8FCA25CA25C
16060101020E1370040C13604A1500A20103141C5E5C16F849B5FCA25EECF001010F1300
16605CA2011F14E05E5CA2013F91C8FCA25CA2137FA291CAFCA25BA25B487EB6FCA33633
7DB231>I<DB0FF81318DB7FFF13380203B5EAC078913A0FFC03E0F091393FC000F102FF
C7123BD901FC141FD907F815E04948140F49481407EB3F80017F16C049C81203485A5B00
031780485A485AA248481600A2485A94C7FC127F5BA312FF90CBFCA4480207B512C05DA2
92390007F8005FA2160FA25F127F161FA26C6C5D163F6C7E6C6C4A5A6C6C14FF6C6CEB01
CFD801FEEB07872800FFC03F07C7FC90393FFFFC03010F01F0C8FC0101138035377CB43C
>I<010FB5D8C03FB5FCA39026003FE0C713804B1500A24B5CA2027F14016092C7FCA24A
1403605CA201011507605CA20103150F605C91B7FC5B6002F0C7121FA2010F153F605CA2
011F157F95C7FC5CA2013F5D5F5CA2017F14015F91C7FCA24914035F5B00011507B5D8FC
03B512F0A340337DB240>I<90260FFFE092380FFFC06161D9003FEFE0004F5A19DFDA33
F05EF0019F0273ED033F97C7FC02631506180C02E35EDAE1F8EC187E14C118300101EE60
FE61028115C0EF018001031681DA80FC90380301F81400170649ED0C0361010615181730
010E017E140705605B010C15C0A2011C913801800F610118EC030016060138013F141F4C
5C01305CA201704A133F96C8FC01605C6F5A01E05E4C137E000192C7FCD807F016FEB5D8
801E90387FFFFC151C150C4A337CB24A>77 D<90260FFFE049B5FCA281D9001F9138000F
E04A6CEC07801900DA33FC1406A2DA71FE140E180C146081DAE07F141C701318ECC03F82
010116386F6C133014806F7E010316706F6C136014001503496E13E003015C0106801500
010EECFF0160010CEC7F81A2011CEC3FC395C7FC0118EC1FE3A20138EC0FF717F6013014
0717FE017014035F01601401A213E0705A1201D807F01578B57E1730A240337DB23D>I<
ED07FC92387FFFC0913901F807F091390FE001F891391F80007E027EC77E4AEC1F80EB03
F04948EC0FC04948EC07E0495A013F16F049C8FC01FE15034916F81201485AA2485AA212
0F5B001F16075B123FA34848ED0FF0A3EF1FE0A290C9FC48EE3FC0A21880177F6C17005F
5F4C5A4C5A6C7E4C5A001F4B5A6D4A5A000F4B5A6D027EC7FC00075D6C6C495A6C6CEB07
E0D800FEEB1F8090263F80FEC8FC90380FFFF80101138035377DB43A>I<010FB612F017
FE83903B003FC0007FC0EF1FE0EF07F05DEF03F8147FA292C713FCA25CEF07F85CA20101
16F0170F4A15E0EF1FC00103ED3F80EF7F004A14FEEE03FC0107EC1FF091B612C04CC7FC
02F0C9FC130FA25CA2131FA25CA2133FA25CA2137FA291CAFCA25BA25B1201B512FCA336
337DB231>I<010FB67E17F817FE903A003FC001FF9338003FC0EF1FE04B130FEF07F014
7FA292C713F8A25CEF0FF05CA20101ED1FE018C04AEC3F8018000103157E4C5A4AEB07F0
EE3FC049B500FEC7FC16F89138F0007E82010F6E7E707E5C83131FA25CA2013F141FA25C
A2017F143F5F91C7FC180649160E180C49161C00011718B500FC011F133893380FE07004
0713E0C93803FFC09338007F0037357DB23A>82 D<0003B812F05A18E0903AF0007F000F
D80F8049130390C71401000E5C48EE00C01401121800384A1301A2003001031580127000
605CA20207140300E01700C74990C7FCA2140FA25DA2141FA25DA2143FA25DA2147FA292
C9FCA25CA25CA21301A25CA21303A25C497E001FB512FEA334337FB22D>84
D<267FFFFE90380FFFF8A3000190C8EA7F0049153C1738491530A217701203491560A217
E01207495DA21601120F495DA21603121F4992C7FCA25E123F491406A2160E127F90C812
0CA2161C5A481518A216381630481570166016E04B5A7E007E4A5A4BC8FC007F140E6C14
3C6C6C5B6C6C485A3907F00FC06CB5C9FCC613FCEB1FE035357BB234>I<B500F0903801
FFFCA3D803FEC8EA3F8049ED1E00171C5F00011630177017605FA24C5A6D4AC7FC120016
065EA25E16386D14305E6D14E05E4B5AA24BC8FCEC8006A2013F5B5DA25D1570ECC0605D
EB1FC15D02C3C9FCA214C614ECA2EB0FF8A25C5CA25C5C130791CAFC130636357CB22D>
I<B5D8F00FB590380FFFE061A2D807FCC7D87FC0903801FE00496E48EB00F80003197062
624F5AA24FC7FC167F19064C6C130E190CDB019F5C7FDB031F5C0001140661030C15E061
03184A5A153803304AC8FC1560EFE006DBC00F5BA29026FE01805C0000EB030060020615
7018604A5D141C0218ECE1805C05F3C9FC4A14F7EE07F66D4814FCA26D485C91C7FC5F01
7E5DA2017C5D13785F137070CAFC4B357CB249>I<EB01C0EB07E014F0130F14E01307EB
038090C7FCAA13F0EA03FCEA071EEA0E1F121C123800301380EB3F00127012605BEAE07E
EA40FE12005B12015BA212035B12071420EBE070000F136013C014E014C0EA1F80EA0F81
EB8380EB8700EA078EEA03FCEA00F014337EB11A>105 D<151C157E15FEA315FC157815
00AA143FECFFC0903801C3E0EB038390380701F0130EEB0C03131C133813301407137001
2013E01300140FA215C0A2141FA21580A2143FA21500A25CA2147EA214FEA25CA21301A2
5CA21303001C5B127F495AA238FE0FC0495AD8783FC7FCEA707CEA3FF0EA0FC01F4281B1
1F>I<EB07E0EA03FFA25CEA001FA35CA3133F91C8FCA35B137EA313FE49131FED7FC0EC
01E0000190380383E09038F8070F140E141C0003013813C0EBF0709138E00700D9F1C0C7
FC3807F78001EEC8FC13FC7F380FFFE0EBC7F8EBC1FEEBC07E001F7F1380ED8080ED81C0
003FEC01801300A21503481500007EEB3E071506EC1F0E00FE5C48EB07F80038EB03E023
357DB328>I<011F131F90397FC07FE09039E3E1E0F09039C3E380783A01C1F7007CD981
FE133CD983FC133E00035BEB03F0163FEA0707120600025B1200010F147F167E5CA2011F
14FE16FC5CA2013FEB01F8A291380003F016E0491307ED0FC002801380ED1F009038FFC0
3E9038FEE0F89038FC7FE0EC1F80000190C8FCA25BA21203A25BA21207A25BB57EA32830
83A027>112 D E
%EndDVIPSBitmapFont
/Fk 209[17 46[{TeXBase1Encoding ReEncodeFont}1 66.4176
/Times-Roman rf
%DVIPSBitmapFont: Fl cmbx9 9 52
/Fl 52 122 df<147014F0EB03E0EB07C0EB0F80131FEB3F00133E137E5B485AA2485AA2
12075B120FA2485AA3485AA3127FA390C7FCA35AAF7EA37FA3123FA36C7EA36C7EA21207
7F1203A26C7EA26C7E137E133E133FEB1F80130FEB07C0EB03E0EB00F01470144B78B722
>40 D<12E07E127C7E7E7F6C7E12077F6C7E6C7EA26C7EA27F137E137FA2EB3F80A3EB1F
C0A314E0A3130FA314F0AF14E0A3131FA314C0A3EB3F80A3EB7F00A2137E13FE5BA2485A
A2485A485A5B120F485A90C7FC123E5A12F05A144B7BB722>I<120FEA3FC0EA7FE0EAFF
F0A213F8A4127F123FEA0F3812001378A21370A213F013E01201EA03C0A2EA0780EA0F00
121E5A12180D1B7A8B19>44 D<B512FCA816087F931D>I<120FEA3FC0EA7FE0EAFFF0A6
EA7FE0EA3FC0EA0F000C0C7A8B19>I<1507ED0F80A2151F1600A25D153E157E157CA215
FC5D14015DA214035D14075DA2140F5D141F92C7FCA25C143E147E147CA214FC5C13015C
A213035C13075CA2130F5C131F91C8FCA25B133E137E137CA213FC5B12015BA212035B12
075BA2120F5B121F90C9FCA25A123E127E127CA212FC5AA21270214B7BB72C>I<147814
F81303131FEA03FFB5FCA3EAFC1F1200B3B2007FB512FEA41F317AB02C>49
D<EB1FFC90B57E000314E0000F14F8391FE03FFC393F800FFF48487E6D6C1380D8FFC014
C06D7E16E080A36C5A6C5A6CC7FCC8FC16C05C16805C16004A5A4A5A5D4A5AEC3FC04A5A
02FEC7FC495A495A903907E001E0EB0FC0EB1F8090383E00034914C05B4848130748B6FC
5A5A5A5A5AB71280A423317CB02C>I<EB0FFC90387FFF8048B512F03903F01FF83907C0
0FFE380F8007486C6C7E01F01480123F13F8A5D81FF014006C485AD803805BC7FC4A5A4A
5A4A5AECFFC0013F90C7FC14FCECFFC09038001FF0EC0FFC6E7E6E7E16806E13C0A2000F
15E0EA3FC0EA7FE0EAFFF0A416C0A2495AD87FC0148049481300003F5B391FF01FFE6CB5
12F8000314E0C61480D91FFCC7FC23327CB02C>I<151F5D5DA25D5C5C5C5CA25C143D14
7D14F9EB01F114E1EB03C1EB0781130FEB1F01133E133C137813F01201EA03E0EA07C013
80EA0F00121E123E5A5AB712FEA4C700031300A80103B512FEA427317EB02C>I<000C14
0ED80FE013FE90B5FC5D5D5D5D5D92C7FC14FC14F091C8FC1380A6EB87FE9038BFFFC090
B512F09038FC0FF89038E003FE01C07F497E01001480000E6D13C0C8FCA216E0A3121FEA
7F807F487EA316C05B5CD87F801480D87C0014006C5B393F8007FE391FE01FFC0007B512
F06C14C0C691C7FCEB1FF823327CB02C>I<120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0
EA0F00C7FCA9120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F000C217AA019>58
D<B712FEEEFFC017F817FEC69039C0001FFF04071380040113C0A27013E0A2EF7FF0A6EF
FFE0A24C13C0A24C138093380FFE00EE3FFC91B612F017C017F89139C00007FE933803FF
80040013C018E0EF7FF018F8173FA218FCA618F8A2177FEFFFF04C13E05E040F13C0B912
005F17F0178036337DB23F>66 D<DBFFE01338021F01FE137891B6EA80F8010315E1010F
9038E00FF7903A1FFE0001FFD97FF8EB007FD9FFE0143F4849141F4849140F4890C81207
485A1703485A1701123F5B007F1600A349160012FFAB127F7F1878A2123F7F001F17F818
F06C7E6D15016CEE03E06C7F6C6DEC07C06C6DEC0F80D97FF8EC3F00D91FFE14FE903A0F
FFE007FC010390B512F0010015C0021F49C7FC020013F035357BB340>I<B712FCEEFFC0
17F817FEC69039E0003FFF040313C004007F717EEF1FF8717E841707848319808319C0A4
19E0AB19C0A419805FA219004D5A170F604D5A4D5AEFFFE004035B041F5BB848C7FC17F8
17C004FCC8FC3B337DB244>I<B812FEA4C69038E0000FEE01FF82838383A283A3DB01E0
13801707A4030390C7FCA21507151F91B5FCA4ECE01F1507150318F01501A2EF01E0A392
C7FCA21703A2EF07C0A2170F171F173F17FF1607B91280A434337DB23A>I<B812FCA4C6
9038E0001FEE03FE16011600177E173EA2171EA3923803C01F170FA403071300A2150F15
3F91B5FCA4ECE03F150F1507A21503A592C8FCABB612F8A430337DB238>I<912601FFE0
1370021F01FC13F091B61201010315C3010F9038C00FFF90393FFE0003D97FF81300D9FF
E0147F4849143F4849141F4890C8120F485A1707485A1703485AA2007F1601A25B94C8FC
12FFA90303B612C0A2127F7F92C7387FF000A2123FA26C7EA26C7EA26C7E6C7F6C7F6C6D
14FFEB7FF8D93FFE130390390FFFE00F010390B512E301001580021F9038FE0030020101
F090C7FC3A357BB345>I<B612E0A4C6EBE000B3B3A7B612E0A41B337DB221>73
D<B500E093387FFFF86E93B5FCA26E5DC6F1F800D9F7FCED03DFA3D9F3FEED079FA2D9F1
FFED0F1FA201F06D141EA26E6C143CA26E6C1478A26E6C14F0A36E6CEB01E0A26E6CEB03
C0A26E6CEB0780A26E6CEB0F00A26EEB801EA26F6C5AA36F6C5AA26F6C5AA292380FF9E0
A26FB45AA26F5BA26F90C7FCA3B526F000FE011FB512F8A2167C16384D337DB254>77
D<B500E091383FFFFC808080C66D9138003C00808101F77F13F301F17F8101F07F6E7E6E
7E6E7E6E7F806E7F826E7F6E7F6F7E6F7E6F7E816F138017C06F13E06F13F06F13F8EE7F
FCEE3FFE161FEE0FFF18BC7013FC828282177F173F171FA2170F170717031701B500F014
00187C183CA23E337DB245>I<913803FF80027F13FC49B6FC0107010113C0903A1FF800
3FF0D93FE0EB0FF8D9FFC0EB07FE48496D7E4890C76C13804980000717C04848ED7FE0A2
4848ED3FF0A2003F17F8A2007F17FC49151FA300FF17FEAB007F17FCA26D153FA2003F17
F8A36C6CED7FF0A26C6CEDFFE0000717C06D5C6C17806C6D4913006C6D495AD97FF0EB1F
FCD91FF8EB3FF0903A07FF01FFC0010190B5C7FC6D6C13FC020713C037357BB342>I<B7
12F8EEFF8017E017F8C69039E0007FFCEE0FFE707E701380A27013C0A218E0A718C0A24C
1380A24C13004C5AEE7FFC91B612F017C04CC7FC02E0C9FCB3B612E0A433337DB23C>I<
B712E016FEEEFFC017F0C6D9E00013FCEE1FFEEE07FF707FA2707FA284A660A24C5B95C7
FC4C5AEE1FFCEEFFF891B612C094C8FC83DAE0037F03007FEE3FF083707EA2707EA583A4
193CA2188082F0C07CB6D8E003147870EBE1F070EBFFE0053F13C0CA000313803E347DB2
42>82 D<D90FFC137090397FFF80F048B512E1000714FB390FF803FF391FE0007F484813
3F49130F007F140790C7FC1503481401A36D1300A27F6D140013F8387FFFC014FCECFFE0
6C14F86C14FE816C1580000315C06C15E06C6C14F0131F010014F8140F9138007FFC153F
151F150F00F01407A21503A27EA216F86C14076C15F07E6DEB0FE001E0131F01FEEB7FC0
00FDB61200D8F87F5BD8F01F13F8D8E00113C026357BB331>I<003FB812F8A4D9F003EB
801FD87F80ED03FC01001501007E1600007C177CA20078173CA400F8173E48171EA4C716
00B3A9011FB612F0A437327DB13E>I<B600E090B512F8A4C601E0C8EAF800B3B0017F15
016E5DA2013F4B5A6E1407011F5E6D6C140F6D6CEC3F806D6C6C01FFC7FC6D9038F007FE
6D6CB512F8021F5C020714C09126007FFCC8FC3D347DB244>I<B66C90381FFFFCA40001
01E0C8EA7E006C177C6E15FC017F5E6E1401A2013F5E6E1403011F5E6E1407010F5E6E14
0F6D5E81171F6D93C7FC6F5B6D153E6F137E6D157C6F13FC027F5C811601023F5CEDFC03
021F5CEDFE07020F5CEDFF0F6E5C168F169F6E91C8FC16FF6E5BA26E5BA26F5AA36F5AA2
6F5AA26F5AA23E347EB243>I<B66CB639800FFFFCA400019026C0000101C0C7EA1F001B
1E6E6F143E6C6F163CA26E6E6C147C017F19786E4A6C14F8013F61A26E496D1301011F61
6E497F010F03CF4A5AA26E01076D13076D03875DA29226800F03EB800F6D96C7FCDBC01F
6E5A6DDA1E01141EA2DBE03EECE03E6DDA3C00143CDBF07C14F0027F0178017F5BA2DBF8
F8ECF8F8023F49013F5BA2DBFDE0EB1FFD021F5F03FF15FF6E496D5BA36E496D5BA26E90
C76C90C8FCA36E486E5AA24B140002005EA20378157856347EB25B>I<EB7FFE0003B512
E04814F8390FF00FFC391FF803FF806E138016C0157F6C5A6C5AEA0180C8FCEC7FFF010F
B5FC90B6FC0003EBF07F000F1300EA1FF8485A485A485A5BA315FF7F007F5B6D4813E03A
3FF80FBFFF000FB5121F0003EBFC0F39007FE00728217EA02B>97
D<EA01FC12FFA4120F1207ADEC07FC91387FFF8001FDB512E09039FFF00FF89138C007FC
91380003FE496D7E496D1380A217C0167FA217E0A917C0A216FF1780A26D4913006D495A
9138C007FC9039F3F01FF801E1B512E0D9C07F13809026800FF8C7FC2B347EB331>I<90
3807FF80013F13F090B512FC3903FE01FE4848487EEA0FF8EA1FF0EA3FE0A2007F6D5A49
6C5A153000FF91C7FCA9127F7FA2003FEC07807F6C6C130F000FEC1F00D807FE133E3903
FF80FCC6EBFFF8013F13E0010790C7FC21217DA027>I<ED01FC15FFA4150F1507ADEB07
FE90383FFFC790B512F70003EB01FF3907FC003F4848131F4848130F48481307A2127F5B
A212FFA9127FA27F123F150F6C6C131F6C6C133F6C6C497E2603FE03B512E0C6B512E701
3F1387903807FC072B347DB331>I<903803FF80013F13F090B512FC48EB03FE3907FC00
7F4848EB3F804848EB1FC05B003FEC0FE0127F5B16F012FF150790B6FCA301C0C8FCA412
7F7F123F16F06C7E000F14016C6CEB03E0D803FEEB0FC03A01FF807F806C6CB51200011F
13FC010313E024217EA029>I<EC3FE0903803FFF8010F13FC90383FF1FE90387FC3FFEB
FF83481303A2EA03FEEC01FEA2EC00781500A7B512FEA4D803FEC7FCB3A7387FFFF8A420
347EB31B>I<16F890390FFC07FE90387FFF9F48B6127F3907FC0FFC380FF003001F14FE
D9E001133E003FECFF1C1600A6001F5CEBF003000F5C3907FC0FF890B512E0486C1380D9
0FFCC7FC48C9FCA37F7F90B512F015FE6CECFF8016E06C15F06C15F84815FC121F393F80
001F48C7EA03FE481401481400A46C14016C6CEB03FC6C6CEB07F86C6CEB0FF0D80FFCEB
7FE00003B61280C6ECFE00010F13E028327EA12C>I<EA01FC12FFA4120F1207ADEC03FF
020F13C0023F13F09138FC0FF89039FDE007FCEBFFC04A6C7E1400A25BA25BB2B539E07F
FFF0A42C347DB331>I<EA03F0487E487E487EA66C5A6C5A6C5AC8FCA8EA01FC12FFA412
0F1207B3A5B512C0A412357DB418>I<EA01FC12FFA4120F1207ADED7FFFA4ED1FC04B5A
037EC7FC5DEC03F8EC07E04A5AEC3F804AC8FC4A7E90B5FC8181ECBFF0EC3FF89038FC1F
FCEBF80F6E7E6E7E6E7F82806F7E6F7E6F7EB539C07FFFC0A42A347DB32F>107
D<EA01FC12FFA4120F1207B3B3A6B512E0A413347DB318>I<2703F803FEEB03FE00FF90
3B1FFFC01FFFC0027FD9E07F7F913BF81FF0F81FF0903CF9E00FF9E00FF8260FFBC0EBFB
C06CB4486CB4486C7E02001400495CA3495CB2B500E0B500E0B512E0A443217CA04A>I<
3901F803FF00FF010F13C0023F13F09138FC0FF89039F9E007FC380FFBC06CB4486C7E14
00A25BA25BB2B539E07FFFF0A42C217DA031>I<903803FF80011F13F090B512FE48EB01
FF3A07FC007FC0D80FF0EB1FE0001F15F049130F003F15F8491307007F15FCA300FF15FE
A8007F15FCA26D130F003F15F8001F15F06D131F6C6CEB3FE06C6CEB7FC03A01FF01FF00
6CEBFFFE013F13F80103138027217EA02C>I<3901FC07FC00FF90387FFF8001FDB512E0
9039FFF01FF89138C007FC000F90380003FE6C4880496D1380A26F13C0A3EE7FE0A9EEFF
C0A34B1380A26D4913006D495A9138C00FFC9138F03FF801FDB512E0D9FC7F1380DA0FF8
C7FC91C9FCABB512E0A42B307EA031>I<3901F81F8000FFEB7FF0ECFFF89038F9E3FC90
38FBC7FE380FFF876C1307A213FEEC03FCEC01F8EC0060491300B1B512F0A41F217EA024
>114 D<9038FFE1C0000713FF5A383F803F387E000F14075A14037EA26C6CC7FC13FCEB
FFE06C13FC806CEBFF80000F14C06C14E0C6FC010F13F0EB007F140F00F0130714037EA2
6C14E06C13076CEB0FC09038C01F8090B5120000F913FC38E03FE01C217DA023>I<133C
A5137CA313FCA21201A212031207001FB51280B6FCA3D807FCC7FCB0EC03C0A79038FE07
8012033901FF0F006C13FEEB3FFCEB0FF01A2F7EAE22>I<D801FC14FE00FF147FA4000F
140700071403B21507A2150F151F6C6C497E6C6C01FB13F06CEBFFF3013F13C3903807FE
032C217DA031>I<B539C007FFC0A4D807FEC7EAF80000035D6D13016C5D14806C4A5AA2
ECC007017F5CECE00F013F91C7FC6E5A011F131EECF83E010F133CECFC7C01071378ECFE
F801035B14FF6D5BA26D5BA26E5AA26EC8FCA2141E2A217EA02F>I<B53B83FFFC03FFE0
A43D07FC001FE0003E00183C6D167C00036F1378033F14F86C6C6E5B157F9139807BFC01
6C5FDAC0FB1303017FD9F1FE5B14C19139E1E0FF07013F5E9139F3C07F0F011F038FC7FC
14F7903A0FFF803FDEA29238001FFE6D5DA26D486D5AA24A130701015DA26D486D5A4A13
013B217EA040>I<B539C03FFF80A400039039000FC0006C01805B6C4AC7FC90387FC03E
6D6C5A6E5A90381FF9F0EB0FFF6D5B6D5B6D5B7F816E7E4A7E497FEB03EF903807C7FC90
380FC3FE90381F83FFD93F017FD97E007F496D7E496D7E4848131FD8FFFE90387FFFC0A4
2A217EA02F>I<B539C007FFC0A4D807FEC7EAF80000035D6D13016C5D14806C4A5AA2EC
C007017F5CECE00F013F91C7FC6E5A011F131EECF83E010F133CECFC7C01071378ECFEF8
01035B14FF6D5BA26D5BA26E5AA26EC8FCA2141EA25CA2147C003E1378007F13F8486C5A
1381EB83E0EB87C0495AD87F3FC9FCEA3FFEEA1FF8EA07E02A307EA02F>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmti9 9 51
/Fm 51 123 df<ED03FE92391FFFC7C092387E03EF9239F800FF80913801F003EC03E0A2
DA07C01400EE01DFEE001F4A485B173EA3021F147E92C7127CA317FC4A5C143E011FB6FC
A25F9039007E0001147C16035FA214FC4A13075FA30101140F4A5CA3161F010392C7FC5C
1706EE3F07EE3E0F0107150EA24A141E171C163C010F153C4AEB3E38EE1E78705AEE03C0
011F91C8FC91CAFCA3133EA21238EA7E3C137CEAFE7812FC485AEA78E0EA3FC0000FCBFC
324582B42D>13 D<DB03FE903803FFC092271FFFC01F13F8923B7E03E07F007C9227F800
F0F8131E912801F003F1F0131FDA03E0D9F3E0133FDDF7C0137FDA07C013E7DC01CF147E
9326000F80131C020F17004B131F95C8FCA2141F92C7FC5F173EA25C143E011FB912F0A2
1AE0D9003EC7387C0003147E027C160705FC14C05FA202FC160F4A178016015F191F0101
18005C16034D5B193E13034A170C0407EC7E0E4DEB7C1E1A1C13075C040F15384D13781A
78010FEF7C704AEE3CF0041FEC1FE094C7EA078096C7FC49C7FC163EA3013E5C0038131C
007E013F1378013C14F83AFE7C7F01F026FC787E5B3AF8F03C07C0D878E0495A273FC01F
FECAFC390F0003F8484582B444>I<14301438A28080A2140F801580A2140315C0A41401
15E0A81403A415C0A31407A31580140FA315005CA3141E143EA2143C147CA25CA25C1301
5C13035C13075C130F91C7FC131E133E133C5B5B485AA2485A485A48C8FC121E5A12705A
5A1B4A7EB71F>41 D<EA0380EA0FE0121FA5EA0760120013E013C0A2120113801203EA07
001206120E5A5A5A5A5A0B177A8718>44 D<B51280A46C1300110579911B>I<121C127F
12FFA412FE12380808778718>I<EC01801403A21407140FEC1F005C14FF5BEB1FFEEB7F
BEEB7E7E1320EB007CA214FCA25CA21301A25CA21303A25CA21307A25CA2130FA25CA213
1FA291C7FCA25BA2133EA2137EA2137C13FCB512FCA3193277B127>49
D<EC07F0EC3FFCECF81E903803E00F903907800780D90F0013C0011E13035B013814E0EB
7980EB71C00170130701F014C013E0A201E1130FD9E380138090387F001F013C140090C7
123E5D5D4A5AEC1FE0903807FF804AC7FC6D7E90380007C06E7EA26E7EA514031218127E
A21407485C5A00E0495AA26C495A007049C7FC147E00785B383C01F0381E07E03807FF80
D801FCC8FC233479B127>51 D<EC0FC0EC7FF0ECFFFC903803F07E903807C03E49487EEB
1F00013E7F017E14805BA2485AA2485A151FA212075BA2ED3F00A2485A5DA2000714FEA2
1401140300035CEBE0070001131E3900F039F8EB7FF1EB0FC190380003F0A24A5AA25D4A
5A141F003891C7FC007E133E00FE137E5C48485A48485A48485A38781F80D87FFFC8FCEA
1FFCEA07E0213478B127>57 D<161C163CA2167C16FCA21501821503A2ED077E150F150E
151CA21538A2157015F015E0EC01C0A2913803807F82EC0700A2140E141E141C5CA25CA2
5C49B6FCA25B913880003F49C7EA1F80A2130E131E131C133C13385B13F05B12011203D8
0FF0EC3FC0D8FFFE903807FFFEA32F367BB539>65 D<0107B612C04915F017FC903A003F
8000FE177FEF3F8092C7121FA24A15C0A2147EA214FE18804A143FA20101ED7F00177E4A
5C16010103EC03F04C5A4AEB1FC091B6C7FC495C9139F0007F804AEB0FC0707E010F6E7E
834A1301A2011F81A25CA2133F5F91C71203A2494A5AA2017E4A5A4C5A01FE4A5A4CC7FC
49EB01FE0001EC07FC007FB612F0B712C04BC8FC32337BB236>I<DB1FF013C09238FFFC
010203EBFF03913A0FF00F878091393F8003CF9139FE0001EF4948EB00FFD903F01500D9
0FE080495A49488091C8123E137E13FE485A4848153CA2485AA248481538A2485A94C7FC
123F5BA3127F90CBFCA412FEA2EE03C0A25F127E160794C7FC5E160E007F151E6C5D5E6C
6C147016F06C6C495A6C6CEB07C06C6C49C8FC6C6C133E6CB413FC90387FFFF0011F13C0
D903FEC9FC323775B437>I<0107B612C04915F017FC903A003F8001FEEE007FEF1F8092
C7EA0FC0EF07E05CEF03F0147E170102FE15F8A25CA21301A25CA2130317035CA2130718
F04A1407A2130F18E04A140F18C0011F151F18805CEF3F00133F177E91C85AA2494A5A4C
5A017E4A5A4C5A01FE4A5A047EC7FC49495A0001EC0FF8007FB612E0B7C8FC15F835337B
B23A>I<0107B712F05B18E0903A003F80001F1707170392C7FC17015C18C0147EA214FE
A24A130EA20101EC1E03041C13804A91C7FC163C13035E9138F001F891B5FC5B5EECE001
1500130F5E5C1707011F01015BEEC00E0280141E92C7121C133F173C91C812381778495D
A2017E14014C5A01FE14074C5A49141F00014AB45A007FB7FCB8FC94C7FC34337CB234>
I<0107B712E05B18C0903A003F80003F170F170792C7FC17035C1880147EA214FEA25C16
1C0101EC3C07043813004A91C7FCA20103147816704A13F0150349B5FCA25EECE003130F
6F5A14C0A2011F13035E1480A2013F90C9FCA291CAFCA25BA2137EA213FEA25B1201387F
FFFCB5FCA233337CB232>I<92391FE001809238FFF8030207EBFE07913A1FF01F0F0091
393F80079F9139FE0003DFD901F86DB4FCD907F05C49481300495A4948147E49C8127C13
7E13FE485A48481578A2485AA248481570A2485A94C7FC123F5BA3127F90CBFCA400FE91
383FFFFCA25F9238003F8094C7FCA2007E5DA2167EA2007F15FE7E5E6C6C1301A26C6C49
5A6D13076C6CEB0F786C6C133E3A00FF01FC3090387FFFF0011F01C0C8FCD903FEC9FC31
3775B43B>I<010FB51280A216009038003FC05DA292C7FCA25CA2147EA214FEA25CA213
01A25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA25BA2137EA2
13FEA25B1201B512F8A25C21337BB21E>73 D<0107B590380FFFF05B19E09026003FC090
3803FE004B14F818E092C7485A4DC7FC4A141E177C027E5CEE01E002FE495A4C5A4A011F
C8FC163E010114785E4A485AED07C00103495A4B7EECF03F157F903907F1FFE0ECF3E791
38E787F0ECEF0790380FFE0302FC7FECF80114E0D91FC07F15004A7FA2013F147E167F91
C77E835B161F017E81160F13FE835B000182267FFFF090B57EB55B95C7FC3C337BB23B>
75 D<0107B512C05BA29026003FC0C7FC5DA292C8FCA25CA2147EA214FEA25CA21301A2
5CA21303A25CA21307A25CA2130FA25C17E0011F140117C05C1603013F1580160791C7FC
EE0F005B5E017E143EA201FE5CED01FC4913030001EC1FF8007FB6FCB7FC5E2B337CB230
>I<902607FFC0ED7FFC4917FF81D9003F4B1300611803023BED077CA2027BED0EFC6102
73151C1838DAF1F01439F071F014E118E10101ED01C36102C1EC0383EF07030103160705
0E5BEC80F8171C0107ED380F6102001470A249EDE01FDC01C090C7FC130EEE0380011E01
7C5C933807003E011C140EA2013C4A137E187C01385C5E017816FC6F485B1370ED3FC001
F0EC80016000011500D807F81503277FFF803E90B512C0B5EB3C01151C46337BB245>I<
902607FF8090383FFFC0496D5BA2D9001F913803F8004A6C6D5A6060EC3BF0027B140360
EC71F8A202F11407DAF0FC91C7FC14E0A20101017E5B170E14C0810103151EEE801CEC80
1FA20107ECC03C030F1338140016E049010713781770010E14F01503011E15F0705A011C
1301A2013C14FD03005B133816FF0178147F5F0170143FA213F070C8FC1201EA07F8267F
FF807FB5140EA23A337BB239>I<ED1FE0913801FFFC913807E03F91391F800FC091393E
0003E002F8EB01F0495A4948EB00F8494814FC4948147C49C8127E133E017E153E49153F
485AA2485A12075B120F5B121F177F5B123FA348C912FEA4EE01FC12FEEE03F8A217F016
0717E0160F007E16C0EE1F80A2EE3F006C157E5E5E6C6C495A000F4A5A6D495A0007EC1F
806C6C013EC7FCD801F813FC39007E07F090383FFF80D907FCC8FC303775B43B>I<0107
B612C04915F883903A003F8001FEEE003FEF1F8092C713C0170F5C18E0147EA214FEEF1F
C05CA201011680173F4A1500177E010315FE5F4AEB03F8EE07E00107EC3FC091B6C7FC16
F802E0C9FC130FA25CA2131FA25CA2133FA291CAFCA25BA2137EA213FEA25B1201387FFF
F0B5FCA233337CB234>I<913901FC018091380FFF03023F13C791387E07EF903A01F801
FF0049487E4A7F495A4948133E131F91C7FC5B013E143CA3137E1638A293C7FC137FA26D
7E14E014FE90381FFFC06D13F86D7F01017F6D6C7E020F7F1400153F6F7E150FA4120EA2
001E5D121CA2151F003C92C7FCA2003E143E5D127E007F5C6D485A9038C007E039F3F80F
C000F0B5C8FC38E03FFC38C00FF029377AB42B>83 D<0003B812C05A1880903AF800FC00
3F260FC001141F0180150F01005B001EEE07001403121C003C4A5BA200380107140E1278
00705CA2020F141E00F0161CC74990C7FCA2141FA25DA2143FA292C9FCA25CA2147EA214
FEA25CA21301A25CA21303A25CA21307A25C497E001FB512F05AA2323374B237>I<3B3F
FFF801FFFE485CA2D801FEC7EA1FC049EC0F80170049140EA2161E120349141CA2163C12
07491438A21678120F491470A216F0121F495CA21501123F90C75BA215035A007E5DA215
0712FE4892C7FCA25D150E48141E151C153C153815786C5C5D007C1301007E495A003EEB
0F806C011EC8FC380FC0FC6CB45A000113E06C6CC9FC2F3570B239>I<902607FFFE9038
7FFFC0A39026001FF090380FF80003C014C0020F5D6F91C7FC0207141E6F5B5F02035C6F
485A02015C6F485A4CC8FC0200130EEDFE1EED7E3C5EED7FF06F5A5E5E151F82A24B7E15
7F1577EDE7F0EC01C7EC038302077FEC0F01021E7F143CEC38004A7F4A137E495A010314
7F49487F49C77F131E49141F017C8113FC00074B7EB5D88003B57EA295C7FC3A337CB239
>88 D<EB03F0EB0FF890383E1C6090387C0FF0EBF807EA01F0EA03E00007EB03E0EA0FC0
A2381F800715C0EA3F00A2140F481480127EA2141F00FE14005A1506EC3F07EC3E0F150E
147E007C141EECFE1CEB01FCD83C03133C393E07BE38391F0E1E783907FC0FF03901F003
C0202278A027>97 D<137EEA0FFE121F5B1200A35BA21201A25BA21203A25BA21207A2EB
C3E0EBCFF8380FDC3EEBF81F497E01E01380EA1FC0138015C013005AA2123EA2007E131F
1580127CA2143F00FC14005AA2147EA25CA2387801F85C495A6C485A495A6C48C7FCEA0F
FCEA03F01A3578B323>I<14FCEB07FF90381F078090383E03C0EBFC013801F8033803F0
073807E00F13C0120F391F80070091C7FC48C8FCA35A127EA312FE5AA4007C14C0EC01E0
A2EC03C06CEB0F80EC1F006C137C380F81F03803FFC0C648C7FC1B2278A023>I<ED0FC0
EC03FFA21680EC001FA31600A25DA2153EA2157EA2157CA215FCA2903803F0F8EB0FF8EB
3E1DEB7C0F496C5AEA01F0EA03E000071303D80FC05BA2381F8007A2D83F005BA2140F5A
007E5CA2141F12FE4891C7FC1506EC3F075DEC3E0E147E007C141EECFE1CEB01FCD83C03
133C393E07BE38391F0E1E783907FC0FF03901F003C0223578B327>I<EB03F8EB0FFEEB
3E0F9038F807803801F003EA03E0EA07C0120FEA1F801407D83F0013005C007E133EEB03
F8387FFFE04848C7FC00FCC8FCA45AA4EC0180EC03C0A2007CEB0780EC1F00003C133E6C
13F8380F03E03807FF80D801FCC7FC1A2277A023>I<151FED7FC0EDF0E0020113F0EC03
E3A2EC07C316E0EDC1C091380FC0005DA4141F92C7FCA45C143E90381FFFFEA3D9007EC7
FC147CA414FC5CA513015CA413035CA413075CA3130FA25CA3131F91C8FCA35B133E1238
EA7E3CA2EAFE7812FC485AEA78E0EA3FC0000FC9FC244582B418>I<143FECFF80903803
E1E6903807C0FF90380F807FEB1F00133E017E133F49133EA24848137EA24848137CA215
FC12074913F8A21401A2D80FC013F0A21403120715E01407140F141F3903E03FC0000113
7FEBF0FF38007FCF90381F0F801300141FA21500A25C143E1238007E137E5C00FE5B4848
5A387803E0387C0F80D81FFFC7FCEA07F820317CA023>I<EB0FC0EA03FFA25CEA001FA3
91C8FCA25BA2133EA2137EA2137CA213FCA29038F83F80ECFFE03901FBE0F09038FF80F8
EC007849137C485A5B5BA2484813FC5D5BA2000F13015D1380A2001F13035DEB0007EDC0
C048ECC1E0020F13C0003E1481A2007E1483ED0380007C1407160000FC140E151E48EB07
F80070EB01F023357BB327>I<EB0180EB07E0A2130FEB07C0EB038090C7FCABEA01F0EA
03FCEA0F1E120E121C123C1238EA783E1270A2137EEAF07CEA60FCC65AA212015BA21203
5BA2000713C0EBC1E0000F13C01381A21383EB038013071400130E131EEA07F8EA01F013
337AB118>I<EB0FC0EA01FF5A5CEA001FA391C7FCA25BA2133EA2137EA2137CA213FCA2
491378EC01FE0001EB078FEC0E0F9038F01C3F143800031370ECE03E9038E1C01C9038E3
8000D807E7C7FC13EE5B13F8120F13FFEB9FC0EB83F0EA1F81EB80F81300150C48141E15
1C123EA2007E143C1538127C157800FCEB787015E048EB3FC00070EB0F8020357BB323>
107 D<133FEA07FF5A13FEEA007EA3137CA213FCA213F8A21201A213F0A21203A213E0A2
1207A213C0A2120FA21380A2121FA21300A25AA2123EA2127EA2127C1318EAFC1C133CEA
F838A21378137012F013F0EAF8E01279EA3FC0EA0F00103579B314>I<2703C003F8137F
3C0FF00FFE01FFC03C1E783C1F07C1E03C1C7CF00F8F01F03B3C3DE0079E0026383FC001
FC7FD97F805B007001005B5E137ED8F0FC90380FC00100E05FD860F8148012000001021F
130360491400A200034A13076049013E130FF081800007027EEC83C0051F138049017C14
03A2000F02FC1407053E130049495CEF1E0E001F01015D183C010049EB0FF0000E6D48EB
03E03A227AA03F>I<3903C007F0390FF01FFC391E787C1E391C7CF01F393C3DE00F2638
3FC01380EB7F8000781300EA707EA2D8F0FC131F00E01500EA60F8120000015C153E5BA2
0003147E157C4913FCEDF8180007153C0201133801C013F0A2000F1578EDE070018014F0
16E0001FECE1C015E390C7EAFF00000E143E26227AA02B>I<14FCEB07FF90381F07C090
383E03E09038FC01F0EA01F83903F000F8485A5B120F484813FCA248C7FCA214014814F8
127EA2140300FE14F05AA2EC07E0A2007CEB0FC01580141FEC3F006C137E5C381F01F038
0F83E03803FF80D800FCC7FC1E2278A027>I<011E137C90387F81FF9039F3C387C09039
E3EF03E03901E1FE01D9C1FC13F0EBC3F8000313F0018314F814E0EA07871307000313C0
1200010F130316F01480A2011F130716E01400A249EB0FC0A2013EEB1F80A2017EEB3F00
017F133E5D5D9038FF81F09038FDC3E09038F8FF80027EC7FC000190C8FCA25BA21203A2
5BA21207A25BB5FCA325307FA027>I<3903C00FC0390FF03FF0391E78F078391C7DE03C
393C3FC0FC00381380EB7F00007814F8D8707E13701500EAF0FC12E0EA60F812001201A2
5BA21203A25BA21207A25BA2120FA25BA2121FA290C8FC120E1E227AA020>114
D<EB03F0EB1FFCEB3C1EEB780FEBF007EA01E0140F0003131F13C0A2EBE00414007FEBFF
8014E06C13F06C13F8EB7FFC1307EB00FE147E143E123800FC133CA3147C00F013784813
F0EAF001387803E0383C0F80381FFE00EA03F818227AA01F>I<1303EB0F80A3131FA214
00A25BA2133EA2137EA2137C387FFFF8A2B5FC3800F800A21201A25BA21203A25BA21207
A25BA2120FA25B1460001F13F014E01300130114C01303001E1380EB07005BEA0F1EEA07
F8EA01E015307AAE19>I<EA01F0D803FC1307D80F1E5B000E5C121C123C00385CD8783E
133E1270A2017E137ED8F07C137CEA60FCC65A15FC00015C5BA2140100035C13E0166002
031370EDE0F0D807C014E0A20003EB07E116C09038E00FC1EC1FC3000190383FE3809038
F071E73A007FE0FF0090381F803C24227AA029>I<01F01338D803FC13FCEA0F1E120E12
1C123C0038147CEA783E0070143CA2137ED8F07C1338EA60FCC65A1578000114705BA215
F0000314E05BA2EC01C0A2EBC003158014071500EBE00EA26C6C5A3800F878EB7FE0EB1F
801E227AA023>I<D801F01538D803FC010E13FCD80F1E131E000E143E121C123C003802
7E137CD8783E137C0070163CA2017E13FCD8F07C491338EA60FCC65A0201147800014A13
7013F0A2020314F0000316E001E05BA2160117C001C013C00207EB0380A29039E00FE007
1700021F130E3A01F03DF01E3A00F878F83C90393FF03FF090390FC00FC02E227AA033>
I<011F137C90387FC1FF3A01E1E787803A03C0F703C0903880FE0FEA07004813FC000E15
80001E9038F80700001C91C7FC1301003C5B1218120013035CA31307A25C1506010F130F
150E14800038141ED87C1F131C00FC143C1538013F5B39F07FC0E03970F3C3C0393FE1FF
80260F807EC7FC22227CA023>I<13F0D803FC1307D80F1E130F000E141F121C123C0038
143FD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC000114F85BA214010003
14F013E0A2140315E0EA07C0A20003130715C0EBE00F141F0001133F9038F07F8038007F
EFEB1F8FEB001F1500A25C003E133E007E137E147C5C007C5BEA7001495A38380780D83C
1FC7FCEA0FFCEA07F020317AA025>I<903807801C90381FE03C90383FF038017F137890
38FFF8F03901F07CE0EBE01F3903C003C09038800780EC0F00C7121E141C143C5C5C495A
EB07C0495A011EC7FC5B5B4913704913F0000114E0485A38078001390FC003C0381FF807
90383E0F80393C1FFF00127838700FFE38F007F838E001E01E227CA01F>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmr9 9 85
/Fn 85 125 df<011FB512F0A39026001FF0C7FC6E5AA7EC7FF80107B57E90393FCFEFF0
9039FE0FE1FCD803F8EBE07FD807E0EC1F80D80FC0EC0FC0001F16E0D83F80EC07F0007F
16F8010014034816FCA76C16F801801407003F16F0D81FC0EC0FE0000F16C0D807E0EC1F
80D803F8EC7F00D800FEEBE1FC90393FCFEFF00107B512809026007FF8C7FCEC0FE0A74A
7E011FB512F0A32E337CB237>8 D<91393FE00FE0903A01FFF83FF8903A07E01EF83C90
3A1F800FF07E903A3F001FE0FE017E133F4914C0485A1738484890381F8000ACB812C0A3
3B03F0001F8000B3A7486C497EB50083B5FCA32F357FB42D>11 D<EC1FE0ECFFFC903803
F01E90390FC00780EB1F8090393F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7
FCA33901F8001F150FB3A6486CEB1FE0267FFFC1B5FCA328357FB42B>I<EC1FF891B512
C0903803F00F90380FC01FEB1F80EB3F00137E5B150F485AACB7FCA33901F8000FB3A748
6CEB1FE0267FFFE3B5FCA328357FB42B>I<DA1FE013FF9126FFFC0713E0903B03F01E1F
80F0903B0FC0077E003CD91F805B90273F001FF8137E017E4A13FE495CA248485C030F14
7C95C7FCA9187EB912FEA33B01F8000FC000187EB3A6486C496C13FF297FFFC1FFFE0F13
F8A33D357FB440>I<DA1FF0EBFFC09126FFFC0713FE903B03F00F1F807E903B0FC007FE
00FE90391F801FFCD93F005B017E5C495C187E48486D5AACB912FEA33C01F8000FC0007E
B3A7486C496C13FF267FFFE3B5001F13F8A33D357FB440>I<003C13F0387E01F838FF03
FCA2EB83FEA2EA7F81383D80F600011306A40003130EEB000CA248131C00061318000E13
38000C1330001C13704813E0387001C00060138017177EB326>34
D<017C1503D803FEED078026078780140F260F01C0141F261E00E0EC3F00003E01F8147E
003C017CEB01FE007C90397F8007FC913933FFFEF800789038307FF900F89039380001F0
0218495A16075F4C5A161F4CC7FC163E5E023813FC007801305B007C4A5AEC7003003C01
605B003E9038E007C0001EEBC00FD80F015C270787801FC8FC3903FE003FD8007C133E90
C748131F03FCEBFF809239F801E1E0913A01F003C07002039038078030DBE00F1338DA07
C0EB0018020F49131C0380140C91381F001E4A013E130E023E15065C14FC495A5C495A13
075C4948150E011F021E130C91C7121F013E161C017E6E1318017CED8038490207133000
01923803C07049913801E1E049913800FF806C48ED1F00373C7CB740>37
D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C121C5A5A1260
09177AB315>39 D<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B120F
90C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F12
03A26C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>I<12C07E127012
3C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E131FA37F1480A5EB
07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A485AA2485A48C7FC
120E5A123C12705A5A124A7CB71E>I<156015F0B3A4007FB812C0B912E0A26C17C0C800
F0C8FCB3A4156033327CAB3C>43 D<123C127EB4FCA21380A2127F123D1201A412031300
A25A1206120E120C121C5A5A126009177A8715>I<B512F0A514057F921A>I<123C127E12
FFA4127E123C08087A8715>I<1530157815F8A215F01401A215E01403A215C01407A215
80140FA215005CA2143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A2495AA2
91C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290
C8FC5AA2121E123EA2123C127CA2127812F8A25A12601D4B7CB726>I<EB0FE0EB7FFCEB
F83E3903E00F803907C007C0EB8003000F14E0391F0001F0A24814F8A2003E1300007E14
FCA500FE14FEB2007E14FCA56CEB01F8A36C14F0A2390F8003E03907C007C0A23903E00F
803900F83E00EB7FFCEB0FE01F347DB126>I<13075B5B137FEA07FFB5FC13BFEAF83F12
00B3B3A2497E007FB51280A319327AB126>I<EB3FC0EBFFF0000313FC380F80FF391E00
7F80001CEB3FC048EB1FE048130F15F00060130712FC6C14F87E1403A3007E1307123CC7
FC15F0A2140F15E0EC1FC0A2EC3F801500147E5C495A5C495A495A495A49C7FC133E133C
4913185B485A48481330485A48C7FC001C1470001FB512F05A5AB612E0A31D327CB126>
I<EB1FE0EBFFFC4813FF3907E03F80390F001FC0001EEB0FE0001CEB07F0123F018013F8
140313C01380A2381F0007C7FC15F0A2EC0FE015C0141FEC3F80EC7E00EB01F8EB7FE014
FCEB003FEC1FC0EC0FE0EC07F015F8140315FC140115FEA3127EB4FCA415FC4813031278
0070EB07F86C14F0003C130F001FEB1FE0390FE03F800003B51200C613FCEB1FE01F347D
B126>I<EC01C0A214031407A2140F141FA2143F147F146F14CF1301EB038F140F130713
0E130C131C13381330137013E013C0EA0180120313001206120E120C5A123812305A12E0
B71280A3C7380FC000A94A7E0107B51280A321337EB226>I<000C14C0380FC00F90B512
8015005C5C14F014C0D80C18C7FC90C8FCA9EB0FC0EB7FF8EBF07C380FC03F9038001F80
EC0FC0120E000CEB07E0A2C713F01403A215F8A41218127E12FEA315F0140712F8006014
E01270EC0FC06C131F003C14806CEB7F00380F80FE3807FFF8000113E038003F801D347C
B126>I<14FE903807FF80011F13E090383F00F0017C13703901F801F8EBF003EA03E012
07EA0FC0EC01F04848C7FCA248C8FCA35A127EEB07F0EB1FFC38FE381F9038700F809038
E007C039FFC003E0018013F0EC01F8130015FC1400A24814FEA5127EA4127F6C14FCA26C
1301018013F8000F14F0EBC0030007EB07E03903E00FC03901F81F806CB51200EB3FFCEB
0FE01F347DB126>I<1230123C003FB6FCA34814FEA215FC0070C7123800601430157015
E04814C01401EC0380C7EA07001406140E5C141814385CA25CA2495A1303A3495AA2130F
A3131F91C7FCA25BA55BA9131C20347CB126>I<EB0FE0EB7FFC90B5FC3903F01F803907
C007C0390F0003E0000EEB01F0001E1300001C14F8003C1478A3123EA2003F14F86D13F0
EBC001D81FF013E09038F803C0390FFE07803907FF0F006C13DE6C13F87EEB3FFE8001F7
13C0D803E313E0D8078013F0390F007FF8001E131F003EEB07FC003C1303481301EC007E
12F848143EA2151EA37E153C1278007C14787E6C14F0390F8003E03907F01FC00001B512
0038007FFCEB1FE01F347DB126>I<EB0FE0EB7FF8EBFFFE3803F83F3907E00F80390FC0
07C0D81F8013E0EC03F0EA3F0048EB01F8127EA200FE14FC1400A415FEA5007E1301A212
7F7E1403EA1F80000F13073807C00E3803E01C3801F03838007FF090381FC0FC90C7FC14
01A215F8A215F01403001F14E0383F800715C0140FEC1F809038003F00001C137E381F01
FC380FFFF0000313C0C690C7FC1F347DB126>I<123C127E12FFA4127E123C1200B0123C
127E12FFA4127E123C08207A9F15>I<123C127E12FFA4127E123C1200B0123C127E12FE
12FFA3127F123F1203A412071206A3120E120C121C1238123012701260082F7A9F15>I<
007FB812C0B912E0A26C17C0CCFCAC007FB812C0B912E0A26C17C033147C9C3C>61
D<15E0A34A7EA24A7EA34A7EA3EC0DFE140CA2EC187FA34A6C7EA202707FEC601FA202E0
7FECC00FA2D901807F1507A249486C7EA301066D7EA2010E80010FB5FCA249800118C77E
A24981163FA2496E7EA3496E7EA20001821607487ED81FF04A7ED8FFFE49B512E0A33336
7DB53A>65 D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80EE3FC0161F17E0160F17
F0A617E0161F17C0EE3F80EE7F0016FEED03FC90B612F05E9039FC0007FCED00FEEE3F80
EE1FC0EE0FE017F0160717F8160317FCA617F81607A2EE0FF0EE1FE0163FEE7FC0000391
3803FF00B75A16F816C02E337DB236>I<DA03FE130C91393FFF801C91B512E0903A03FE
01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B48
48157C485A173C485A171C123F5B007F160CA390C9FC481600AB7E6D150CA3123F7F001F
161C17186C7E17386C6C15306C6C15706D15E012016C6CEC01C0D97F80EB0380D91FC0EB
0F00D90FF0131ED903FE13FC0100B512F0023F13C0DA03FEC7FC2E377CB437>I<B77E16
F016FE3A01FE0001FF00009138003FC0EE0FE0707E707E707E707E177E177FEF3F80A2EF
1FC0A3EF0FE0A418F0AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07F04C5AEE
3FC000014AB45AB748C7FC16F8168034337EB23B>I<B812C0A3D803FCC7127F0001150F
EE03E01601A21600A21760A403061330A41700150EA2151E157E90B512FEA39038FC007E
151E150EA21506170CA3171892C7FCA41738A21770A217F01601160316070003157FB812
E0A32E337DB234>I<B81280A3D803FCC7FC0001151FEE07C01603A21601A21600A41760
150CA31700A2151CA2153C15FC90B5FCA3EBFC00153C151CA2150CA592C8FCAB487EB512
FEA32B337DB232>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A0FF000
3C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C485A173C48
5A171C123F5B007F160CA390C9FC4893C7FCAA0303B512E07E7F92390003FE00705A123F
7F121FA26C7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7CD90FF0EB1C3CD903
FEEBF81C0100B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>I<B5D8FE03B512F8A3
000190C73807FC006C486E5AB390B7FCA349C71203B3A3486C4A7EB5D8FE03B512F8A335
337EB23A>I<B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>I<017FB5FCA3
9038003FE0EC1FC0B3B1127EB4FCA4EC3F805A0060140000705B6C13FE6C485A380F03F0
3803FFC0C690C7FC20357DB227>I<B500FE903807FFF8A3000190C7000113006C48EC00
FC17F04C5A4C5A4CC7FC160E5E5E5E5E4B5A4B5A4BC8FC150E5D5D15F84A7E14034A7EEC
0EFF5C4A6C7E4A6C7EECE01FD9FFC07F4A6C7E4A6C7E5B6F7E6F7EA26F7E707EA2707E70
7E160F83707E707EA283486C913807FF80B500FE013F13FCA336337EB23C>I<B512FEA3
D803FEC9FC6C5AB3A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7FCA329337D
B230>I<D8FFFC923801FFF86D5DA20003EFFE00D801BFED06FCA3D99F80140CA2D98FC0
1418A3D987E01430A2D983F01460A3D981F814C0A3D980FCEB0180A2027EEB0300A36E13
06A26E6C5AA36E6C5AA36E6C5AA26E6C5AA36E6C5AA3913800FD80A2037FC7FCA3486C13
3ED80FF04B7EB5011C90387FFFF8A33D337CB246>I<D8FFFE91381FFFF87F80C6030013
006E143CD9DFE01418EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E
6E7E6E7EA26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FF
A2EE7F98EE3FD8A2EE1FF8160F1607A216031601A2486C1400D807F81578B500C01438A2
171835337EB23A>I<EC07FC91387FFFC0903901FC07F0903907E000FCD90F80133E013F
C76C7E017E6E7E496E7E48486E7E48486E7EA248486E7E000F8249157E001F167FA24848
ED3F80A2007F17C0A290C9121FA24817E0AB6C17C06D153FA3003F17806D157FA2001F17
006D5D000F5E6C6C4A5AA26C6C4A5A00015E6C6C4A5A017E4A5A6D4A5AD91FC0017FC7FC
D907E013FC903901FC07F09039007FFFC0DA07FCC8FC33377CB43C>I<B612FEEDFFC016
F03A03FC0007FC0001EC00FE167FEE3F80EE1FC017E0160FA217F0A617E0A2EE1FC0A2EE
3F80EE7F0016FEED07F890B65A168001FCC9FCB3A2487EB512F8A32C337DB234>I<EC07
FC91387FFFC0903901FC07F0903907E000FC4948137E013FC7EA1F80017E6E7E496E7E48
486E7E00038249140148486E7E000F8249157E001F167FA24848ED3F80A2007F17C0A390
C9121F4817E0AB6C17C0A26D153FA2003F1780A26D157F001F1700A2270FE001F013FE00
07D907FC5B9039F00E0E013B03F80C0703F8000190391C0383F03B00FC180187E0017EEC
CFC0013FECDF8090271F9C00FFC7FCD907EC13FC902701FE07F013609038007FFF913807
FC7091C7007813E0A2EE7C01EE7E0393387F07C0EE3FFFA21880821800705A705AEE01F0
33447CB43C>I<B612FCEDFF8016F03A01FE0007FC0000EC01FEED007F707E707E83160F
83A65FA24C5AA24C5A047EC7FC4B5AED0FF090B612C093C8FC9039FE001FC0ED07F06F7E
6F7E150082167E167FA583A5180C17C0A2043F131C486C1618B500FEEB1FE0040F133893
3807F070C93801FFE09338003F8036357EB239>I<90381FE00390387FFC0748B5FC3907
F01FCF390F8003FF48C7FC003E80814880A200788000F880A46C80A27E92C7FC127F13C0
EA3FF013FF6C13F06C13FF6C14C06C14F0C680013F7F01037F9038003FFF140302001380
157F153FED1FC0150F12C0A21507A37EA26CEC0F80A26C15006C5C6C143E6C147E01C05B
39F1FC03F800E0B512E0011F138026C003FEC7FC22377CB42B>I<007FB712FEA3903980
07F001D87C00EC003E0078161E0070160EA20060160600E01607A3481603A6C71500B3AB
4A7E011FB512FCA330337DB237>I<B500FE90381FFFF8A3000190C813006C48153C1718
B3AF1738017F1530A217706D6C1460011F15E06E495A010F14036D6C495A6D6C49C7FCD9
01FC131E6DB413FC91383FFFF0020F13C0020190C8FC35357EB23A>I<B500F0903803FF
F8A3D807FEC8EA7FC06C48ED1F000001161E6D151C00001618A26D15386D1530A26D6C5C
A26E14E0011F5DA26D6C495AA28001074AC7FCA26D6C1306A28001015CA26E131C010014
18806E5BA2ED8070023F1360A26E6C5AA215E1020F5BA2DA07F3C8FCA215FBEC03FEA36E
5AA26E5AA31570A235357EB23A>I<B5D8F007B539800FFFF0A3000390C7273FF0000113
00D801FC6E48EB007C1A386D140F00001930836D020715706D1860A26E496C14E0013F60
A26ED919FC1301011F60A26ED930FE1303010F95C7FCA26ED9607F5B01071706A26E9039
C03F800E0103170CA2913BFC01801FC01C01011718A2913BFE03000FE03801001730A2DA
FF06EB07F0027F5EA2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203F0EB00FF020F
93C8FCA24B800207157EA24B143E0203153CA24B141C020115184C357FB24F>I<B500F8
ECFFFEA300030180EC3FE06C90C8EA1F806CEE0E006D6C5C6D6C141817386D6C14305F6D
6C14E06D6C5C16016D6C5C6D6C49C7FC5E6D6C13065E91387F801C91383FC01816389138
1FE0306E6C5A16E06E6C5AEDF980EC03FF6E90C8FC5D1400B14A7E91B512FCA337337FB2
3A>89 D<003FB612FCA39039F80007F813C090C7EA0FF0003EEC1FE0123C0038EC3FC000
78EC7F801270EDFF004A5AA20060495AA24A5A4A5AC7FC4A5A4A5AA24A5A4AC7FCA2495A
495AA2495A495AA24948130C495AA2495A49C7FCA24848141CA2485A485A1638485A4848
147816F84848130148481307153FB7FCA326337CB22F>I<EAFFF0A4EAF000B3B3B3ADEA
FFF0A40C4B79B715>I<0003130C48131C000E133848137000181360003813E0003013C0
EA700100601380A2EAE00300C01300A400DE137800FF13FCEB83FEA2EA7F81A2383F00FC
001E1378171774B326>I<EAFFF0A41200B3B3B3AD12FFA40C4B7FB715>I<EB7F803803FF
F0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01FF131FEBFF8738
03FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C133B3A3F8071F180
391FC1E1FF2607FFC013003900FE003C22237DA126>97 D<EA03F012FFA312071203AEEC
3F80ECFFE09038F3C0F89038F7007E01FE7F49EB1F8049EB0FC05BED07E016F0A2150316
F8AA16F0150716E0A2ED0FC07F6DEB1F8001ECEB3F0001CF137C90388381F8903801FFE0
C76CC7FC25357EB32B>I<EB07F8EB3FFF9038FC07C03901F000E03903E003F03807C007
120FEA1F80123F90380003E04890C7FCA2127E12FEAA127FA26C14187F001F14386D1330
000F14706C6C13E03903F001C03900FC0F8090383FFE00EB07F01D237EA122>I<153FEC
0FFFA3EC007F81AEEB07F0EB3FFCEBFC0F3901F003BF3907E001FF48487E48487F8148C7
FCA25A127E12FEAA127E127FA27E6C6C5BA26C6C5B6C6C4813803A03F007BFFC3900F81E
3FEB3FFCD90FE0130026357DB32B>I<EB0FE0EB7FFCEBF83F3903F00F80D807E013C039
0FC007E0381F800315F0EA3F0014014814F8127EA212FEA2B6FCA248C8FCA5127E127FA2
6C1418A26C6C1338000F14306D13706C6C13E03901F003C03900FC0F00EB3FFEEB07F01D
237EA122>I<EB01FCEB07FF90381F078090383E0FC0EB7C1F13FCEA01F8A20003EB0700
49C7FCACB512F0A3D803F0C7FCB3A7487E387FFFE0A31A357FB417>I<151F90391FC07F
809039FFF8E3C03901F07FC73907E03F033A0FC01F83809039800F8000001F80EB000748
80A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C380EFFF8380C1FC0001CC9FCA3121E
A2121F380FFFFEECFFC06C14F06C14FC4880381F0001003EEB007F4880ED1F8048140FA5
6C141F007C15006C143E6C5C390FC001F83903F007E0C6B51280D91FFCC7FC22337EA126
>I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0FC9038F3807C9038F7007E13FE
497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B>I<EA0780EA0FC0EA1FE0A4EA
0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0FF0B5FCA310337EB215>I<EB03C0
EB07E0EB0FF0A4EB07E0EB03C090C7FCAAEB03F013FFA313071303B3B01238127C00FE13
E0130714C0130F007C138038381F00EA1FFCEA07F0144384B217>I<EA03F012FFA31207
1203AF913803FFE0A36E1300EC00F8EC01E05D4A5A020FC7FC141C5C5C14F0EBF3F8EBF7
FC13FEEBFC7EEBF87F496C7E141F6E7E8114076E7E8114016E7E81486CEBFF80B500C313
F0A324347EB329>I<EA07E012FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>I<2703
F01FE013FF00FF90267FF80313C0903BF1E07C0F03E0903BF3803E1C01F02807F7003F38
7FD803FE1470496D486C7EA2495CA2495CB3486C496C487EB53BC7FFFE3FFFF0A33C217E
A041>I<3903F01FC000FFEB7FF09038F1E0FC9038F3807C3907F7007EEA03FE497FA25B
A25BB3486CEB7F80B538C7FFFCA326217EA02B>I<EB07F0EB3FFE9038FC1F803901F007
C03903C001E000078048486C7E48C7127CA248147E003E143E007E143FA300FE1580A800
7E1500A36C147EA26C147C6D13FC6C6C485A00075C3903F007E03900FC1F80D93FFEC7FC
EB07F021237EA126>I<3903F03F8000FFEBFFE09038F3C0F89038F7007ED807FE7F6C48
EB1F804914C049130F16E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D131F6DEB3F
80160001FF13FC9038F381F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA0
2B>I<903807F00390383FFC07EBFC0F3901F8038F3807E001000F14DF48486CB4FC497F
123F90C77E5AA25A5AA9127FA36C6C5B121F6D5B000F5B3907E003BF3903F0073F3800F8
1EEB3FF8EB0FE090C7FCAAED7F8091380FFFFCA326307DA029>I<3803E07C38FFE1FF90
38E38F809038E71FC0EA07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217F
A01E>I<EBFF06000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C
7EEA7FFC383FFFC014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E
15006C5B6C130E6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0
A21201A212031207381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E
1CEB1FF8EB07E0182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA3
5D12016D4813800000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I<B5EB
FFF0A3D80FF0EB3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D137001
7E1360137F6D5BA290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5A
A2146024217E9F29>I<B53A1FFF81FFF0A33C07F801FC003F8001F049EB1E0000030100
141C816C6C017C1318A26D017E1338000002FE1330A290267E01FF5B159F168090263F03
0F5BA216C0903A1F8607C180A202C613E390260FCC0390C7FCA2D907FC13F6ECF80116FE
6D486C5AA36D481378A36D48133034217F9F37>I<B53801FFF8A32603FE0013806C48EB
7C0000001478017E1370017F5B90383F81C090381F8380D90FC3C7FCEB07E614FE6D5A6D
5A6D7E80805B9038039F809038071FC09038060FE0EB0C0790381C03F0496C7E01707FEB
F000000180000FECFF8026FFFC0313FCA326207F9F29>I<3A7FFF807FF8A33A07F8001F
C00003EC0F800001EC070015066C6C5BA26D131C017E1318A26D5BA2EC8070011F1360EC
C0E0010F5BA2903807E180A214F3010390C7FC14FBEB01FEA26D5AA31478A21430A25CA2
14E05CA2495A1278D8FC03C8FCA21306130EEA701CEA7838EA1FF0EA0FC025307F9F29>
I<003FB512F0A2EB000F003C14E00038EB1FC00030EB3F800070137F1500006013FE495A
13035CC6485A495AA2495A495A49C7FC153013FE485A12035B48481370485A001F146049
13E0485A387F000348130F90B5FCA21C207E9F22>I<B712F8A22502809426>I<BC12F0A2
4C0280944D>I E
%EndDVIPSBitmapFont
/Fo 82[33 51[50 50 72 50 55 33 39 44 1[55 50 55 83 28
1[33 28 55 50 33 44 55 44 55 50 8[72 100 72 72 66 55
72 1[61 78 72 94 66 78 1[39 78 78 61 66 72 72 66 72 6[33
1[50 50 50 50 50 50 50 50 2[25 46[{TeXBase1Encoding ReEncodeFont}56
99.6264 /Times-Bold rf
%DVIPSBitmapFont: Fp cmsy9 9 13
/Fp 13 107 df<0060153000F815F86C1401007EEC03F06CEC07E06C6CEB0FC06C6CEB1F
806C6CEB3F006C6C137E6C6C5B6C6C485A90387E03F06D485A90381F8FC090380FDF806D
B4C7FC6D5A6D5AA2497E497E90380FDF8090381F8FC090383F07E090387E03F0496C7E48
486C7E4848137E48487F4848EB1F804848EB0FC048C7EA07E0007EEC03F048EC01F84814
0000601530252475A43C>2 D<EB1FC0EBFFF8487F000713FF4814804814C04814E0A248
14F0A2B612F8A96C14F0A26C14E0A26C14C06C14806C1400000113FC6C5BEB1FC01D1D7C
A126>15 D<023FB512FC49B612FE1307011F15FCD93FE0C8FC01FFC9FCEA01FCEA03F048
5A485A5B48CAFC5A123E5AA21278A212F8A25AA67EA21278A2127CA27E123F7E6C7E7F6C
7E6C7EEA01FC6CB4FCEB3FE06DB612FC010715FE1301D9003F14FC91C9FCAC001FB712FC
4816FEA26C16FC2F3E7AB03C>18 D<007FB512F8B7FC16C06C15F0C8EA0FF8ED01FEED00
7FEE1F80EE0FC0EE07E01603EE01F017F81600177CA2173CA2173EA2171EA6173EA2173C
A2177CA217F8160117F0EE03E01607EE0FC0EE1F80EE7F00ED01FEED0FF8007FB65AB712
C093C7FC6C14F8CBFCAC007FB712F0B812F8A26C16F02F3E7AB03C>I<171C177EEE01FE
EE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1FF0EC7FC0
4948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FCEA1FF0EA7FC048CAFCA2EA7FC0EA1FF0
EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF913800
7FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEEE007E171C1700AC007FB7
12FCB812FEA26C16FC2F3E7AB03C>I<013F16402601FFE015E04813F8487F4813FF4880
D83FC06D1301273E001FE014C048D907F8130300786D6C13070070D900FFEB0F8000F091
387FE07F486EB512006F5B03075B6F5B03005B0040ED1F8033127C9B3C>24
D<187018F0A2841878A2187C183C183E84A2727E727E85727E727E727E197F007FBA12C0
BB12F0A26C19C0CCEA7F0019FC4E5A4E5A4E5A614E5A4EC7FCA2183E183C187C1878A218
F860A2187044287CA64D>33 D<91383FFFF849B512FC1307011F14F8D93FE0C7FC01FFC8
FCEA01FCEA03F0485A485A5B48C9FC5A123E5AA21278A212F8A25AB712F816FCA216F800
F0C9FC7EA21278A2127CA27E123F7E6C7E7F6C7E6C7EEA01FC6CB4FCEB3FE06DB512F801
0714FC1301D9003F13F8262E7AA933>50 D<0060ED018000F0ED03C06C1507A200781680
007C150FA2003C1600003E5DA26C153EA26C153C6D147CA26C6C5CA200035D90B6FCA26C
5DA29038F000036C6C495AA201785C017C130FA2013C91C7FC013E5BA26D133EA26D133C
EC807CA201071378ECC0F8A2903803E1F0A201015B14F3A26DB45AA26E5AA36EC8FCA314
1E140C2A3680B32B>56 D<0060ED018000F0ED03C0B3AF6C1507A2007CED0F80A26CED1F
00003F5D6C6C147ED80FE0495AD807F8EB07F83A01FF807FE06C90B55A013F91C7FC010F
13FC010013C02A307CAD33>91 D<EC07E0143FECFE00EB03F8495A495A5C131F5CB3A513
3F91C7FC137E5BEA03F8EA7FE048C8FCEA7FE0EA03F8C67E137E7F80131FB3A580130F80
6D7E6D7EEB00FEEC3FE014071B4B7BB726>102 D<12FCEAFFC0EA07F0EA01FC6C7E137F
7F80131FB3A580130F6D7E6D7EEB01FC9038007FC0EC1FE0EC7FC0903801FC00EB03F049
5A495A131F5CB3A5133F91C7FC5B13FE485AEA07F0EAFFC000FCC8FC1B4B7BB726>I<12
6012F0B3B3B3B31260044B78B715>106 D E
%EndDVIPSBitmapFont
/Fq 82[28 51[42 42 1[42 46 23 42 28 1[46 46 46 69 18
2[18 46 46 23 46 1[42 1[46 8[55 78 1[60 51 3[55 65 5[23
1[65 3[60 55 55 7[46 46 46 46 46 1[46 46 1[46 1[23 1[23
44[{TeXBase1Encoding ReEncodeFont}41 83.022 /Helvetica
rf /Fr 134[50 1[72 50 55 28 50 33 2[55 55 83 22 50 22
22 55 55 28 55 55 50 55 55 7[66 1[94 3[66 3[78 72 83
2[50 2[78 1[66 72 1[66 1[101 17[28 1[28 44[{
TeXBase1Encoding ReEncodeFont}36 99.6264 /Helvetica rf
/Fs 133[75 83 4[50 83 58 1[91 91 91 133 42 2[42 91 91
1[83 91 83 91 83 13[100 108 4[124 3[42 4[108 68[{
TeXBase1Encoding ReEncodeFont}23 149.44 /Helvetica-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 335 108 a Fs(Scaling)41 b(Replica)g(Maintenance)i(In)e
(Intermittentl)n(y)800 274 y(Sync)o(hr)m(oniz)q(ed)i(Mobile)e
(Databases)434 618 y Fr(W)l(ai)29 b(Gen)f(Y)-14 b(ee)323
705 y Fq(College)24 b(of)f(Computing)371 792 y(Georgia)g(Institute)h
(of)512 879 y(T)-10 b(echnology)276 966 y(Atlanta,)25
b(GA)e(30332\2550280)204 1087 y Fr(w)o(aigen@cc.gatech.edu)1502
618 y(Michael)29 b(J)m(.)e(Donahoo)1631 705 y Fq(Ba)n(ylor)c(Univ)n
(ersity)1658 792 y(P)-15 b(.O)m(.)23 b(Bo)n(x)f(97356)1528
879 y(W)m(aco)m(,)h(TX)g(76798\2557356)1383 1000 y Fr(jeff)p
1522 1000 30 4 v 36 w(donahoo@ba)m(ylor)-5 b(.edu)2734
618 y(Edw)o(ard)29 b(Omiecinski)2678 705 y(Shamkant)g(B)n(.)f(Na)n(v)n
(athe)2760 792 y Fq(College)d(of)e(Computing)2809 879
y(Georgia)g(Institute)h(of)2950 966 y(T)-10 b(echnology)2714
1054 y(Atlanta,)24 b(GA)g(30332\2550280)2938 1174 y Fp(f)p
Fr(edw)o(ardo)l(,)2658 1274 y(sham)p Fp(g)p Fr(@cc.gatech.edu)-152
1575 y Fo(ABSTRA)-5 b(CT)-152 1695 y Fn(T)f(o)25 b(a)n(v)n(oid)g(the)f
(high)h(cost)g(of)g(con)n(tin)n(uous)g(connectivit)n(y)-6
b(,)24 b(a)h(class)h(of)-152 1782 y(mobile)c(applications)h(emplo)n(ys)
e(replicas)j(of)e(shared)g(data)h(that)e(are)-152 1869
y(p)r(erio)r(dically)g(up)r(dated.)31 b(Up)r(dates)19
b(to)g(these)g(replicas)h(are)g(t)n(ypically)-152 1956
y(p)r(erformed)28 b(on)h(a)g(clien)n(t-b)n(y-clien)n(t)e(basis{that)j
(is,)g(the)e(serv)n(er)g(in-)-152 2044 y(dividually)h(computes)g(and)g
(transmits)g(up)r(dates)g(to)h(eac)n(h)f(clien)n(t{)-152
2131 y(limiting)38 b(scalabilit)n(y)-6 b(.)69 b(By)37
b(basing)h(up)r(dates)f(on)g(replica)h Fm(gr)l(oups)-152
2218 y Fn(\(instead)f(of)h(clien)n(ts\),)i(ho)n(w)n(ev)n(er,)f(up)r
(date)d(generation)i(complex-)-152 2305 y(it)n(y)e(is)h(no)g(longer)g
(b)r(ound)e(b)n(y)h(clien)n(t)g(p)r(opulation)h(size.)68
b(Clien)n(ts)-152 2392 y(then)30 b(do)n(wnload)h(up)r(dates)e(of)i(p)r
(ertinen)n(t)f(groups.)48 b(Prop)r(er)31 b(group)-152
2480 y(design)k(reduces)f(redundancies)f(in)h(serv)n(er)g(pro)r
(cessing,)k(disk)33 b(us-)-152 2567 y(age)25 b(and)f(bandwidth)g
(usage,)h(and)f(dimininishes)g(the)f(tie)i(b)r(et)n(w)n(een)-152
2654 y(the)c(complexit)n(y)e(of)i(up)r(dating)g(replicas)h(and)e(the)g
(size)i(of)f(the)f(clien)n(t)-152 2741 y(p)r(opulation.)33
b(In)20 b(this)g(pap)r(er,)i(w)n(e)f(expand)e(on)h(previous)g(w)n(ork)h
(done)-152 2828 y(on)29 b(group)f(design,)i(include)e(a)g(detailed)h
(I/O)f(cost)h(mo)r(del)f(for)h(up-)-152 2915 y(date)c(generation,)h
(and)f(prop)r(ose)g(a)g(heuristic-based)g(greedy)g(algo-)-152
3003 y(rithm)e(for)i(group)f(computation.)33 b(Exp)r(erimen)n(tal)23
b(results)i(with)f(an)-152 3090 y(adapted)32 b(commercial)g
(replication)h(system)e(demonstrate)h(a)g(sig-)-152 3177
y(ni\014can)n(t)26 b(increase)g(in)g(o)n(v)n(erall)h(scalabilit)n(y)g
(o)n(v)n(er)e(the)h(clien)n(t-cen)n(tric)-152 3264 y(approac)n(h.)-152
3483 y Fo(Categories)f(and)g(Subject)i(Descriptors)-152
3604 y Fn(H.2.4)20 b([)p Fl(Information)k(Systems)p Fn(]:)31
b(Systems|)p Fm(Distribute)l(d)21 b(DBs)6 b Fn(;)-152
3691 y(H.3.2)34 b([)p Fl(Information)41 b(Systems)p Fn(]:)49
b(Information)33 b(Storage)h(And)-152 3778 y(Retriev)l(al|)p
Fm(File)27 b(Or)l(ganization)-152 3997 y Fo(General)e(T)-9
b(erms)-152 4117 y Fn(Algorithms,)26 b(Design,)h(Exp)r(erimen)n
(tation,)e(P)n(erformance)-152 4337 y Fo(K)n(eyw)o(ords)-152
4457 y Fn(In)n(termitten)n(t)e(sync)n(hronization,)i(distributed)f
(databases,)i(mobile)-152 4544 y(databases)-152 5396
y Fk(.)2068 2704 y
 currentpoint currentpoint translate .75 .75 scale neg exch neg exch
translate
 2068 2704 a @beginspecial 0 @llx 0
@lly 310 @urx 194 @ury 3100 @rwi @setspecial
%%BeginDocument: arch.eps
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 194 moveto 0 0 lineto 310 0 lineto 310 194 lineto closepath clip newpath
% Fill background color
0 0 moveto 310 0 lineto 310 194 lineto 0 194 lineto
closepath 1.00 1.00 1.00 setrgbcolor fill

-16.0 250.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
% Polyline
7.500 slw
n 4005 1125 m 3900 1125 3900 1545 105 arcto 4 {pop} repeat
  3900 1650 4545 1650 105 arcto 4 {pop} repeat
  4650 1650 4650 1230 105 arcto 4 {pop} repeat
  4650 1125 4005 1125 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
/Times-Roman ff 180.00 scf sf
4050 1425 m
gs 1 -1 sc (Client) col0 sh gr
% Polyline
n 3255 3150 m 3150 3150 3150 3570 105 arcto 4 {pop} repeat
  3150 3675 3795 3675 105 arcto 4 {pop} repeat
  3900 3675 3900 3255 105 arcto 4 {pop} repeat
  3900 3150 3255 3150 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
/Times-Roman ff 180.00 scf sf
3300 3450 m
gs 1 -1 sc (Client) col0 sh gr
% Polyline
n 1455 3150 m 1350 3150 1350 3570 105 arcto 4 {pop} repeat
  1350 3675 1995 3675 105 arcto 4 {pop} repeat
  2100 3675 2100 3255 105 arcto 4 {pop} repeat
  2100 3150 1455 3150 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
/Times-Roman ff 180.00 scf sf
1500 3450 m
gs 1 -1 sc (Client) col0 sh gr
% Arc
n 4950.0 1312.5 637.5 118.1 61.9 arcn
gs col0 s gr

% Ellipse
n 4950 1275 300 75 0 360 DrawEllipse gs col0 s gr

% Polyline
n 4650 1350 m
 4650 1875 l gs col0 s gr 
% Polyline
n 5250 1275 m
 5250 1875 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
4725 1575 m
gs 1 -1 sc (Local) col0 sh gr
/Times-Roman ff 180.00 scf sf
4800 1800 m
gs 1 -1 sc (DB) col0 sh gr
% Arc
n 2400.0 3337.5 637.5 118.1 61.9 arcn
gs col0 s gr

% Ellipse
n 2400 3300 300 75 0 360 DrawEllipse gs col0 s gr

% Polyline
n 2100 3375 m
 2100 3900 l gs col0 s gr 
% Polyline
n 2700 3300 m
 2700 3900 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
2175 3600 m
gs 1 -1 sc (Local) col0 sh gr
/Times-Roman ff 180.00 scf sf
2250 3825 m
gs 1 -1 sc (DB) col0 sh gr
% Arc
n 4200.0 3337.5 637.5 118.1 61.9 arcn
gs col0 s gr

% Ellipse
n 4200 3300 300 75 0 360 DrawEllipse gs col0 s gr

% Polyline
n 3900 3375 m
 3900 3900 l gs col0 s gr 
% Polyline
n 4500 3300 m
 4500 3900 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
3975 3600 m
gs 1 -1 sc (Local) col0 sh gr
/Times-Roman ff 180.00 scf sf
4050 3825 m
gs 1 -1 sc (DB) col0 sh gr
% Arc
gs  clippath
2094 2658 m 2130 2609 l 2008 2518 l 2087 2615 l 1972 2567 l cp
eoclip
n 1687.5 3075.0 610.5 -132.5 -47.5 arc
gs col0 s gr
 gr

% arrowhead
n 1972 2567 m 2087 2615 l 2008 2518 l  col0 s
% Arc
n 3740.0 1335.0 1365.0 112.6 67.4 arcn
gs col0 s gr

% Ellipse
n 3740 1755 525 105 0 360 DrawEllipse gs col0 s gr

 [15 45] 45 sd
1 slc
% Ellipse
n 3626 2068 183 183 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
 [15 45] 45 sd
% Ellipse
n 3770 2252 183 183 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
 [15 45] 45 sd
% Ellipse
n 3879 2070 183 183 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Polyline
0 slc
n 2205 1650 m 2100 1650 2100 2220 105 arcto 4 {pop} repeat
  2100 2325 3045 2325 105 arcto 4 {pop} repeat
  3150 2325 3150 1755 105 arcto 4 {pop} repeat
  3150 1650 2205 1650 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
n 1725 3150 m
 2175 2700 l gs col0 s gr 
% Polyline
n 2250 2625 m
 2550 2325 l gs col0 s gr 
% Polyline
n 2700 2325 m
 3000 2625 l gs col0 s gr 
% Polyline
n 3075 2700 m
 3525 3150 l gs col0 s gr 
% Polyline
n 2175 2625 m
 2325 2625 l gs col0 s gr 
% Polyline
n 2100 2700 m
 2250 2700 l gs col0 s gr 
% Polyline
n 2925 2625 m
 3075 2625 l gs col0 s gr 
% Polyline
n 3000 2700 m
 3150 2700 l gs col0 s gr 
% Polyline
n 3900 1350 m
 3450 1425 l gs col0 s gr 
% Polyline
n 3450 1350 m
 3450 1500 l gs col0 s gr 
% Polyline
n 3375 1350 m
 3375 1500 l gs col0 s gr 
% Polyline
n 3375 1425 m
 3075 1650 l gs col0 s gr 
% Polyline
n 3215 1760 m
 3215 2595 l gs col0 s gr 
% Polyline
n 4265 1755 m
 4265 2595 l gs col0 s gr 
% Polyline
 [60] 0 sd
gs  clippath
4283 1518 m 4232 1486 l 4152 1615 l 4241 1529 l 4203 1646 l cp
eoclip
n 3935 2025 m
 4250 1515 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 4203 1646 m 4241 1529 l 4152 1615 l 4203 1646 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [60] 0 sd
gs  clippath
1899 3285 m 1936 3332 l 2056 3240 l 1943 3290 l 2019 3192 l cp
eoclip
n 3550 2050 m
 1930 3300 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 2019 3192 m 1943 3290 l 2056 3240 l 2019 3192 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [60] 0 sd
gs  clippath
3547 3288 m 3606 3300 l 3636 3152 l 3583 3264 l 3577 3140 l cp
eoclip
n 3775 2325 m
 3580 3280 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 3577 3140 m 3583 3264 l 3636 3152 l 3577 3140 l  cp gs 0.00 setgray ef gr  col0 s
/Times-Roman ff 180.00 scf sf
2400 1950 m
gs 1 -1 sc (Update) col0 sh gr
/Times-Roman ff 180.00 scf sf
2475 2175 m
gs 1 -1 sc (Server) col0 sh gr
/Times-Roman ff 180.00 scf sf
450 2925 m
gs 1 -1 sc (connectivity) col0 sh gr
/Times-Roman ff 180.00 scf sf
600 2700 m
gs 1 -1 sc (periodic) col0 sh gr
/Times-Roman ff 180.00 scf sf
3395 2605 m
gs 1 -1 sc (Global DB) col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 2068 2704 a
 currentpoint currentpoint translate 1 .75 div 1 .75 div scale neg
exch neg exch translate
 2068 2704 a 2040 2874 a Fl(Figure)k(1:)38
b(The)29 b(up)r(date)h(serv)n(er)e(main)n(tains)i(the)f(primary)2040
2961 y(cop)n(y)39 b(and)g(distributes)h(up)r(dates)g(on)f(demand)f(to)i
(in)n(ter-)2040 3049 y(mitten)n(tly)30 b(connected)h(clien)n(ts)f(that)
g(main)n(tain)h(replicas.)2040 3352 y Fo(1.)99 b(INTR)m(ODUCTION)2115
3460 y Fn(In)n(termitten)n(tly)18 b(Sync)n(hronized)h(Database)i
(\(ISDB\))f(systems)f(al-)2040 3547 y(lo)n(w)28 b(mobile)g(data)f
(sharing)h(applications)h(to)f(reduce)f(cost)h(b)n(y)e(for-)2040
3634 y(going)20 b(con)n(tin)n(uous)f(connectivit)n(y)-6
b(.)32 b(T)-6 b(o)19 b(allo)n(w)i(sharing,)h(a)e(dedicated)2040
3721 y Fm(up)l(date)26 b(server)32 b Fn(main)n(tains)22
b(the)g(primary)f(cop)n(y)h(\(global)i(database\))2040
3808 y(of)36 b(all)g(data)f(held)g(b)n(y)f(mobile)h(clien)n(ts)g(while)
h(eac)n(h)f(clien)n(t)h(main-)2040 3896 y(tains)30 b(its)f(o)n(wn)g
(replica)h(of)g(some)f(subset)g(of)h(the)e(global)j(database)2040
3983 y(sc)n(hema.)46 b(The)29 b(up)r(date)g(serv)n(er)h(main)n(tains)f
(the)g(primary)g(cop)n(y)g(of)2040 4070 y(the)34 b(global)i(database)f
(b)n(y)f(receiving)h(up)r(dates)f(from)h(the)f(clien)n(ts)2040
4157 y(and)g(distributing)f(them)g(on)h(demand)e(to)i(the)f(clien)n(ts)
i(based)f(on)2040 4244 y(kno)n(wledge)26 b(of)g(their)f(subscriptions.)
35 b(\(See)25 b(Figure)h(1.\))34 b(T)n(ypically)-6 b(,)2040
4332 y(the)24 b(serv)n(er)g(generates)h(up)r(date)e(\014les)h(for)h
(clien)n(ts)g(on)f(an)g(individual)2040 4419 y(basis:)54
b(the)35 b(serv)n(er)g(scans)h(through)e(a)i(set)f(of)h(up)r(dates,)h
(and)e(for)2040 4506 y(eac)n(h)30 b(clien)n(t)g(and)g(up)r(date,)h
(decides)f(if)h(the)e(clien)n(t)h(should)g(receiv)n(e)2040
4593 y(the)h(up)r(date.)49 b(In)30 b(this)h(w)n(a)n(y)-6
b(,)32 b(eac)n(h)f(clien)n(t)g(receiv)n(es)h(a)f(customized)2040
4680 y(up)r(date)18 b(\014le)g(con)n(taining)h(only)f(the)g(relev)l(an)
n(t)g(data.)33 b(This)19 b(tec)n(hnique)2040 4767 y(is)29
b(simple)g(and)f(straigh)n(tforw)n(ard)i(but)e(requires)h(the)f(serv)n
(er)h(to)g(do)2040 4855 y(w)n(ork)d(in)g(direct)g(prop)r(ortion)h(to)f
(the)g(n)n(um)n(b)r(er)e(of)i(clien)n(ts,)h(limiting)2040
4942 y(the)22 b(scalabilit)n(y)h(of)g(the)f(system)f(and)g(resulting)i
(in)f(greater)h(time)e(to)2040 5029 y(main)n(tain)k(lo)r(cal)j
(replicas.)2115 5116 y(In)18 b(this)i(pap)r(er,)h(w)n(e)f(build)f(on)g
(previous)g(w)n(ork)h(that)f(prop)r(osed)h(or-)2040 5203
y(ganizing)f(up)r(dates)f(in)n(to)g Fm(gr)l(oups)25 b
Fn(shared)18 b(b)n(y)f(clien)n(ts)i([5].)32 b(Using)18
b(this)2040 5290 y(approac)n(h,)31 b(the)e(serv)n(er)h(manages)f(up)r
(date)g(pro)r(cessing)i(for)g(a)e(lim-)2040 5378 y(ited)h(and)f(con)n
(trollable)j(n)n(um)n(b)r(er)c(of)i(groups,)i(irresp)r(ectiv)n(e)e(of)h
(the)p eop
%%Page: 2 2
2 1 bop -152 -69 a Fn(n)n(um)n(b)r(er)26 b(of)i(clien)n(ts.)41
b(Instead)27 b(of)i(receiving)f(up)r(dates)f(customized)-152
19 y(for)36 b(its)g(sp)r(eci\014c)f(needs,)i(eac)n(h)f(clien)n(t)f
(accesses)i(the)d(up)r(dates)h(for)-152 106 y(the)c(groups)g(con)n
(taining)g(data)h(it)f(needs.)49 b(The)31 b(group-based)g(ap-)-152
193 y(proac)n(h)d(results)g(in)g(b)r(etter)f(serv)n(er)h(scalabilit)n
(y)h(b)r(ecause)f(the)g(w)n(ork)-152 280 y(of)e(the)e(serv)n(er)h(is)h
(decoupled)e(from)h(the)f(actual)i(n)n(um)n(b)r(er)d(of)i(clien)n(ts)
-152 367 y(main)n(tained)32 b([5,)k(11].)56 b(F)-6 b(or)33
b(example,)h(a)f(salesp)r(erson)i(ma)n(y)c(en)n(ter)-152
454 y(her)24 b(o\016ce)h(in)f(the)g(morning)g(b)r(efore)h(visiting)g
(customers)f(and)g(load)-152 542 y(sales)j(data)e(from)f(the)h(serv)n
(er)g(on)n(to)g(her)g(laptop.)34 b(Throughout)25 b(the)-152
629 y(da)n(y)-6 b(,)23 b(the)f(salesp)r(erson)i(up)r(dates)f(her)f(lo)r
(cal)i(cop)n(y)e(of)h(the)g(sales)h(data)-152 716 y(regardless)j(of)f
(the)f(connectivit)n(y)f(with)i(the)e(serv)n(er.)35 b(When)24
b(condi-)-152 803 y(tions)d(p)r(ermit)e(it,)j(a)e(reliable)i
(connection)e(can)h(b)r(e)f(established)h(with)-152 890
y(the)f(serv)n(er)h(to)g(sync)n(hronize)f(lo)r(cal)i(data)f(using)g(up)
r(dates)f(generated)-152 977 y(for)37 b(the)e(prop)r(er)h(groups.)65
b(Connectivit)n(y)35 b(options)h(include)g(con-)-152
1065 y(v)n(en)n(tional)27 b(wireless)h(mo)r(dems,)e(high)g(sp)r(eed)h
(wireless)i(LANs)c(\(e.g.,)-152 1152 y(Rico)r(c)n(het\),)i(or)f(do)r(c)
n(king)g(the)f(mobile)h(device)g(wired)g(base)h(station.)-152
1239 y(F)-6 b(urthermore,)28 b(her)g(co)n(w)n(ork)n(ers)h(ma)n(y)e
(concurren)n(tly)h(up)r(date)g(their)-152 1326 y(replicated)f(data.)-77
1413 y(In)h(short,)j(w)n(e)e(dev)n(elop)g(a)g(detailed)h(cost)g(mo)r
(del)e(for)i(group)f(de-)-152 1500 y(sign)g(and)e(o\013er)h(a)g(remedy)
e(to)i(a)g(scalabilit)n(y)h(problem)e(natural)h(to)-152
1588 y(ISDBs)i(that)g(share)h(data.)48 b(W)-6 b(e)29
b(then)h(presen)n(t)g(extensiv)n(e)f(exp)r(eri-)-152
1675 y(men)n(tal)e(results)i(demonstrating)e(the)g(impro)n(v)n(ed)g
(e\016ciency)g(using)-152 1762 y(our)c(design)g(tec)n(hniques.)33
b(W)-6 b(e)22 b(b)r(egin)h(in)f(Section)h(2)g(b)n(y)e(placing)j(our)
-152 1849 y(w)n(ork)32 b(in)g(the)f(con)n(text)g(of)i(related)f(w)n
(ork.)52 b(W)-6 b(e)32 b(de\014ne)f(the)g(arc)n(hi-)-152
1936 y(tecture)f(and)g(an)g(I/O-based)f(cost)i(mo)r(del)e(for)i(ev)l
(aluating)g(a)f(sp)r(e-)-152 2023 y(ci\014c)c(data)g(grouping)h(in)e
(Section)h(3.)35 b(In)25 b(Section)h(4,)h(w)n(e)f(prop)r(ose)g(a)-152
2111 y(heuristic)h(set)g(of)g(op)r(erators)h(for)f(mo)r(difying)f(data)
h(groupings)g(and)-152 2198 y(a)j(greedy)f(algorithm)g(to)h(apply)e
(these)i(op)r(erators.)46 b(W)-6 b(e)29 b(also)h(out-)-152
2285 y(line)e(ho)n(w)g(to)g(handle)f(c)n(hanges)h(in)f(the)g(system)g
(con\014guration.)40 b(In)-152 2372 y(Section)33 b(5,)i(w)n(e)e
(compare)f(our)h(approac)n(h)g(to)f(in)n(tuitiv)n(e)g(grouping)-152
2459 y(alternativ)n(es,)f(and)e(demonstrate)f(that)g(our)h(grouping)g
(algorithm)-152 2547 y(pro)n(vides)23 b(signi\014can)n(tly)g(greater)g
(scalabilit)n(y)h(in)f(clien)n(t)f(p)r(opulation)-152
2634 y(size.)51 b(Finally)-6 b(,)33 b(w)n(e)e(summarize)f(our)g(observ)
l(ations)i(and)e(describ)r(e)-152 2721 y(future)25 b(w)n(ork)f(in)h
(Section)f(6.)35 b Fl(Note)24 b Fn(that)h(for)g(the)f(sak)n(e)h(of)g
(brevit)n(y)-6 b(,)-152 2808 y(w)n(e)26 b(do)f(not)f(include)h(the)g
(pro)r(ofs)h(of)g(theorems)e(in)h(this)g(pap)r(er,)g(and)-152
2895 y(presen)n(t)g(only)g(a)h(subset)f(of)h(our)f(exp)r(erimen)n(tal)f
(results.)35 b(F)-6 b(or)25 b(more)-152 2982 y(detail,)i(the)e(reader)h
(ma)n(y)f(refer)h(to)g([12].)-152 3178 y Fo(2.)100 b(RELA)-9
b(TED)26 b(W)o(ORK)-77 3285 y Fn(An)k(ISDB)h(is)g(an)h(instance)f(of)h
(a)f(distributed)g(computing)f(sys-)-152 3373 y(tem.)53
b(Multiple)33 b(databases)g(indep)r(enden)n(tly)e(op)r(erate)i(on)f
(shared)-152 3460 y(data.)66 b(The)36 b(assumptions)g(that)f(clien)n
(ts)i(are)f(mobile)g(and)g(com-)-152 3547 y(monly)27
b(su\013er)h(long)h(p)r(erio)r(ds)g(of)f(disconnection)h(from)f(the)f
(serv)n(er,)-152 3634 y(ho)n(w)n(ev)n(er,)e(mak)n(e)d(traditional)j
(concurrency)e(con)n(trol)h(proto)r(cols)h(in-)-152 3721
y(applicable.)34 b(T)-6 b(raditional)20 b(distributed)e(database)h
(systems)f(use)h(the)-152 3808 y(t)n(w)n(o-phase-commit)27
b(proto)r(col)j(to)f(help)g(ensure)f(the)h(A)n(CID)e(prop-)-152
3896 y(erties)34 b(of)g(transactions)h([7].)58 b(This)34
b(proto)r(col)g(is)g(comm)n(unication)-152 3983 y(in)n(tensiv)n(e)g
(and)g(is)g(therefore)h(impractical)f(when)g(clien)n(ts)h(can)f(b)r(e)
-152 4070 y(unreac)n(hable)28 b(for)g(long)f(p)r(erio)r(ds)h(of)g
(time{e.g.,)h(if)f(a)g(mobile)e(clien)n(t)-152 4157 y(p)r(o)n(w)n(ers)h
(do)n(wn)e(in)h(order)g(to)g(sa)n(v)n(e)g(energy)-6 b(.)-77
4244 y(In)35 b(resp)r(onse,)40 b(researc)n(hers)d(ha)n(v)n(e)f(prop)r
(osed)g(replicating)i(data)-152 4332 y(among)i(m)n(ultiple)e(clien)n
(ts)i(and)f(allo)n(wing)j(them)c(to)i(op)r(erate)g(on)-152
4419 y(the)25 b(replicas)h(indep)r(enden)n(tly)d([1].)36
b(This)25 b(allo)n(ws)i(quic)n(k)n(er)d(resp)r(onse)-152
4506 y(time,)31 b(reduces)f(the)g(p)r(ossibilit)n(y)h(of)g(deadlo)r(c)n
(k,)h(reduces)e(the)g(need)-152 4593 y(for)j(energy-consuming)e(comm)n
(unication)g(with)h(the)f(serv)n(er,)j(and)-152 4680
y(allo)n(ws)22 b(mobilit)n(y)d(resistan)n(t)i(to)f(net)n(w)n(ork)g
(outages,)i(with)f(the)e(do)n(wn-)-152 4767 y(side)26
b(of)h(relaxing)f(the)g(A)n(CID)e(prop)r(erties)j([3].)-77
4855 y(T)-6 b(o)33 b(aid)g(suc)n(h)g(functionalit)n(y)-6
b(,)35 b(the)d(arc)n(hitecture)h(m)n(ust)f(include)-152
4942 y(a)25 b(dedicated)f(cen)n(tralized)h(serv)n(er)g(that)f(collects)
h(up)r(dates,)g(and)f(re-)-152 5029 y(solv)n(es)39 b(con\015icts)f(as)h
(describ)r(ed)e(in)h([2].)72 b(This)39 b(serv)n(er)e(increases)-152
5116 y(the)27 b(a)n(v)l(ailabilit)n(y)i(and)e(reliabilit)n(y)h(of)g
(shared)g(data,)g(but)f(ma)n(y)f(suf-)-152 5203 y(fer)31
b(p)r(erformance)e(problems)h(b)r(ecause)g(the)f(amoun)n(t)g(of)h(w)n
(ork)g(the)-152 5290 y(serv)n(er)c(m)n(ust)e(do)i(increases)h(with)f
(the)f(n)n(um)n(b)r(er)f(of)i(clien)n(ts)h(serv)n(ed.)-77
5378 y(The)38 b(arc)n(hitecture)f(and)g(goal)i(of)f(the)f(COD)n(A)f(in)
n(termitten)n(tly)2040 -69 y(connected)k(\014le)g(system)f(is)i
(similar)g(to)f(those)g(of)h(ISDBs.)77 b(Re-)2040 19
y(searc)n(hers)31 b(of)g(COD)n(A)e(predicted)g(\(but)g(did)g(not)h(exp)
r(erience\))g(the)2040 106 y(p)r(ossibilit)n(y)24 b(of)g(a)f
Fm(r)l(einte)l(gr)l(ation)28 b(storm)p Fn(,)d(whic)n(h)e(o)r(ccurs)g
(when)g(m)n(ul-)2040 193 y(tiple)38 b(clien)n(ts)h(sim)n(ultaneously)e
(try)g(to)h(sync)n(hronize)g(their)g(lo)r(cal)2040 280
y(cac)n(hes)e(with)f(the)g(serv)n(er)g([9].)65 b(This)35
b(results)h(in)f(unmanageably)2040 367 y(long)e(rein)n(tegration)h
(times)d(for)j(eac)n(h)e(clien)n(t.)55 b(A)32 b(similar)h(pro)t(ject)
2040 454 y(called)27 b(DBMate)g(supp)r(orts)f(in)n(termitten)n(tly)f
(connected)h(database)2040 542 y(systems.)32 b(Exp)r(erimen)n(ts)17
b(with)i(DBMate)g(sho)n(w)g(that)g(serv)n(er)f(design)2040
629 y(can)28 b(impro)n(v)n(e)f(sync)n(hronization)i(p)r(erformance)f
([8].)43 b(The)28 b(w)n(ork)h(in)2040 716 y(this)d(pap)r(er)g
(generalizes)h(these)f(results.)2115 803 y(Group)35 b(design)i(is)f
(similar)g(to)g(materialized)g(view)h(design)f(for)2040
890 y(large)31 b(database)g(systems.)46 b(Both)30 b(try)f(to)h
(reorganize)i(monolithic)2040 977 y(sets)e(of)g(data)f(in)g(order)g(to)
g(sp)r(eed)g(up)g(resp)r(onse)g(time)g(for)h(clien)n(ts.)2040
1065 y(Ho)n(w)n(ev)n(er,)42 b(view)c(design)h(has)g(sligh)n(tly)g
(di\013eren)n(t)e(goals)j(and)e(as-)2040 1152 y(sumptions.)46
b(The)31 b(utilit)n(y)e(of)i(view)f(design)h(is)f(measured)f(b)n(y)g
(ho)n(w)2040 1239 y(closely)j(the)f(resultan)n(t)g(views)h(co)n(v)n(er)
f(the)g(exp)r(ected)g(queries;)j(the)2040 1326 y(main)c(cost)i(is)f
(the)g(disk)f(space)i(consumed)e(in)h(storing)g(the)g(views)2040
1413 y([4].)k(In)24 b(group)h(design)h(for)f(ISDBs,)g(the)g(utilit)n(y)
f(of)i(groups)f(is)g(mea-)2040 1500 y(sured)34 b(b)n(y)g(ho)n(w)h(quic)
n(kly)f(they)f(are)j(generated,)h(and)d(the)h(cost)g(is)2040
1588 y(roughly)d(ho)n(w)h(m)n(uc)n(h)e(extra)h(data)h(m)n(ust)e(b)r(e)h
(transmitted)f(to)i(the)2040 1675 y(clien)n(ts.)64 b(F)-6
b(urthermore,)36 b(since)g(views)g(are)f(assumed)g(to)g(con)n(tain)2040
1762 y(subsets)26 b(of)g(relational)h(data)f(and)f(groups)g(con)n(tain)
h(up)r(dates,)f(they)2040 1849 y(can)35 b(b)r(e)g(manipulated)g(in)g
(di\013eren)n(t)f(w)n(a)n(ys.)64 b(F)-6 b(or)35 b(these)g(reasons,)2040
1936 y(algorithms)25 b(for)f(view)g(design)h(are)f(inapplicable)h(to)f
(group)g(design.)2040 2131 y Fo(3.)99 b(MODEL)2115 2239
y Fn(Standard)22 b(ISDB)h(arc)n(hitecture)g(includes)h(the)e(database)i
(serv)n(er,)2040 2327 y(up)r(date)17 b(serv)n(er,)i(\014le)e(serv)n
(er,)i(net)n(w)n(ork,)g(and)e(clien)n(ts.)32 b(The)18
b(database)2040 2414 y(serv)n(er)32 b(stores)h(the)f(global)h
(database.)54 b(The)32 b(up)r(date)g(serv)n(er)g(gen-)2040
2501 y(erates)c(sets)f(of)h(up)r(dates)f(for)h(the)e(replicas)j(stored)
e(on)g(the)g(clien)n(ts.)2040 2588 y(These)c(up)r(dates)f(are)h(made)e
(a)n(v)l(ailable)j(to)e(clien)n(ts)h(through)f(a)g(set)h(of)2040
2675 y(\014le)j(serv)n(ers.)37 b(Clien)n(ts)27 b(in)n(termitten)n(tly)e
(connect)h(to)g(the)g(\014le)h(serv)n(er)2040 2762 y(via)34
b(a)g(net)n(w)n(ork.)58 b(The)34 b(clien)n(t)f(is)i(comp)r(osed)e(of)h
(a)g(clien)n(t)g(up)r(date)2040 2850 y(agen)n(t,)f(and)e(a)g(lo)r(cal)h
(DBMS.)g(When)e(the)g(clien)n(t)i(do)n(wnloads)g(up-)2040
2937 y(dates,)h(the)d(clien)n(t)i(up)r(date)e(agen)n(t)h(pro)r(cesses)h
(them)e(b)n(y)g(applying)2040 3024 y(them)k(to)h(the)g(replicas)i(con)n
(tained)e(on)g(the)g(lo)r(cal)i(DBMS.)e(Data)2040 3111
y(\015o)n(w)25 b(from)f(clien)n(t)h(to)g(serv)n(er)g(is)g(not)f
(discussed)h(in)g(this)f(pap)r(er,)h(but)2040 3198 y(the)g(in)n
(terested)h(reader)g(ma)n(y)e(refer)j(to)f([10])h(for)f(more)g
(details.)2115 3285 y(The)k(global)i(database)f(is)g(divided)f(in)n(to)
h Fm(public)l(ations)37 b Fn(or)31 b Fm(fr)l(ag-)2040
3373 y(ments)p Fn(,)22 b(whic)n(h)d(are)h(horizon)n(tal)g(partitions)g
(of)f(the)g(database.)33 b(Eac)n(h)2040 3460 y(clien)n(t)27
b Fm(subscrib)l(es)36 b Fn(to)27 b(a)g(subset)g(of)h(fragmen)n(ts)f
(based)g(on)g(its)g(data)2040 3547 y(needs.)40 b(The)28
b(serv)n(er)g(main)n(tains)f(m)n(ultiple,)h(p)r(ossibly)g(o)n(v)n
(erlapping)2040 3634 y Fm(datagr)l(oups)35 b Fn(of)26
b(fragmen)n(ts,)g(designed)g(based)g(on)g(clien)n(t)g(subscrip-)2040
3721 y(tions.)68 b(The)36 b(DBMS)h(records)g(up)r(dates)f(from)h(clien)
n(ts)g(in)f(a)h(log,)2040 3808 y(whic)n(h)g(is)g(mo)r(di\014ed)f(so)h
(that)f(it)h(also)h(stores)g(the)e Fm(sc)l(op)l(e)43
b Fn([3]{the)2040 3896 y(fragmen)n(t\(s\))26 b(whic)n(h)f(the)h(up)r
(date)f(a\013ects{of)i(eac)n(h)f(up)r(date.)2115 3983
y(An)g Fm(up)l(date)k(session)j Fn(is)27 b(de\014ned)f(as)h(the)g(pro)r
(cess)g(during)g(whic)n(h)2040 4070 y(the)38 b(up)r(date)f(serv)n(er)h
(scans)g(the)g(log)h(for)f(outstanding)g(up)r(dates,)2040
4157 y(and)24 b(for)g(eac)n(h)g(datagroup,)h(generates)g(an)f(up)r
(date)f(\014le)h(\(called)h(the)2040 4244 y Fm(up)l(date)37
b(lo)l(g)7 b Fn(\))34 b(con)n(taining)h(the)f(up)r(dates)g(that)g(are)h
(in)g(that)f(data-)2040 4332 y(group's)g(scop)r(e.)58
b(The)34 b(resultan)n(t)f(up)r(date)g(logs)i(are)f(then)e(placed)2040
4419 y(on)27 b(a)g(\014le)g(serv)n(er)f(for)i(use)f(b)n(y)f(the)g
(clien)n(ts.)38 b(The)27 b(frequency)f(of)i(up-)2040
4506 y(date)23 b(sessions)h(is)f(application)g(dep)r(enden)n(t)e(and)h
(con)n(trolled)i(b)n(y)d(the)2040 4593 y(system)h(administrator.)34
b(A)22 b(clien)n(t)i(do)n(wnloads)g(the)e(up)r(date)g(log\(s\))2040
4680 y(that)32 b(corresp)r(ond)g(to)h(its)f(lo)r(cal)i(subscription.)54
b(The)32 b(clien)n(t's)h(up-)2040 4767 y(date)f(serv)n(er)g(then)f(pro)
r(cesses)j(and)d(applies)i(the)f(con)n(ten)n(ts)f(of)i(the)2040
4855 y(up)r(date)23 b(log\(s\))h(to)g(its)g(lo)r(cal)h(fragmen)n(t)e
(replicas.)35 b(In)23 b(the)g(basic)h(ap-)2040 4942 y(proac)n(h)c(to)g
(up)r(date)f(pro)r(cessing)i(practiced)f(b)n(y)f(industry)-6
b(,)19 b(whic)n(h)h(w)n(e)2040 5029 y(call)33 b Fm(client-c)l(entric)p
Fn(,)i(one)c(datagroup)h(is)g(de\014ned)e(for)j(eac)n(h)e(clien)n(t)
2040 5116 y(to)38 b(exactly)g(matc)n(h)f(its)h(lo)r(cal)h
(subscription.)72 b(In)37 b(the)g(prop)r(osed)2040 5203
y Fm(data-c)l(entric)31 b Fn(approac)n(h)25 b([5],)h(datagroups)f(are)g
(created)f(according)2040 5290 y(to)35 b(ho)n(w)h(data)f(are)h(shared)f
(and)g(the)f(n)n(um)n(b)r(er)f(of)j(datagroups)g(is)2040
5378 y(generally)27 b(indep)r(enden)n(t)d(of)i(the)g(n)n(um)n(b)r(er)d
(of)k(clien)n(ts.)p eop
%%Page: 3 3
3 2 bop -77 -69 a Fn(W)-6 b(e)21 b(consider)h(the)f(follo)n(wing)j(t)n
(w)n(o)e(steps)f(critical)i(in)f(sync)n(hroniz-)-152
19 y(ing)i(a)g(clien)n(t:)34 b(generating)25 b(up)r(date)e(\014les)h
(at)g(the)f(serv)n(er)h(and)f(trans-)-152 106 y(mitting)d(them)e(to)i
(the)g(clien)n(ts.)33 b(W)-6 b(e)19 b(do)h(not)g(emphasize)f(clien)n
(t-side)-152 193 y(pro)r(cessing)28 b(b)r(ecause)f(the)f(a)n(v)l
(ailabilit)n(y)h(of)g(p)r(o)n(w)n(erful)h(mobile)e(com-)-152
280 y(puting)34 b(platforms)g(\(e.g.,)j(P)n(en)n(tium-class)c
(laptops\))h(means)f(that)-152 367 y(clien)n(t-side)h(pro)r(cessing)i
(is)e(not)g(a)g(p)r(erformance)g(b)r(ottlenec)n(k,)i(es-)-152
454 y(p)r(ecially)e(when)f(the)g(clien)n(t)g(is)h(able)g(to)f
(\\install")i(up)r(dates)e(while)-152 542 y(b)r(eing)26
b(disconnected.)-77 629 y(These)37 b(t)n(w)n(o)g(critical)h(steps)f
(are)g(tigh)n(tly)g(coupled.)67 b(If)36 b(an)h(up-)-152
716 y(date)20 b(serv)n(er)f(can)h(generate)g(up)r(date)f(logs)i(more)d
(quic)n(kly)-6 b(,)20 b(then)f(they)-152 803 y(are)32
b(a)n(v)l(ailable)g(for)h(do)n(wnload)f(so)r(oner,)i(and)d(if)h(up)r
(date)e(logs)j(tak)n(e)-152 890 y(more)d(time)f(to)i(generate,)h(a)f
(clien)n(t)f(m)n(ust)f(w)n(ait)i(longer)g(to)f(do)n(wn-)-152
977 y(load)d(them.)34 b(It)26 b(is)g(therefore)h(reasonable)g(to)g
(increase)g(the)e(cost)i(of)-152 1065 y(one)f(of)h(these)e(steps)h(if)h
(the)e(decrease)h(in)g(the)f(other)h(is)g(greater.)-152
1152 y Fl(Problem)45 b(Statemen)n(t:)68 b Fn(W)-6 b(e)38
b(are)g(giv)n(en)g(a)h(global)h(database,)-152 1239 y(divided)26
b(in)n(to)h(a)g(set)h(of)f(fragmen)n(ts,)h Fj(F)34 b
Fn(=)23 b Fp(f)p Fj(F)1183 1247 y Fi(1)1218 1239 y Fj(;)13
b(:::;)h(F)1399 1247 y Fh(T)1448 1239 y Fp(g)p Fn(.)38
b(The)27 b(pro-)-152 1326 y(p)r(ortion)32 b(of)f(up)r(dates)g(applied)g
(to)g Fj(F)933 1334 y Fh(i)990 1326 y Fn(during)f(an)h(up)r(date)f
(session)-152 1413 y(is)d(estimated)f(b)n(y)g(a)h(w)n(eigh)n(t,)g
Fj(W)788 1421 y Fh(i)814 1413 y Fn(.)37 b(F)-6 b(ragmen)n(t)25
b(w)n(eigh)n(ts)j(can)e(b)r(e)g(de-)-152 1500 y(termined)c(b)n(y)g
(either)g(using)h(database)h(statistics)g(or)f(as)h(a)f(function)-152
1588 y(of)29 b(the)f(v)n(olume)f(of)i(data)f(a)g(fragmen)n(t)g
(de\014nition)g(spans)g(\(i.e.,)i(the)-152 1675 y(fragmen)n(t's)24
b Fm(size)6 b Fn(\))23 b(and)g(the)g(n)n(um)n(b)r(er)e(of)j(clien)n(ts)
f(that)g(subscrib)r(e)h(to)-152 1762 y(it)i(\(i.e.,)h(the)e(fragmen)n
(t's)h(subscription)g(lev)n(el\):)-69 1980 y Fj(W)4 1988
y Fh(i)52 1980 y Fn(=)185 1932 y(\(size)g Fp(\002)g Fn(subscription)g
(lev)n(el\))g(of)g(fragmen)n(t)f Fj(i)p 143 1963 1421
4 v 143 2031 a Fn(\(size)h Fp(\002)f Fn(subscription)h(lev)n(el\))g(of)
h(all)f(fragmen)n(ts)918 2210 y(=)1038 2082 y Fg(P)1119
2161 y Fh(j)s Ff(j)p Fh(F)1205 2172 y Fe(i)1232 2161
y Ff(2)p Fh(C)1318 2172 y Fe(j)1365 2139 y Fn(size)q(\()p
Fj(F)1564 2147 y Fh(i)1590 2139 y Fn(\))p 1009 2193 642
4 v 1009 2204 a Fg(P)1090 2283 y Fh(k)q(;l)p Ff(j)p Fh(F)1221
2295 y Fe(k)1256 2283 y Ff(2)p Fh(C)1342 2295 y Fe(l)1383
2260 y Fn(size)q(\()p Fj(F)1582 2269 y Fh(k)1620 2260
y Fn(\))1743 2210 y(\(1\))-152 2422 y(The)39 b(serv)n(er)f(stores)h(a)g
(set)g(of)g(datagroups)g Fj(G)j Fn(=)h Fp(f)p Fj(G)1508
2430 y Fi(1)1543 2422 y Fj(;)13 b(:::;)h(G)1735 2430
y Fh(M)1802 2422 y Fp(g)-152 2509 y Fn(where)30 b Fj(G)134
2517 y Fh(j)193 2509 y Fp(\022)c Fj(F)11 b Fn(,)30 b(and)e(generates)i
(an)f(up)r(date)f(log)i(for)g(eac)n(h,)g(con-)-152 2596
y(taining)j(the)e(up)r(dates)g(to)h(the)g(group's)g(fragmen)n(ts.)53
b(The)31 b(size)i(of)-152 2683 y(eac)n(h)e(up)r(date)f(log)i(is)f(a)g
(function)f(of)i(the)e(sum)f(of)i(the)g(w)n(eigh)n(ts)g(of)-152
2770 y(its)26 b(corresp)r(onding)h(datagroup.)-77 2857
y(Eac)n(h)33 b(clien)n(t,)i Fj(i)p Fn(,)g(has)e(a)f(set)h(of)h
Fm(inter)l(ests)p Fn(,)j Fj(C)1266 2865 y Fh(i)1324 2857
y Fn(where)c Fj(C)1608 2865 y Fh(i)1667 2857 y Fp(\022)g
Fj(F)11 b Fn(.)-152 2945 y(Eac)n(h)28 b(clien)n(t)g(subscrib)r(es)g(to)
g(a)g(set)g(of)g(datagroups)h(suc)n(h)e(that)g(the)-152
3032 y(groups)19 b(to)f(whic)n(h)g(the)g(clien)n(t)h(subscrib)r(e)f
(con)n(tain)g(a)h(sup)r(erset)f(of)h(the)-152 3119 y(fragmen)n(ts)30
b(of)f(in)n(terest)h(to)f(the)g(clien)n(t.)45 b(Stated)29
b(formally)-6 b(,)30 b(if)g Fj(C)k Fn(is)-152 3206 y(the)19
b(set)h(of)g(all)h Fj(C)325 3214 y Fh(i)351 3206 y Fn(,)g(giv)n(en)e(a)
h(mapping)e(from)h(clien)n(ts)h(to)g(datagroups,)-152
3293 y(\010)i(:)g Fj(C)27 b Fp(!)21 b Fn(2)186 3262 y
Fh(G)264 3293 y Fn(\(the)26 b(p)r(o)n(w)n(er)g(set)g(of)h
Fj(G)p Fn(\),)f(for)g(eac)n(h)g(clien)n(t)g Fj(i)p Fn(,)h
Fp([)p Fn(\010\()p Fj(i)p Fn(\))22 b Fp(\023)-152 3380
y Fj(C)-97 3388 y Fh(i)-71 3380 y Fn(.)35 b(This)26 b(is)h(the)e
Fm(c)l(overing)k(c)l(onstr)l(aint)p Fn(.)-77 3468 y(Our)23
b(goal)j(is)f(to)f(generate)h(a)f(set)g(of)h(datagroups)g
Fj(G)f Fn(and)g(a)g(map-)-152 3555 y(ping)36 b(\010)f(that)h(minimizes)
e(the)h(total)h(cost)g(function)g(\(see)f(Equa-)-152
3642 y(tion)27 b(2)g(b)r(elo)n(w\).)37 b(With)26 b Fm(client-c)l
(entric)33 b Fn(grouping,)27 b Fp(j)p Fj(G)p Fp(j)c Fn(=)g
Fp(j)p Fj(C)5 b Fp(j)p Fn(,)27 b(and)-152 3729 y(\010\()p
Fj(i)p Fn(\))33 b(=)e Fj(G)173 3737 y Fh(i)232 3729 y
Fn(=)h Fj(C)379 3737 y Fh(i)405 3729 y Fn(,)i(1)e Fp(\024)g
Fj(i)g Fp(\024)g(j)p Fj(C)5 b Fp(j)p Fn(.)54 b(The)32
b Fm(data-c)l(entric)39 b Fn(grouping)-152 3816 y(approac)n(h)30
b(determines)g(its)g(grouping)g(based)g(on)g(the)g(aggregated)-152
3904 y(in)n(terests)c(of)h(the)e(en)n(tire)h(clien)n(t)g(p)r(opulation)
g(and)g(the)f(capabilities)-152 3991 y(of)h(the)e(system)f(arc)n
(hitecture.)35 b(Figure)25 b(2)g(giv)n(es)g(a)f(simple)h(example)-152
4078 y(of)35 b(data-cen)n(tric)f(redesign)h(in)e(the)h(case)h(where)f
(the)g(in)n(terests)g(of)-152 4165 y(one)23 b(clien)n(t)f(are)h(a)f
(subset)g(of)h(those)f(of)h(another.)34 b(In)n(tuitiv)n(ely)-6
b(,)21 b(if)i(the)-152 4252 y(n)n(um)n(b)r(er)28 b(of)j(fragmen)n(ts)f
(in)g(the)g(database)h(is)f(\014xed,)h(as)f(the)g(n)n(um-)-152
4339 y(b)r(er)i(of)h(clien)n(ts)f(increases,)j(the)d(absolute)g(amoun)n
(t)f(of)i(o)n(v)n(erlap)f(in)-152 4427 y(in)n(terests)26
b(increases.)35 b(This)26 b(suggests)g(that)e(data-cen)n(tric)h
(redesign)-152 4514 y(increases)i(in)f(usefulness)h(with)e(a)h(gro)n
(wing)i(clien)n(t)e(p)r(opulation.)-152 4679 y Fo(3.1)99
b(Cost)25 b(Model)-77 4787 y Fn(Our)31 b(cost)i(mo)r(del)f(assumes)g
(that)g(I/O)f(time)h(is)g(the)g(dominan)n(t)-152 4874
y(cost)18 b(factor)h(and)e(is)h(therefore)g(a)g(go)r(o)r(d)g(appro)n
(ximation)f(of)h(the)f(o)n(v)n(er-)-152 4961 y(all)29
b(up)r(date)e(pro)r(cessing)i(cost)f(of)g(a)g(particular)g(grouping)g
(sc)n(heme.)-152 5049 y(Three)e(serv)n(er)g(and)f(net)n(w)n(ork)g
(activities)i(mak)n(e)d(up)h(the)g(total)h(cost:)-152
5136 y(up)r(date)38 b(mapping)f(\(mapping)h(of)h(up)r(dates)f(to)g
(their)h(resp)r(ectiv)n(e)-152 5223 y(datagroups)219
5191 y Fi(1)255 5223 y Fn(\),)24 b(up)r(date)g(log)h(storage)g
(\(storage)g(of)g(all)g(up)r(date)e(logs)p -152 5292
797 4 v -148 5346 a Fi(1)-113 5378 y Fn(An)38 b(up)r(date)g(op)r
(eration)i(is)g(one)f(of)g(three)g(data)g(manipulating)2040
-69 y(on)n(to)27 b(disk\),)f(and)g(up)r(date)g(log)h(propagation)h
(\(loading)f(and)f(trans-)2040 19 y(mission)g(of)g(up)r(date)g(logs\).)
35 b(T)-6 b(otal)27 b(cost)f(is)h(therefore:)2123 244
y(T)-6 b(otal)27 b(Cost)22 b(=)f(Up)r(date)k(Mapping)h(Cost)2113
356 y(+)17 b(Up)r(date)25 b(Storage)h(Cost)18 b(+)f(Up)r(date)25
b(Propagation)i(Cost)85 b(\(2\))2040 556 y(The)20 b(comp)r(onen)n(ts)e
(of)i(Equation)g(2)f(are)h(explicitly)g(mo)r(deled)e(b)r(elo)n(w.)2040
644 y(The)26 b(v)l(ariables)g(w)n(e)h(use)e(are)h(sho)n(wn)g(in)g(the)f
(follo)n(wing)k(table)3836 612 y Fi(2)3871 644 y Fn(:)p
2040 788 1993 4 v 2038 875 4 88 v 2085 849 a(V)-6 b(ariable)p
2406 875 V 90 w(Description)26 b(\(units,)g(if)g(appropriate\))p
4031 875 V 2040 878 1993 4 v 2038 966 4 88 v 2085 939
a Fj(C)2140 947 y Fh(S)p 2406 966 V 2452 939 a Fn(serv)n(er)g(disk)f
(seek)h(time)f(\(secs\))p 4031 966 V 2038 1053 V 2085
1027 a Fj(C)2140 1035 y Fh(L)p 2406 1053 V 2452 1027
a Fn(serv)n(er)h(disk)f(latency)h(time)f(\(secs\))p 4031
1053 V 2038 1140 V 2085 1114 a Fj(C)2140 1122 y Fh(D)p
2406 1140 V 2452 1114 a Fj(C)2507 1122 y Fh(S)2569 1114
y Fn(+)16 b Fj(C)2700 1122 y Fh(L)p 4031 1140 V 2038
1227 V 2085 1201 a Fj(C)2140 1209 y Fh(T)p 2406 1227
V 2452 1201 a Fn(serv)n(er)26 b(disk)f(transmission)h(rate)h(\(secs/b)n
(yte\))p 4031 1227 V 2038 1407 4 180 v 2085 1293 a Fj(C)2145
1262 y Fh(k)2140 1308 y(B)p 2406 1407 V 2452 1293 a Fn(transmission)i
(rate)f(b)r(et)n(w)n(een)g(clien)n(t)h Fj(k)h Fn(and)e(serv)n(er)2452
1381 y(\(secs/b)n(yte\))p 4031 1407 V 2038 1494 4 88
v 2085 1468 a Fj(V)2130 1476 y Fh(B)p 2406 1494 V 2452
1468 a Fn(bu\013er)d(size)i(for)f(eac)n(h)g(up)r(date)f(log)i(\014le)f
(\(b)n(ytes\))p 4031 1494 V 2038 1581 V 2085 1555 a Fj(V)2130
1563 y Fh(D)p 2406 1581 V 2452 1555 a Fn(a)n(v)n(erage)h(up)r(date)e
(op)r(eration)h(record)g(size)h(\(b)n(ytes\))p 4031 1581
V 2038 1668 V 2085 1642 a Fj(V)2130 1650 y Fh(P)p 2406
1668 V 2452 1642 a Fn(a)n(v)n(erage)22 b(fragmen)n(t)g(de\014nition)f
(record)g(size)i(\(b)n(ytes\))p 4031 1668 V 2038 1755
V 2085 1729 a Fj(V)2130 1737 y Fh(T)p 2406 1755 V 2452
1729 a Fn(a)n(v)n(erage)k(temp)r(orary)d(table)i(record)h(size)f(\(b)n
(ytes\))p 4031 1755 V 2038 1930 4 175 v 2085 1816 a Fj(V)2130
1824 y Fh(G)p 2406 1930 V 2452 1816 a Fn(a)n(v)n(erage)76
b(datagroup)f(de\014nition)g(record)g(size)2452 1904
y(\(b)n(ytes\))p 4031 1930 V 2038 2017 4 88 v 2085 1991
a Fj(V)2130 1999 y Fh(S)p 2406 2017 V 2452 1991 a Fn(n)n(um)n(b)r(er)24
b(of)i(op)r(erations)h(in)f(the)f(up)r(date)g(\014le)p
4031 2017 V 2038 2104 V 2085 2078 a Fj(V)2130 2086 y
Fh(F)p 2406 2104 V 2452 2078 a Fj(V)2497 2086 y Fh(D)2553
2078 y Fj(V)2598 2086 y Fh(S)2667 2078 y Fn(=)h(total)g(size)h(of)f(up)
r(date)f(\014le)p 4031 2104 V 2038 2191 V 2085 2165 a
Fj(W)2158 2173 y Fh(i)p 2406 2191 V 2452 2165 a Fn(w)n(eigh)n(t)h(of)h
(fragmen)n(t)e Fj(i)p 4031 2191 V 2038 2278 V 2085 2252
a(M)p 2406 2278 V 293 w Fn(n)n(um)n(b)r(er)f(of)i(datagroups)p
4031 2278 V 2038 2366 V 2085 2340 a Fj(N)p 2406 2366
V 306 w Fn(n)n(um)n(b)r(er)e(of)i(clien)n(ts)p 4031 2366
V 2040 2369 1993 4 v 2040 2433 a Fl(Up)r(date)38 b(\(to)h(datagroup\))h
(mapping)f(cost)34 b Fn(is)f(the)g(time)f(re-)2040 2520
y(quired)26 b(to)h(map)f(up)r(dates)g(to)h(datagroups.)38
b(W)-6 b(e)26 b(assume)h(that)f(the)2040 2608 y(log)g(of)g(up)r(dates)f
(to)g(b)r(e)g(distributed)f(and)h(an)g(up)r(date-to-fragmen)n(t)2040
2695 y(mapping)17 b(table)h(\(the)f(publication)h(information\))g(are)h
(sequen)n(tially)2040 2782 y(read)26 b(in)n(to)f(memory)f(\(2)p
Fj(C)2786 2790 y Fh(D)2858 2782 y Fn(+)16 b Fj(C)2989
2790 y Fh(T)3038 2782 y Fn(\()p Fj(V)3113 2790 y Fh(F)3180
2782 y Fn(+)g Fp(j)p Fj(F)11 b Fp(j)p Fj(V)3403 2790
y Fh(P)3454 2782 y Fn(\)\).)34 b(The)26 b(results)g(of)2040
2869 y(the)34 b(join)i(are)f(sa)n(v)n(ed)f(in)n(to)g(a)h(temp)r(orary)f
(\014le)g(\()p Fj(C)3534 2877 y Fh(D)3613 2869 y Fn(+)22
b Fj(C)3750 2877 y Fh(T)3799 2869 y Fj(V)3844 2877 y
Fh(S)3888 2869 y Fj(V)3933 2877 y Fh(T)3981 2869 y Fn(\).)2040
2956 y(The)g(temp)r(orary)f(\014le)i(and)e(the)h(fragmen)n
(t-to-datagroup)g(mapping)2040 3044 y(table)30 b(\(the)f(subscription)h
(information\))g(are)h(then)e(read)h(\(2)p Fj(C)3898
3052 y Fh(D)3973 3044 y Fn(+)2040 3131 y Fj(C)2095 3139
y Fh(T)2144 3131 y Fn(\()p Fj(V)2219 3139 y Fh(S)2263
3131 y Fj(V)2308 3139 y Fh(T)2374 3131 y Fn(+)17 b Fj(V)2496
3139 y Fh(G)2560 3075 y Fg(P)2641 3154 y Fh(G)2688 3165
y Fe(i)2715 3154 y Ff(2)p Fh(G)2821 3131 y Fp(j)p Fj(G)2902
3139 y Fh(i)2928 3131 y Fp(j)p Fn(\)\))27 b(and)e(joined)i(in)f(memory)
f(to)h(pro-)2040 3218 y(duce)f(the)h(\014nal)f(result.)35
b(Hence,)2123 3443 y(Up)r(date)25 b(Mapping)h(Cost)2099
3656 y(=)21 b(5)p Fj(C)2273 3664 y Fh(D)2346 3656 y Fn(+)16
b Fj(C)2477 3664 y Fh(T)2539 3506 y Fg(2)2539 3640 y(4)2590
3656 y Fj(V)2635 3664 y Fh(F)2703 3656 y Fn(+)g Fp(j)p
Fj(F)11 b Fp(j)p Fj(V)2926 3664 y Fh(P)2995 3656 y Fn(+)16
b(2)p Fj(V)3154 3664 y Fh(S)3199 3656 y Fj(V)3244 3664
y Fh(T)3310 3656 y Fn(+)g Fj(V)3431 3664 y Fh(G)3522
3585 y Fg(X)3496 3743 y Fh(G)3543 3754 y Fe(i)3569 3743
y Ff(2)p Fh(G)3671 3656 y Fp(j)p Fj(G)3752 3664 y Fh(i)3779
3656 y Fp(j)3800 3506 y Fg(3)3800 3640 y(5)3935 3656
y Fn(\(3\))2040 3949 y Fl(Up)r(date)36 b(storage)g(\(to)g(disk)g(I/O\))
h(cost)31 b Fn(measures)g(the)f(time)2040 4036 y(required)23
b(to)i(store)f(all)h(the)e(up)r(date)h(logs)h(on)n(to)f(disk)g(at)g
(the)f(serv)n(er.)2040 4124 y(W)-6 b(e)36 b(assume)h(that)f(a)h
(main-memory)d(bu\013er)i(is)h(main)n(tained)f(for)2040
4211 y(eac)n(h)23 b(up)r(date)g(log,)i(and)d(whenev)n(er)h(a)h
(bu\013er)e(is)h(\014lled,)h(its)g(con)n(ten)n(ts)2040
4298 y(are)29 b(written)g(to)f(disk.)42 b(This)29 b(happ)r(ens)f(un)n
(til)g(all)i(up)r(date)d(logs)j(are)2040 4385 y(written)36
b(\(1)j Fp(\024)g Fj(j)k Fp(\024)38 b Fj(M)8 b Fn(\).)66
b(The)36 b(left)h(term)e(in)h(the)f(paren)n(theses)2040
4472 y(b)r(elo)n(w)i(indicates)g(the)f(time)f(sp)r(en)n(t)h(on)g(disk)g
(latencies)h(that)f(are)2040 4560 y(exp)r(erienced)f(for)i(eac)n(h)e
(up)r(date)g(log)i(when)e(the)g(bu\013er)g(is)h(\014lled,)2040
4647 y(whereas)25 b(the)f(righ)n(t)h(term)e(indicates)i(ho)n(w)f(m)n
(uc)n(h)f(time)g(is)i(required)2040 4734 y(to)k(store)h(the)e(actual)h
(data)h(on)e(disk.)44 b(Recall)30 b(that)e(the)g(w)n(eigh)n(t)i(of)2040
4821 y(fragmen)n(t)25 b Fj(i)p Fn(,)g Fj(W)2509 4829
y Fh(i)2535 4821 y Fn(,)h(estimates)f(the)f(prop)r(ortion)i(of)g(op)r
(erations)g(that)p 2040 4994 797 4 v 2040 5067 a(commands,)d(namely)h
Fd(INSERT,)41 b(UPDATE)25 b Fn(and)e Fd(DELETE)p Fn(.)i(Com)n(bina-)
2040 5142 y(tions)38 b(of)g(these)g(op)r(erations)g(constitute)g(the)f
(transactions)i(con-)2040 5217 y(tained)26 b(in)f(up)r(date)h(logs.)
2044 5271 y Fi(2)2078 5303 y Fn(The)e(term)e(\\record")i(in)f(the)g
(table)g(refers)i(to)e(the)g(data)g(structure)2040 5378
y(\(e.g.,)k(ro)n(w\))f(con)n(taining)h(the)e(resp)r(ectiv)n(e)h
(information)p eop
%%Page: 4 4
4 3 bop 113 1361 a
 currentpoint currentpoint translate .75 .75 scale neg exch neg exch
translate
 113 1361 a @beginspecial 0 @llx 0
@lly 589 @urx 242 @ury 5890 @rwi @setspecial
%%BeginDocument: isdbdiag2.eps
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 242 moveto 0 0 lineto 589 0 lineto 589 242 lineto closepath clip newpath
% Fill background color
0 0 moveto 589 0 lineto 589 242 lineto 0 242 lineto
closepath 1.00 1.00 1.00 setrgbcolor fill

11.0 285.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hypen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
/Times-Roman /Times-Roman-iso isovec ReEncode
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
/Times-Roman-iso ff 180.00 scf sf
1125 4050 m
gs 1 -1 sc (Salesman) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
1125 3750 m
gs 1 -1 sc (Northeast) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
2400 3900 m
gs 1 -1 sc (Manager) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
6375 4050 m
gs 1 -1 sc (Salesman) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
6375 3750 m
gs 1 -1 sc (Northeast) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
7650 3900 m
gs 1 -1 sc (Manager) col0 sh gr
% Polyline
7.500 slw
gs  clippath
451 1541 m 422 1593 l 553 1668 l 464 1583 l 583 1616 l cp
eoclip
n 1500 2175 m
 450 1575 l gs col0 s gr gr

% arrowhead
n 583 1616 m 464 1583 l 553 1668 l  col0 s
% Polyline
gs  clippath
443 1542 m 427 1600 l 574 1638 l 466 1579 l 589 1580 l cp
eoclip
n 2700 2175 m
 450 1575 l gs col0 s gr gr

% arrowhead
n 589 1580 m 466 1579 l 574 1638 l  col0 s
% Polyline
gs  clippath
1500 1541 m 1473 1595 l 1608 1662 l 1515 1582 l 1635 1608 l cp
eoclip
n 2700 2175 m
 1500 1575 l gs col0 s gr gr

% arrowhead
n 1635 1608 m 1515 1582 l 1608 1662 l  col0 s
% Polyline
gs  clippath
2575 1553 m 2517 1567 l 2553 1714 l 2554 1591 l 2612 1700 l cp
eoclip
n 2700 2175 m
 2550 1575 l gs col0 s gr gr

% arrowhead
n 2612 1700 m 2554 1591 l 2553 1714 l  col0 s
% Polyline
gs  clippath
3629 1591 m 3595 1541 l 3469 1625 l 3586 1584 l 3502 1675 l cp
eoclip
n 2700 2175 m
 3600 1575 l gs col0 s gr gr

% arrowhead
n 3502 1675 m 3586 1584 l 3469 1625 l  col0 s
% Polyline
gs  clippath
5701 1541 m 5672 1593 l 5803 1668 l 5714 1583 l 5833 1616 l cp
eoclip
n 6750 2175 m
 5700 1575 l gs col0 s gr gr

% arrowhead
n 5833 1616 m 5714 1583 l 5803 1668 l  col0 s
% Polyline
gs  clippath
7825 1553 m 7767 1567 l 7803 1714 l 7804 1591 l 7862 1700 l cp
eoclip
n 7950 2175 m
 7800 1575 l gs col0 s gr gr

% arrowhead
n 7862 1700 m 7804 1591 l 7803 1714 l  col0 s
% Polyline
gs  clippath
8879 1591 m 8845 1541 l 8719 1625 l 8836 1584 l 8752 1675 l cp
eoclip
n 7950 2175 m
 8850 1575 l gs col0 s gr gr

% arrowhead
n 8752 1675 m 8836 1584 l 8719 1625 l  col0 s
% Polyline
gs  clippath
7980 2760 m 7920 2760 l 7920 2912 l 7950 2792 l 7980 2912 l cp
eoclip
n 7950 3525 m
 7950 2775 l gs col0 s gr gr

% arrowhead
n 7980 2912 m 7950 2792 l 7920 2912 l  col0 s
/Times-Roman-iso ff 180.00 scf sf
300 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
1350 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
2400 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
3450 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
5550 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
6600 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
7650 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
8700 1425 m
gs 1 -1 sc (Data) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
300 1200 m
gs 1 -1 sc (North) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
1350 1200 m
gs 1 -1 sc (East) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
2400 1200 m
gs 1 -1 sc (South) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
3450 1200 m
gs 1 -1 sc (West) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
5550 1200 m
gs 1 -1 sc (North) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
6600 1200 m
gs 1 -1 sc (East) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
7650 1200 m
gs 1 -1 sc (South) col0 sh gr
/Times-Roman-iso ff 180.00 scf sf
8700 1200 m
gs 1 -1 sc (West) col0 sh gr
% Polyline
n 1155 2175 m 1050 2175 1050 2670 105 arcto 4 {pop} repeat
  1050 2775 1845 2775 105 arcto 4 {pop} repeat
  1950 2775 1950 2280 105 arcto 4 {pop} repeat
  1950 2175 1155 2175 105 arcto 4 {pop} repeat
 cp gs col-1 s gr 
/Times-Roman-iso ff 180.00 scf sf
1275 2550 m
gs 1 -1 sc (DG) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
1575 2625 m
gs 1 -1 sc (1) col-1 sh gr
% Polyline
n 2355 2175 m 2250 2175 2250 2670 105 arcto 4 {pop} repeat
  2250 2775 3045 2775 105 arcto 4 {pop} repeat
  3150 2775 3150 2280 105 arcto 4 {pop} repeat
  3150 2175 2355 2175 105 arcto 4 {pop} repeat
 cp gs col-1 s gr 
/Times-Roman-iso ff 180.00 scf sf
2475 2550 m
gs 1 -1 sc (DG) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
2775 2625 m
gs 1 -1 sc (2) col-1 sh gr
% Polyline
n 6405 2175 m 6300 2175 6300 2670 105 arcto 4 {pop} repeat
  6300 2775 7095 2775 105 arcto 4 {pop} repeat
  7200 2775 7200 2280 105 arcto 4 {pop} repeat
  7200 2175 6405 2175 105 arcto 4 {pop} repeat
 cp gs col-1 s gr 
/Times-Roman-iso ff 180.00 scf sf
6525 2550 m
gs 1 -1 sc (DG) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
6825 2625 m
gs 1 -1 sc (1) col-1 sh gr
% Polyline
n 7605 2175 m 7500 2175 7500 2670 105 arcto 4 {pop} repeat
  7500 2775 8295 2775 105 arcto 4 {pop} repeat
  8400 2775 8400 2280 105 arcto 4 {pop} repeat
  8400 2175 7605 2175 105 arcto 4 {pop} repeat
 cp gs col-1 s gr 
/Times-Roman-iso ff 180.00 scf sf
7725 2550 m
gs 1 -1 sc (DG) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
8025 2625 m
gs 1 -1 sc (2) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4425 1275 m
gs 1 -1 sc (Database) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4500 1125 m
gs 1 -1 sc (Server) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4725 1500 m
gs 1 -1 sc (F) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4425 1800 m
gs 1 -1 sc (Datagroup) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4425 1950 m
gs 1 -1 sc (Definition) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4725 2175 m
gs 1 -1 sc (G) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4575 2925 m
gs 1 -1 sc (Client/) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4500 3225 m
gs 1 -1 sc (Mapping) col-1 sh gr
/Symbol ff 180.00 scf sf
4725 3450 m
gs 1 -1 sc (F) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4425 3075 m
gs 1 -1 sc (Datagroup) col-1 sh gr
% Polyline
n 1050 3525 m 1950 3525 l 1950 4125 l 1050 4125 l
 cp gs col-1 s gr 
% Polyline
n 2250 3525 m 3150 3525 l 3150 4125 l 2250 4125 l
 cp gs col-1 s gr 
% Polyline
n 6300 3525 m 7200 3525 l 7200 4125 l 6300 4125 l
 cp gs col-1 s gr 
% Polyline
n 7500 3525 m 8400 3525 l 8400 4125 l 7500 4125 l
 cp gs col-1 s gr 
/Times-Roman-iso ff 180.00 scf sf
4575 3675 m
gs 1 -1 sc (Client) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4425 3825 m
gs 1 -1 sc (Population) col-1 sh gr
/Times-Roman-iso ff 180.00 scf sf
4725 4050 m
gs 1 -1 sc (C) col-1 sh gr
% Polyline
30.000 slw
gs  clippath
6015 4590 m 6015 4410 l 5574 4410 l 5934 4500 l 5574 4590 l cp
eoclip
n 4125 4500 m
 6000 4500 l gs col-1 s gr gr

% arrowhead
n 5574 4590 m 5934 4500 l 5574 4410 l  col-1 s
/Times-Roman-iso ff 210.00 scf sf
1050 4575 m
gs 1 -1 sc (CLIENT-CENTRIC GROUPING) col-1 sh gr
/Times-Roman-iso ff 210.00 scf sf
6000 4575 m
gs 1 -1 sc (DATA-CENTRIC GROUPING) col-1 sh gr
/Times-Roman-iso ff 210.00 scf sf
4350 4425 m
gs 1 -1 sc (REDESIGN) col-1 sh gr
% Polyline
7.500 slw
gs  clippath
6780 1560 m 6720 1560 l 6720 1712 l 6750 1592 l 6780 1712 l cp
eoclip
n 6750 2175 m
 6750 1575 l gs col-1 s gr gr

% arrowhead
n 6780 1712 m 6750 1592 l 6720 1712 l  col-1 s
% Polyline
n 450 1050 m 150 900 l 225 1275 l 0 1425 l 375 1575 l 675 1425 l
 1050 1125 l 600 900 l
 450 1050 l  cp gs col-1 s gr 
% Polyline
n 1500 1050 m 1200 900 l 1275 1275 l 1050 1425 l 1425 1575 l 1725 1425 l
 2100 1125 l 1650 900 l
 1500 1050 l  cp gs col-1 s gr 
% Polyline
n 2550 1050 m 2250 900 l 2325 1275 l 2100 1425 l 2475 1575 l 2775 1425 l
 3150 1125 l 2700 900 l
 2550 1050 l  cp gs col-1 s gr 
% Polyline
n 3600 1050 m 3300 900 l 3375 1275 l 3150 1425 l 3525 1575 l 3825 1425 l
 4200 1125 l 3750 900 l
 3600 1050 l  cp gs col-1 s gr 
% Polyline
n 5700 1050 m 5400 900 l 5475 1275 l 5250 1425 l 5625 1575 l 5925 1425 l
 6300 1125 l 5850 900 l
 5700 1050 l  cp gs col-1 s gr 
% Polyline
n 6750 1050 m 6450 900 l 6525 1275 l 6300 1425 l 6675 1575 l 6975 1425 l
 7350 1125 l 6900 900 l
 6750 1050 l  cp gs col-1 s gr 
% Polyline
n 7800 1050 m 7500 900 l 7575 1275 l 7350 1425 l 7725 1575 l 8025 1425 l
 8400 1125 l 7950 900 l
 7800 1050 l  cp gs col-1 s gr 
% Polyline
n 8850 1050 m 8550 900 l 8625 1275 l 8400 1425 l 8775 1575 l 9075 1425 l
 9450 1125 l 9000 900 l
 8850 1050 l  cp gs col-1 s gr 
% Polyline
gs  clippath
1530 1560 m 1470 1560 l 1470 1712 l 1500 1592 l 1530 1712 l cp
eoclip
n 1500 2175 m
 1500 1575 l gs col-1 s gr gr

% arrowhead
n 1530 1712 m 1500 1592 l 1470 1712 l  col-1 s
% Polyline
gs  clippath
1530 2760 m 1470 2760 l 1470 2912 l 1500 2792 l 1530 2912 l cp
eoclip
n 1500 3525 m
 1500 2775 l gs col-1 s gr gr

% arrowhead
n 1530 2912 m 1500 2792 l 1470 2912 l  col-1 s
% Polyline
gs  clippath
2730 2760 m 2670 2760 l 2670 2912 l 2700 2792 l 2730 2912 l cp
eoclip
n 2700 3525 m
 2700 2775 l gs col-1 s gr gr

% arrowhead
n 2730 2912 m 2700 2792 l 2670 2912 l  col-1 s
% Polyline
gs  clippath
6780 2760 m 6720 2760 l 6720 2912 l 6750 2792 l 6780 2912 l cp
eoclip
n 6750 3525 m
 6750 2775 l gs col-1 s gr gr

% arrowhead
n 6780 2912 m 6750 2792 l 6720 2912 l  col-1 s
% Polyline
gs  clippath
6753 2741 m 6721 2792 l 6849 2873 l 6764 2784 l 6881 2822 l cp
eoclip
n 7950 3525 m
 6750 2775 l gs col-1 s gr gr

% arrowhead
n 6881 2822 m 6764 2784 l 6849 2873 l  col-1 s
$F2psEnd
rs

%%EndDocument
 @endspecial 113 1361 a
 currentpoint currentpoint translate 1 .75 div 1 .75 div scale neg
exch neg exch translate
 113 1361 a 259 1531 a Fl(Figure)30
b(2:)39 b(Example)29 b(of)h(clien)n(t-cen)n(tric)i(to)e(data-cen)n
(tric)i(redesign)e(using)g(aggregated)g(in)n(terests.)-152
1778 y Fn(are)d(applied)e(to)h(that)g(fragmen)n(t.)-69
1944 y(Up)r(date)f(Storage)i(Cost)16 2156 y(=)121 2063
y Fh(M)97 2085 y Fg(X)100 2243 y Fh(j)s Fi(=1)221 2006
y Fg(2)221 2141 y(4)272 2156 y Fj(C)327 2164 y Fh(D)395
2006 y Fg(2)395 2137 y(6)395 2182 y(6)395 2227 y(6)457
2108 y Fj(V)502 2116 y Fh(F)p 456 2139 98 4 v 456 2207
a Fj(V)501 2215 y Fh(B)634 2085 y Fg(X)576 2247 y Fh(i)p
Ff(j)p Fh(F)656 2258 y Fe(i)682 2247 y Ff(2)p Fh(G)771
2258 y Fe(j)815 2156 y Fj(W)888 2164 y Fh(i)914 2006
y Fg(3)914 2137 y(7)914 2182 y(7)914 2227 y(7)982 2156
y Fn(+)17 b Fj(C)1114 2164 y Fh(T)1162 2156 y Fj(V)1207
2164 y Fh(F)1328 2085 y Fg(X)1271 2247 y Fh(i)p Ff(j)p
Fh(F)1351 2258 y Fe(i)1377 2247 y Ff(2)p Fh(G)1466 2258
y Fe(j)1510 2156 y Fj(W)1583 2164 y Fh(i)1609 2006 y
Fg(3)1609 2141 y(5)1743 2156 y Fn(\(4\))-152 2392 y Fl(\(Serv)n(er)35
b(to)f(clien)n(t\))i(up)r(date)f(propagation)i(cost)31
b Fn(measures)-152 2479 y(the)h(time)g(required)g(to)h(load)g(in)n(to)f
(memory)f(and)h(then)f(transmit)-152 2566 y(the)26 b(appropriate)g(up)r
(date)g(logs)h(to)f(all)h(clien)n(ts,)g(assuming)f(unicast)-152
2653 y(comm)n(unication)34 b(b)r(et)n(w)n(een)g(the)h(serv)n(er)f(and)h
(eac)n(h)g(clien)n(t.)62 b(Eac)n(h)-152 2741 y(log)27
b(the)e(clien)n(t)h(do)n(wnloads)g(is)g(sequen)n(tially)g(read,)g(then)
f(joined)h(in)-152 2828 y(memory)-6 b(,)30 b(then)g(transmitted)f(o)n
(v)n(er)h(the)g(net)n(w)n(ork)g(at)h(the)f(clien)n(t's)-152
2915 y(bandwidth.)-69 3081 y(Up)r(date)25 b(Propagation)j(Cost)-120
3293 y(=)-11 3200 y Fh(N)-39 3222 y Fg(X)-39 3381 y Fh(k)q
Fi(=1)84 3143 y Fg(2)84 3278 y(4)136 3293 y Fj(C)191
3301 y Fh(D)246 3293 y Fp(j)p Fn(\010\()p Fj(k)r Fn(\))p
Fp(j)18 b Fn(+)f Fj(V)585 3301 y Fh(F)635 3293 y Fn(\()p
Fj(C)720 3301 y Fh(T)786 3293 y Fn(+)g Fj(C)923 3257
y Fh(k)918 3306 y(B)970 3293 y Fn(\))1080 3222 y Fg(X)1013
3384 y Fh(G)1060 3395 y Fe(j)1091 3384 y Ff(2)p Fi(\010\()p
Fh(k)q Fi(\))1328 3222 y Fg(X)1271 3384 y Fh(i)p Ff(j)p
Fh(F)1351 3395 y Fe(i)1377 3384 y Ff(2)p Fh(G)1466 3395
y Fe(j)1510 3293 y Fj(W)1583 3301 y Fh(i)1609 3143 y
Fg(3)1609 3278 y(5)1743 3293 y Fn(\(5\))-77 3525 y(In)h(the)g(equation)
g(ab)r(o)n(v)n(e,)i(disk)e(latencies)i(are)f(exp)r(erienced)f(while)
-152 3612 y(reading)36 b(eac)n(h)g(clien)n(t)g Fj(k)r
Fn('s)g(up)r(date)f(logs)h(\()p Fj(C)1176 3620 y Fh(D)1232
3612 y Fp(j)p Fn(\010\()p Fj(k)r Fn(\))p Fp(j)p Fn(\).)64
b(F)-6 b(or)36 b(eac)n(h)-152 3699 y(clien)n(t)c Fj(k)r
Fn(,)i(the)e(v)n(olume)f(of)h(data)g(read)g(and)g(transmitted)f(are)h
(the)-152 3786 y(same)17 b(\()p Fj(V)107 3794 y Fh(F)171
3730 y Fg(P)252 3809 y Fh(G)299 3820 y Fe(j)330 3809
y Ff(2)p Fi(\010\()p Fh(k)q Fi(\))514 3730 y Fg(P)595
3809 y Fh(i)p Ff(j)p Fh(F)675 3820 y Fe(i)701 3809 y
Ff(2)p Fh(G)790 3820 y Fe(j)838 3786 y Fj(W)911 3794
y Fh(i)937 3786 y Fn(\),)i(and,)f(although)g(the)f(serv)n(er's)-152
3892 y(disk)22 b(rate)f(is)h(\014xed)f(\()p Fj(C)498
3900 y Fh(T)546 3892 y Fn(\),)i(the)e(clien)n(ts')h(transmission)g
(rates)g(are)g(in-)-152 3979 y(dep)r(enden)n(t)j(\()p
Fj(C)310 3947 y Fh(k)305 3994 y(B)357 3979 y Fn(\).)-152
4136 y Fo(3.2)99 b(Some)51 b(P)n(otential)f(Cost)g(Reducing)h(Alter)o
(na\255)72 4224 y(ti)o(v)o(es)-77 4332 y Fn(F)-6 b(or)26
b(illustrativ)n(e)h(purp)r(oses,)f(w)n(e)h(no)n(w)f(discuss)h(certain)f
(extreme)-152 4419 y(datagroup)g(design)f(strategies.)36
b(A)24 b(single)i(large)g(datagroup)g(\()p Fj(G)21 b
Fn(=)-152 4506 y Fp(f)p Fj(G)-54 4514 y Fi(1)-19 4506
y Fp(g)p Fn(,)43 b Fj(G)143 4514 y Fi(1)221 4506 y Fn(=)g
Fj(F)11 b Fn(\))38 b(minimizes)g(the)h(amoun)n(t)e(of)j(disk)f
(resources)-152 4593 y(used.)71 b(Ho)n(w)n(ev)n(er,)42
b(all)d(clien)n(ts)f(m)n(ust)f(then)g(receiv)n(e)h(all)h(up)r(dates)
-152 4680 y(regardless)26 b(of)f(their)f(particular)h(in)n(terests.)35
b(If)24 b(transmission)h(costs)-152 4767 y(are)36 b(high,)i(this)e(is)f
(a)h(v)n(ery)f(costly)g(solution.)65 b(A)n(t)34 b(the)h(other)h(ex-)
-152 4855 y(treme,)f(one)e(datagroup)g(can)h(b)r(e)e(generated)i(for)g
(eac)n(h)f(fragmen)n(t)-152 4942 y(\()p Fj(G)-62 4950
y Fh(i)-11 4942 y Fn(=)24 b Fp(f)p Fj(F)160 4950 y Fh(i)187
4942 y Fp(g)p Fj(;)13 b Fp(8)p Fj(F)351 4950 y Fh(i)402
4942 y Fp(2)25 b Fj(F)11 b Fn(\).)39 b(This)28 b(is)g(similar)g(to)g
(the)f(serv)n(er-side)h(or-)-152 5029 y(ganization)e(prop)r(osed)f(in)g
([8].)35 b(Note)25 b(that)f(if)i(the)e(n)n(um)n(b)r(er)f(of)i(frag-)
-152 5116 y(men)n(ts)32 b(is)h(high,)i(then)d(managing)h(all)g(the)g
(datagroups)g(b)r(ecomes)-152 5203 y(costly)-6 b(.)54
b(Another)31 b(solution)h(is)h(to)f(generate)h(one)f(datagroup)g(p)r
(er)-152 5290 y(clien)n(t)23 b(\()p Fj(G)142 5298 y Fh(i)190
5290 y Fn(=)e Fj(C)326 5298 y Fh(i)352 5290 y Fj(;)13
b Fp(8)p Fj(C)484 5298 y Fh(i)531 5290 y Fp(2)22 b Fj(C)5
b Fn(\).)33 b(This)23 b(is)g(the)f(clien)n(t-cen)n(tric)g(solution)-152
5378 y(standard)30 b(used)g(b)n(y)e(industry)h(that,)i(as)f(sho)n(wn)h
(in)e([5],)j(results)f(in)2040 1778 y(high)19 b(lev)n(els)h(of)g
(redundan)n(t)d(w)n(ork)j(as)f(the)g(clien)n(t)g(p)r(opulation)h(gro)n
(ws.)2040 1865 y(The)j(alternativ)n(e)g(w)n(e)g(prop)r(ose)g(lies)g
(somewhere)g(in)f(b)r(et)n(w)n(een)g(these)2040 1952
y(solutions)27 b(and)e(is)h(based)g(on)g(ho)n(w)g(the)f(clien)n(ts)h
(share)h(data.)2115 2040 y(Another)k(option)i(is)f(to)g(ameliorate)h
(the)f(system)f(arc)n(hitecture)2040 2127 y(itself)e(with)e(m)n
(ultiple)f(up)r(date)h(serv)n(ers,)h(in)f(whic)n(h)g(eac)n(h)g(can)g(w)
n(ork)2040 2214 y(in)21 b(parallel)h(to)f(generate)h(the)e(up)r(date)g
(logs)j(for)e(a)g(subset)g(of)h(clien)n(ts,)2040 2301
y(as)k(describ)r(ed)g(in)g([10].)36 b(Instead)25 b(of)h(precluding)g
(it,)g(suc)n(h)f(arc)n(hitec-)2040 2388 y(tural)k(solutions)h
(complemen)n(t)d(data-cen)n(tric)i(design.)44 b(F)-6
b(or)29 b(exam-)2040 2475 y(ple,)40 b(clien)n(ts)d(can)g(b)r(e)g(allo)r
(cated)i(to)d(eac)n(h)h(up)r(date)g(serv)n(er)f(based)2040
2563 y(on)d(the)g(p)r(oten)n(tial)h(e\013ectiv)n(eness)g(of)g(the)f
(resultan)n(t)h(data-cen)n(tric)2040 2650 y(grouping.)40
b(One)27 b(w)n(a)n(y)h(to)g(do)f(this)g(is)h(to)g(cluster)g(clien)n(ts)
g(based)g(on)2040 2737 y(in)n(terest)i Fm(a\016nities)35
b Fn(as)c(in)e([6].)47 b(Ho)n(w)n(ev)n(er,)31 b(b)r(ecause)f(w)n(e)g
(assume)f(a)2040 2824 y(single)g(up)r(date)e(serv)n(er,)i(suc)n(h)e(w)n
(ork)h(is)h(outside)f(the)f(scop)r(e)i(of)f(this)2040
2911 y(pap)r(er.)2040 3236 y Fo(4.)99 b(A)26 b(HEURISTIC)g(APPR)m(O)l
(A)-5 b(CH)24 b(T)n(O)i(GR)m(OUP\255)2214 3352 y(ING)f(DESIGN)2115
3460 y Fn(Because)c(of)h(the)e(complexit)n(y)f(of)i(the)f(grouping)h
(problem)f(\(it)g(can)2040 3547 y(b)r(e)i(mo)r(deled)f(as)h(an)g
Fj(N)8 b(P)33 b Fn(complete)21 b(mathematical)g(programming)2040
3634 y(problem\),)35 b(w)n(e)f(o\013er)g(a)f(heuristic)h(algorithm.)59
b(W)-6 b(e)33 b(start)h(b)n(y)e(in-)2040 3721 y(tro)r(ducing)23
b(three)g(op)r(erators)h(that)e(p)r(erform)h(grouping)g(op)r(erations)
2040 3808 y(on)j(fragmen)n(ts.)36 b(Eac)n(h)26 b(has)h(di\013eren)n(t)e
(cost)i(pro\014les,)g(and)f(th)n(us)f(are)2040 3896 y(applicable)f(in)f
(di\013eren)n(t)g(situations.)35 b(A)n(t)22 b(the)h(end)f(of)i(this)f
(section,)2040 3983 y(w)n(e)28 b(in)n(tro)r(duce)g(a)g(means)f(of)i
(greedily)f(applying)g(these)g(op)r(erators.)2040 4070
y(F)-6 b(or)21 b(brevit)n(y)-6 b(,)21 b(w)n(e)g(do)g(not)g(include)f(a)
i(formal)f(cost)g(analysis)h(but)e(one)2040 4157 y(can)26
b(b)r(e)f(found)h(in)f([12].)2115 4244 y(Based)37 b(on)g(the)g(cost)g
(equations)g(in)n(tro)r(duced)f(in)h(Section)g(3.1,)2040
4332 y(certain)26 b(conclusions)g(can)g(b)r(e)f(dra)n(wn)g(ab)r(out)g
(w)n(a)n(ys)h(of)g(manipulat-)2040 4419 y(ing)d(the)f(grouping)h(in)g
(order)f(to)h(reduce)f(up)r(date)g(pro)r(cessing)i(costs.)2040
4506 y(Namely)-6 b(,)27 b(w)n(e)h(can)g(manipulate)f(the)g(n)n(um)n(b)r
(er)e(of)k(datagroups,)g(the)2040 4593 y(comp)r(osition)j(of)h
(datagroups,)h(and)e(the)f(subscription)h(of)h(clien)n(ts)2040
4680 y(to)f(datagroups)h(in)f(order)g(to)g(c)n(hange)g(up)r(date)g(pro)
r(cessing)h(costs.)2040 4767 y(Common)19 b(w)n(a)n(ys)i(of)f
(redesigning)i(datagroups,)g(although)e(with)h(dif-)2040
4855 y(feren)n(t)27 b(side)g(e\013ects,)h(include)e(merging,)i
(splitting,)g(and)e(subtract-)2040 4942 y(ing)i(o)n(v)n(erlapping)f
(datagroups)h([7].)41 b(Although)26 b(similar)i(op)r(erators)2040
5029 y(are)37 b(used)g(in)f(materialized)i(view)f(design,)j(these)d(op)
r(erators)h(are)2040 5116 y(based)27 b(on)f(algorithms)h(that,)f(as)h
(w)n(e)g(explained)f(in)g(Section)h(2,)g(are)2040 5203
y(generally)37 b(inapplicable)g(here.)67 b(W)-6 b(e)35
b(therefore)j(de\014ne)d(our)h(o)n(wn)2040 5290 y(op)r(erators)30
b(and)d(giv)n(e)i(their)f(de\014nitions,)h(side-e\013ects,)h(and)e
(appli-)2040 5378 y(cabilit)n(y)e(b)r(elo)n(w.)36 b(See)25
b(Figure)i(3.)p eop
%%Page: 5 5
5 4 bop -152 -69 a Fo(4.1)99 b(Operators)26 b(f)n(or)e(Redesigning)h
(Datagr)n(oups)-77 39 y Fp(\017)p Fl(Merging)32 b Fn(t)n(w)n(o)e
(datagroups)h(in)n(v)n(olv)n(es)e(replacing)i(them)e(with)-152
126 y(their)19 b(union.)32 b(Clien)n(ts)19 b(subscribing)g(to)g(at)g
(least)g(one)g(of)g(the)f(merged)-152 214 y(datagroups)27
b(instead)g(subscrib)r(e)g(to)g(their)f(union,)h(preserving)f(the)-152
301 y(co)n(v)n(ering)31 b(constrain)n(t)f(\(See)g(Section)h(3\).)48
b(If)30 b(there)g(is)h(o)n(v)n(erlap)f(b)r(e-)-152 388
y(t)n(w)n(een)e(the)g(merged)f(datagroups,)j(then)d(storage)i(cost)g
(is)f(reduced)-152 475 y(in)23 b(prop)r(ortion)h(to)f(the)f(size)i(of)f
(the)g(o)n(v)n(erlap.)34 b(If)23 b(a)g(clien)n(t)g(originally)-152
562 y(subscrib)r(ed)i(to)f(only)h(one)f(of)i(the)e(merged)g
(datagroups,)h(the)f(clien)n(t)-152 649 y(m)n(ust)d(receiv)n(e)h(sup)r
(er\015uous)g(up)r(dates)f(for)i(fragmen)n(ts)f(con)n(tained)g(in)-152
737 y(the)d(\\other")g(merged)g(datagroup,)h(resulting)g(in)f
(increased)g(up)r(date)-152 824 y(log)27 b(transmission)f(costs.)-77
911 y(Applicabilit)n(y)32 b(of)h(Merge)h(-)e(Because)h(this)g(op)r
(erator)g(t)n(ypically)-152 998 y(increases)g(the)e(amoun)n(t)e(of)j
(data)g(that)f(m)n(ust)e(b)r(e)i(transmitted)g(to)-152
1085 y(a)h(clien)n(t,)i(w)n(e)e(do)g(not)f(exp)r(ect)g(this)h(op)r
(erator)h(to)e(b)r(e)h(used)f(m)n(uc)n(h,)-152 1173 y(unless)25
b(the)g(net)n(w)n(ork)f(bandwidth)h(is)g(v)n(ery)f(high,)h(or)g(the)g
(degree)g(of)-152 1260 y(o)n(v)n(erlap)h(b)r(et)n(w)n(een)g(t)n(w)n(o)g
(datagroups)g(is)g(v)n(ery)f(high.)-152 1347 y Fp(\017)p
Fl(Splitting)f Fn(in)n(v)n(olv)n(es)18 b(\014nding)h(t)n(w)n(o)g
(non-totally)g(o)n(v)n(erlapping,)i(but)-152 1434 y(partially)29
b(in)n(tersecting)g(datagroups,)h(and)d(splitting)i(o\013)f(their)g
(in-)-152 1521 y(tersection)h(to)e(form)h(a)g(third)f(datagroup.)40
b(Subscrib)r(ers)28 b(to)g(either)-152 1608 y(datagroup)19
b(m)n(ust)e(also)j(subscrib)r(e)e(to)h(the)f(third)g(datagroup.)32
b(Split-)-152 1696 y(ting)19 b(reduces)g(o)n(v)n(erlap)g(in)f
(datagroups,)j(but)d(do)r(es)h(not)f(increase)i(the)-152
1783 y(amoun)n(t)33 b(of)h(data)h(transmitted)d(to)i(the)g(resp)r
(ectiv)n(e)g(subscrib)r(ers.)-152 1870 y(There)d(is,)i(ho)n(w)n(ev)n
(er,)f(o)n(v)n(erhead)f(in)f(terms)g(of)i(disk)e(seeks)h(and)g(la-)-152
1957 y(tencies)c(for)f(eac)n(h)g(additional)g(datagroup)h(generated.)
-77 2044 y(Applicabilit)n(y)32 b(of)h(Split)f(-)g(Splitting)g(should)g
(increase)h(in)g(rele-)-152 2131 y(v)l(ance)f(as)h(the)f(v)n(olume)f
(of)i(up)r(dates)f(increases)i(or)e(the)g(degree)h(of)-152
2219 y(o)n(v)n(erlap)23 b(b)r(et)n(w)n(een)f(t)n(w)n(o)h(datagroups)h
(increases,)g(b)r(ecause)f(the)f(time)-152 2306 y(sa)n(v)n(ed)32
b(in)f(not)h(rewriting)h(large)g(sets)f(of)h(up)r(dates)e(o\013sets)i
(the)e(in-)-152 2393 y(crease)c(in)f(disk)f(seek)h(and)f(scan)h(times.)
-152 2480 y Fp(\017)p Fl(Subtracting)32 b Fn(t)n(w)n(o)27
b(datagroups)h(applies)g(only)f(if)h(one)f(is)h(a)g(sub-)-152
2567 y(set)i(\(either)g(prop)r(er)f(or)h(not\))g(of)g(the)f(other.)47
b(The)30 b(smaller)g(of)g(the)-152 2654 y(t)n(w)n(o)20
b(is)h(subtracted)e(from)g(the)h(larger)g(one,)i(eliminating)e(their)f
(o)n(v)n(er-)-152 2742 y(lap.)54 b(If)32 b(the)g(datagroup)g
(subtracted)f(from)h(b)r(ecomes)g(empt)n(y)e(\(in)-152
2829 y(the)f(case)g(where)h(the)e(subset)h(relationship)h(is)f(not)g
(prop)r(er\),)g(then)-152 2916 y(it)34 b(is)h(discarded.)59
b(Subscrib)r(ers)34 b(to)g(the)g(larger)h(datagroup)f(m)n(ust)-152
3003 y(also)g(subscrib)r(e)e(to)g(the)f(smaller)i(one)f(\(if)g(a)h
(smaller)f(one)g(exists\);)-152 3090 y(o)n(v)n(erhead)19
b(in)h(terms)e(of)j(disk)e(latencies)h(is)g(incurred)f(b)n(y)g(clien)n
(ts)h(ha)n(v-)-152 3178 y(ing)31 b(to)g(subscrib)r(e)h(to)f(additional)
g(datagroups.)51 b(The)31 b(n)n(um)n(b)r(er)e(of)-152
3265 y(datagroups)i(is)g(not)f(increased)h(b)n(y)e(this)i(op)r
(eration,)h(and)e(sa)n(vings)-152 3352 y(are)g(prop)r(ortional)h(to)e
(the)g(degree)h(of)g(o)n(v)n(erlap)f(b)r(et)n(w)n(een)h(the)f(sub-)-152
3439 y(tracted)24 b(datagroups.)34 b(Subscrib)r(ers)24
b(to)g(these)f(datagroups)h(do)g(not)-152 3526 y(need)i(to)f(receiv)n
(e)h(extra)g(data.)-77 3613 y(Applicabilit)n(y)g(of)h(Subtract)e(-)g
(This)i(op)r(erator)g(di\013ers)f(from)g(the)-152 3701
y(other)21 b(t)n(w)n(o,)i(b)r(ecause)e(of)g(the)g(subset)f(restriction)
i(on)f(the)f(op)r(erands.)-152 3788 y(Nonetheless,)j(this)e(op)r
(erator)h(t)n(ypically)f(has)g(few)n(er)h(side)f(e\013ects:)32
b(It)-152 3875 y(neither)24 b(increases)h(the)f(amoun)n(t)f(of)i(data)f
(sen)n(t)f(to)i(clien)n(ts)f(the)g(w)n(a)n(y)-152 3962
y(merge)37 b(do)r(es,)k(nor)c(the)f(n)n(um)n(b)r(er)f(of)j(datagroups)g
(the)e(w)n(a)n(y)h(split)-152 4049 y(do)r(es.)-152 4244
y Fl(Example:)51 b Fn(Consider)33 b(t)n(w)n(o)e(datagroups,)j
Fj(A)c Fn(and)h Fj(B)t Fn(,)i(that)e(eac)n(h)-152 4332
y(generate)g(up)r(date)f(logs)h(of)g(10KB.)g(If,)h(due)d(to)h(the)g
(de\014nitions)g(of)-152 4419 y Fj(A)h Fn(and)f Fj(B)t
Fn(,)i(these)f(up)r(date)g(logs)h(alw)n(a)n(ys)g(ha)n(v)n(e)e(a)h
(single)h(b)n(yte)e(dif-)-152 4506 y(ference,)k(then)d(it)h(ma)n(y)e
(mak)n(e)g(sense)i(to)g(merge)f Fj(A)g Fn(and)g Fj(B)t
Fn(.)52 b(This)-152 4593 y(sa)n(v)n(es)28 b(the)f(serv)n(er)g(some)g(w)
n(ork)h(b)n(y)e(main)n(taining)h(one)h(few)n(er)g(data-)-152
4680 y(group)35 b(and)f(not)g(storing)i(its)e(corresp)r(onding)i(up)r
(date)e(log.)62 b(The)-152 4767 y(cost)31 b(ho)n(w)n(ev)n(er,)h(is)f
(that)f(clien)n(ts)h(subscribing)g(to)f(one)h(of)g Fj(A)f
Fn(or)h Fj(B)t Fn(,)-152 4855 y(m)n(ust)25 b(do)n(wnload)i(an)f
(additional)h(b)n(yte.)35 b(But)26 b(at)g(19Kbps,)g(the)g(ad-)-152
4942 y(ditional)31 b(b)n(yte)d(adds)h(less)i(than)e(a)h(millisecond)g
(in)f(transfer)h(time.)-152 5029 y(Alternativ)n(ely)-6
b(,)30 b(splitting)g Fj(A)e Fn(and)h Fj(B)k Fn(forces)e(the)d(serv)n
(er)i(to)f(main-)-152 5116 y(tain)e(the)f(de\014nition)g(of)h(an)g
(additional)g(datagroup)g(and)f(generate)-152 5203 y(an)35
b(additional)h(b)n(yte-sized)e(up)r(date)h(log,)k(whic)n(h,)e(dep)r
(ending)e(on)-152 5290 y(the)26 b(serv)n(er)f(load,)i(ma)n(y)d(not)i(b)
r(e)f(cost)i(e\013ectiv)n(e.)-77 5378 y(On)c(the)g(other)h(hand,)g(if)g
Fj(A)f Fn(and)g Fj(B)28 b Fn(b)r(oth)23 b(generate)h(up)r(date)f(logs)
2040 -69 y(of)35 b(10KB,)g(whic)n(h)g(only)f(ha)n(v)n(e)f(5KB)i(in)f
(common,)h(it)g(ma)n(y)e(mak)n(e)2040 19 y(sense)39 b(to)h(split)f(the)
f(datagroups.)75 b(Although)39 b(splitting)g(in)g(the)2040
106 y(ab)r(o)n(v)n(e)24 b(case)h(w)n(ould)f(force)h(the)e(serv)n(er)h
(to)g(main)n(tain)f(the)h(de\014nition)2040 193 y(of)h(an)e(additional)
i(datagroup)f(and)g(gererate)h(an)e(additional)i(b)n(yte-)2040
280 y(sized)f(up)r(date)g(log,)h(here)f(it)g(w)n(ould)g(sa)n(v)n(e)g
(the)g(serv)n(er)f(some)h(storage)2040 367 y(time)i(\(b)r(ecause)i(of)g
(the)e(magnitude)g(of)i(the)f(o)n(v)n(erlap\))g(without)g(in-)2040
454 y(creasing)21 b(the)d(v)n(olume)g(of)i(data)g(sen)n(t)f(to)g(the)g
(clien)n(t.)32 b(The)20 b(dra)n(wbac)n(k)2040 542 y(is)28
b(that)f(splitting)h(forces)h(the)e(serv)n(er)g(to)h(main)n(tain)e(an)i
(additional)2040 629 y(datagroup.)42 b(Sa)n(vings)28
b(in)g(storage,)i(ho)n(w)n(ev)n(er,)f(increase)g(in)e(imp)r(or-)2040
716 y(tance)37 b(as)h(datagroups)f(gro)n(w.)70 b(If)37
b(these)g(t)n(w)n(o)g(datagroups)h(w)n(ere)2040 803 y(merged)31
b(instead,)j(then)d(clien)n(ts)h(subscribing)g(to)g(one)g(of)h
Fj(A)e Fn(or)h Fj(B)2040 890 y Fn(w)n(ould)e(ha)n(v)n(e)e(to)h(sp)r
(end)g Fp(\030)e Fn(2)i(seconds)h(do)n(wnloading)g(sup)r(er\015uous)
2040 977 y(data)25 b(in)f(addition)h(to)g(the)f Fp(\030)d
Fn(4)k(seconds)g(sp)r(en)n(t)f(do)n(wnloading)i(p)r(er-)2040
1065 y(tinen)n(t)f(data)h(at)g(19Kbps.)2040 1232 y Fo(4.2)99
b(Gr)n(eedy)26 b(Heuristic)2115 1340 y Fn(The)d(application)h(strategy)
f(prop)r(osed)g(here)g(pursues)f(lo)r(cal)j(cost)2040
1427 y(minima)34 b(un)n(til)g(no)h(cost)g(reduction)g(can)g(b)r(e)g
(made)f(b)n(y)g(applying)2040 1515 y(the)28 b(ab)r(o)n(v)n(e)g(op)r
(erators.)43 b(The)28 b(greedy)g(algorithm)g(starts)h(with)f(the)2040
1602 y(clien)n(t-cen)n(tric)36 b(solution)i(and)e(applies)h(all)g(p)r
(ossible)g(subtraction)2040 1689 y(op)r(erations)29 b(on)e(the)g(set)g
(of)h(datagroups)g(un)n(til)f(no)g(cost-reduction)2040
1776 y(is)g(p)r(ossible)h(with)e(this)h(op)r(erator.)38
b(W)-6 b(e)26 b(then)g(searc)n(h)h(for)g(the)f(most)2040
1863 y(cost-e\013ectiv)n(e)34 b(merge)f(or)h(split.)59
b(If)34 b(one)f(exists,)k(w)n(e)d(p)r(erform)f(it,)2040
1950 y(and)25 b(rep)r(eat)h(the)g(cycle:)2115 2038 y(GREED)n(Y)f
(HEURISTIC)2115 2125 y Fl(while)p 2115 2138 203 4 v 26
w Fj(T)11 b(R)q(U)d(E)29 b Fl(do)p 2604 2138 94 4 v 2343
2212 a Fn(P)n(erform)d(all)h(p)r(ossible)f(cost-reducing)g(subtraction)
2369 2299 y(op)r(erations)2343 2386 y(Let)g Fm(m)31 b
Fn(b)r(e)25 b(the)h(most)f(b)r(ene\014cial)h(merge)g(and)f(let)h
Fm(s)32 b Fn(b)r(e)2369 2473 y(the)25 b(most)g(b)r(ene\014cial)h
(split.)2343 2561 y(If)g(either)g Fm(m)31 b Fn(or)26
b Fm(s)32 b Fn(results)26 b(in)g(a)g(cost)g(reduction,)g(then)2369
2648 y(p)r(erform)f(the)g(one)h(that)g(reduces)f(cost)i(the)e(most.)
2343 2735 y(If)h(neither)f Fm(m)32 b Fn(nor)25 b Fm(s)32
b Fn(is)27 b(p)r(erformed,)e(then)g(quit.)2115 2822 y
Fl(o)r(d)p 2115 2835 96 4 v 2115 2909 a Fn(Subtraction)32
b(is)h(giv)n(en)f(precedence)g(b)r(ecause)h(it)g(t)n(ypically)f(has)
2040 2996 y(the)22 b(few)n(est)i(side-e\013ects)f(in)g(terms)f(of)h
(cost)h(p)r(enalties)f(and)g(reduces)2040 3083 y(the)k(searc)n(h)h
(space)f(for)h(the)f(other)h(t)n(w)n(o)f(op)r(erators.)41
b(F)-6 b(urthermore,)2040 3170 y(merge)25 b(and)h(split)g(can)g
(increase)g(the)g(applicabilit)n(y)g(of)h(subtract.)2040
3338 y Fo(4.3)99 b(Redesign)2115 3446 y Fn(As)28 b(time)g(passes,)i(an)
e(ISDB)g(c)n(hanges)h(its)f(con\014guration.)43 b(New)2040
3533 y(clien)n(ts)24 b(ma)n(y)d(b)r(e)i(p)r(erio)r(dically)h(added)e
(to)h(the)g(ISDB,)f(with)i(a)f(giv)n(en)2040 3620 y(subscription.)82
b(The)41 b(problem)g(is)h(deciding)f(the)g(prop)r(er)h(data-)2040
3707 y(groups)20 b(to)f(assign)h(to)f(them.)31 b(This)20
b(problem)e(is)i(similar)f(to)h(the)e Fm(NP)8 b Fn(-)2040
3794 y(hard)35 b(set-co)n(v)n(ering)g(problem.)62 b(Moreo)n(v)n(er,)38
b(the)d(existing)g(clien)n(ts)2040 3882 y(ma)n(y)28 b(c)n(hange)i
(their)f(subscriptions)h(or)g(their)f(t)n(yp)r(e)g(of)h(connection)2040
3969 y(with)h(the)f(serv)n(er)h(ma)n(y)f(c)n(hange.)50
b(A)30 b(clien)n(t)h(ma)n(y)e(mo)n(v)n(e)h(from)g(one)2040
4056 y(lo)r(cation)25 b(to)e(another)g(and)f(c)n(hange)h(its)g
(subscription)g(to)g(matc)n(h)f(its)2040 4143 y(lo)r(cale,)30
b(or)e(another)f(clien)n(t)h(ma)n(y)e(acquire)h(a)h(faster,)h(higher)f
(band-)2040 4230 y(width)e(connection.)2115 4317 y(The)20
b(problem)g(of)h(redesign)g(therefore)h(has)f(t)n(w)n(o)f(lev)n(els:)33
b(redesign)2040 4405 y(only)26 b(subscriptions)h(\(groups)f(remain)g
(\014xed\);)f(redesign)i(b)r(oth)f(the)2040 4492 y(groups)f(as)h(w)n
(ell)g(as)f(the)g(subscriptions.)35 b(W)-6 b(e)24 b(address)h(these)g
(prob-)2040 4579 y(lems)41 b(heuristically)-6 b(.)83
b(Suc)n(h)40 b(solutions)j(are)f(necessary)g(b)r(ecause)2040
4666 y(the)34 b(greedy)g(heuristic)h(describ)r(ed)g(in)f(this)h(pap)r
(er)f(has)h(complex-)2040 4753 y(it)n(y)e Fj(O)r Fn(\()p
Fj(M)2335 4722 y Fi(2)2370 4753 y Fp(j)p Fj(F)11 b Fp(j)p
Fn(\))34 b([12].)59 b(W)-6 b(e)33 b(therefore)h(o\013er)g(tec)n
(hniques)f(that)g(re-)2040 4840 y(duce)26 b(the)g(need)g(of)i(running)e
(it.)37 b(These)27 b(tec)n(hniques)f(and)g(relev)l(an)n(t)2040
4928 y(pro)r(ofs)h(are)f(fully)g(describ)r(ed)g(in)g([12].)2040
5095 y Fc(4.3.1)90 b(Addition)23 b(of)f(Clients)2115
5203 y Fn(In)36 b(this)h(section,)k(w)n(e)d(roughly)f(describ)r(e)g(ho)
n(w)g(to)h(map)e(data-)2040 5290 y(groups)28 b(to)f(the)g
(subscriptions)h(of)g(new)g(clien)n(ts.)40 b(This)28
b(problem)e(is)2040 5378 y(similar)g(to)g(the)f Fj(N)8
b(P)j Fn(-complete)25 b(w)n(eigh)n(ted)h(set-co)n(v)n(ering)g(problem,)
p eop
%%Page: 6 6
6 5 bop -141 455 a
 currentpoint currentpoint translate .7 .7 scale neg exch neg exch
translate
 -141 455 a @beginspecial 0 @llx 0
@lly 238 @urx 85 @ury 2380 @rwi @setspecial
%%BeginDocument: merge.eps
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 85 moveto 0 0 lineto 238 0 lineto 238 85 lineto closepath clip newpath
% Fill background color
0 0 moveto 238 0 lineto 238 85 lineto 0 85 lineto
closepath 1.00 1.00 1.00 setrgbcolor fill

-16.0 92.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
% Polyline
7.500 slw
n 1350 600 m 1350 300 l 450 300 l 450 900 l
 1050 900 l gs col0 s gr 
% Polyline
 [60] 0 sd
n 1050 600 m 1350 600 l 1350 900 l 1050 900 l
 cp gs col0 s gr  [] 0 sd
% Polyline
n 1350 600 m 1950 600 l 1950 1350 l 1050 1350 l
 1050 900 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
750 675 m
gs 1 -1 sc (A) col0 sh gr
/Times-Roman ff 180.00 scf sf
1425 1050 m
gs 1 -1 sc (B) col0 sh gr
% Polyline
n 3450 600 m 3450 300 l 2550 300 l 2550 900 l
 3150 900 l gs col0 s gr 
% Polyline
n 3450 600 m 4050 600 l 4050 1350 l 3150 1350 l
 3150 900 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
3225 825 m
gs 1 -1 sc (C) col0 sh gr
% Polyline
gs  clippath
2415 780 m 2415 720 l 2264 720 l 2384 750 l 2264 780 l cp
eoclip
n 2100 750 m
 2400 750 l gs col0 s gr gr

% arrowhead
n 2264 780 m 2384 750 l 2264 720 l 2264 780 l  cp gs 0.00 setgray ef gr  col0 s
$F2psEnd
rs

%%EndDocument
 @endspecial -141 455 a
 currentpoint currentpoint translate 1 .7 div 1 .7 div scale neg exch
neg exch translate
 -141 455 a 1290 481 4 633 v 1337
455 a
 currentpoint currentpoint translate .7 .7 scale neg exch neg exch
translate
 1337 455 a @beginspecial 0 @llx 0 @lly 256 @urx
104 @ury 2560 @rwi @setspecial
%%BeginDocument: split.eps
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 104 moveto 0 0 lineto 256 0 lineto 256 104 lineto closepath clip newpath
% Fill background color
0 0 moveto 256 0 lineto 256 104 lineto 0 104 lineto
closepath 1.00 1.00 1.00 setrgbcolor fill

-16.0 106.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
% Polyline
7.500 slw
n 1350 600 m 1350 300 l 450 300 l 450 900 l
 1050 900 l gs col0 s gr 
% Polyline
 [60] 0 sd
n 1050 600 m 1350 600 l 1350 900 l 1050 900 l
 cp gs col0 s gr  [] 0 sd
% Polyline
n 1350 600 m 1950 600 l 1950 1350 l 1050 1350 l
 1050 900 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
750 675 m
gs 1 -1 sc (A) col0 sh gr
/Times-Roman ff 180.00 scf sf
1425 1050 m
gs 1 -1 sc (B) col0 sh gr
% Polyline
gs  clippath
2415 780 m 2415 720 l 2264 720 l 2384 750 l 2264 780 l cp
eoclip
n 2100 750 m
 2400 750 l gs col0 s gr gr

% arrowhead
n 2264 780 m 2384 750 l 2264 720 l 2264 780 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 3450 525 m 3450 225 l 2550 225 l 2550 825 l
 3150 825 l gs col0 s gr 
% Polyline
n 3150 825 m 3150 525 l
 3450 525 l gs col0 s gr 
% Polyline
n 3300 675 m 3600 675 l 3600 975 l 3300 975 l
 cp gs col0 s gr 
% Polyline
n 3750 825 m 4350 825 l 4350 1575 l 3450 1575 l
 3450 1125 l gs col0 s gr 
% Polyline
n 3450 1125 m 3750 1125 l
 3750 825 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
3375 900 m
gs 1 -1 sc (C) col0 sh gr
/Times-Roman ff 180.00 scf sf
3825 1275 m
gs 1 -1 sc (B') col0 sh gr
/Times-Roman ff 180.00 scf sf
2850 600 m
gs 1 -1 sc (A') col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 1337 455 a
 currentpoint currentpoint translate 1 .7 div 1 .7 div scale neg exch
neg exch translate
 1337 455 a 2873 481 4 633 v 2920
455 a
 currentpoint currentpoint translate .7 .7 scale neg exch neg exch
translate
 2920 455 a @beginspecial 0 @llx 0 @lly 189 @urx
67 @ury 1890 @rwi @setspecial
%%BeginDocument: subtract.eps
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 67 moveto 0 0 lineto 189 0 lineto 189 67 lineto closepath clip newpath
% Fill background color
0 0 moveto 189 0 lineto 189 67 lineto 0 67 lineto
closepath 1.00 1.00 1.00 setrgbcolor fill

-29.0 83.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
% Polyline
7.500 slw
 [60] 0 sd
n 1275 825 m 1575 825 l 1575 1125 l 1275 1125 l
 cp gs col0 s gr  [] 0 sd
% Polyline
n 1575 825 m 1575 525 l 675 525 l 675 1125 l
 1275 1125 l gs col0 s gr 
% Polyline
gs  clippath
2190 855 m 2190 795 l 2039 795 l 2159 825 l 2039 855 l cp
eoclip
n 1875 825 m
 2175 825 l gs col0 s gr gr

% arrowhead
n 2039 855 m 2159 825 l 2039 795 l 2039 855 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 3300 750 m 3300 450 l 2400 450 l 2400 1050 l
 3000 1050 l gs col0 s gr 
% Polyline
n 3000 1050 m 3000 750 l
 3300 750 l gs col0 s gr 
% Polyline
n 3150 900 m 3450 900 l 3450 1200 l 3150 1200 l
 cp gs col0 s gr 
/Times-Roman ff 180.00 scf sf
975 900 m
gs 1 -1 sc (A) col0 sh gr
/Times-Roman ff 180.00 scf sf
1350 1050 m
gs 1 -1 sc (B) col0 sh gr
/Times-Roman ff 180.00 scf sf
2625 825 m
gs 1 -1 sc (A') col0 sh gr
/Times-Roman ff 180.00 scf sf
3225 1125 m
gs 1 -1 sc (B') col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 2920 455 a
 currentpoint currentpoint translate 1 .7 div 1 .7 div scale neg exch
neg exch translate
 2920 455 a 453 542 a Fn(merge)p
1290 568 4 88 v 1357 w(split)p 2873 568 V 1176 w(subtract)-152
712 y Fl(Figure)37 b(3:)54 b(The)35 b(Merge,)j(Split,)h(and)e(Subtract)
h(Op)r(erators.)62 b(The)36 b(b)r(o)n(xes)g(represen)n(t)g(datagroups.)
62 b(The)36 b(dashed)g(lines)-152 799 y(indicate)31 b(o)n(v)n(erlap.)
-152 1046 y Fn(and)g(w)n(e)h(solv)n(e)g(the)e(clien)n(t-addition)i
(problem)e(in)h(a)h(similar)g(w)n(a)n(y)-6 b(.)-152 1133
y(T)g(o)31 b(eac)n(h)g(subscription,)i(w)n(e)e(greedily)g(map)f(the)g
(datagroup)h(that)-152 1220 y(has)k(the)e(b)r(est)h(\(lo)n(w)n(est\))h
(cost-e\013ectiv)n(eness.)60 b(Cost-e\013ectiv)n(eness)-152
1307 y(is)32 b(the)f(ratio)h(of)g(the)f(size)h(of)g(the)f(datagroup)g
(\(size)h(is)g(de\014ned)e(in)-152 1394 y(Section)21
b(3\))g(and)f(the)h(total)g(size)h(of)f(the)f(fragmen)n(ts)h(co)n(v)n
(ered)g(for)g(the)-152 1482 y(\014rst)29 b(time)f(b)n(y)f(the)i
(datagroup.)44 b(This)29 b(pro)r(cess)h(is)f(rep)r(eated)g(un)n(til)
-152 1569 y(the)i(en)n(tire)h(subscription)f(is)h(co)n(v)n(ered.)51
b(W)-6 b(e)31 b(ha)n(v)n(e)g(a)g(ratio)i(b)r(ound)-152
1656 y(for)27 b(the)e(results)h(of)h(this)f(algorithm:)-69
1820 y Fb(Theorem)41 b Fn(4.1.)e Fm(The)28 b(solution)h(achieve)l(d)g
(by)g(the)g(gr)l(e)l(e)l(dy)h(algo-)-152 1907 y(rithm)22
b(is)g(within)f(a)h(factor)g(of)g Fj(H)783 1915 y Fh(N)862
1907 y Fm(appr)l(oximation)h(of)e(the)h(minimal)-152
1994 y(c)l(ost)30 b(c)l(over,)g(wher)l(e)g Fj(H)512 2002
y Fh(N)592 1994 y Fn(=)675 1938 y Fg(P)756 1959 y Fh(N)756
2017 y(i)p Fi(=1)882 1964 y(1)p 882 1978 31 4 v 886 2020
a Fh(i)923 1994 y Fn(\(=)22 b(ln)13 b Fj(N)26 b Fn(+)18
b Fj(O)r Fn(\(1\))p Fm(\))30 b(is)e(the)h Fj(N)1776 1963
y Fh(th)-152 2082 y Fm(harmonic)f(numb)l(er)h(and)f Fj(N)36
b Fm(is)27 b(the)h(size)g(of)g(the)g(subscription.)-152
2246 y Fc(4.3.2)90 b(Rerunning)21 b(the)h(Redesign)f(Algorithm)-77
2354 y Fn(As)37 b(time)f(passes,)41 b(the)36 b(con\014guration)h(of)h
(the)e(ISDB)g(c)n(hanges)-152 2441 y(making)d(a)i(data-cen)n(tric)f
(grouping)g(less)h(cost-e\013ectiv)n(e.)59 b(Exam-)-152
2528 y(ples)21 b(of)g(c)n(hanges)f(include)g(c)n(hanging)h(of)g(clien)n
(t)f(connectivit)n(y)-6 b(,)20 b(clien)n(t)-152 2615
y(subscriptions,)34 b(or)e(serv)n(er)f(sp)r(eed.)51 b(Since)31
b(w)n(e)h(can)f(k)n(eep)g(trac)n(k)g(of)-152 2702 y(these)24
b(c)n(hanges,)h(recomputing)f(curren)n(t)f(clien)n(t-cen)n(tric)h(cost)
g(\()p Fj(C)1751 2710 y Fh(cc)1811 2702 y Fn(\))-152
2789 y(is)h(straigh)n(t-forw)n(ard)h(using)f(the)f(cost)h(mo)r(del)g
(from)f(Section)g(3.)35 b(By)-152 2877 y(comparing)25
b(this)g(cost)h(with)f(the)g(actual)h(curren)n(t)e(cost)i(of)g(the)e
(cur-)-152 2964 y(ren)n(t)30 b(data-cen)n(tric)f(grouping)h(\()p
Fj(C)850 2973 y Fh(dc)914 2964 y Fn(\),)h(an)f(administrator)g(can)f
(de-)-152 3051 y(cide)24 b(to)g(redesign)g(the)f(datagroups)i(if)f(the)
f(cost)h(impro)n(v)n(emen)n(t)d(o\013-)-152 3138 y(sets)27
b(the)e(estimated)g(redesign)h(time)f(\()p Fj(C)1040
3146 y Fh(r)1075 3138 y Fn(\):)585 3276 y Fj(C)640 3285
y Fh(dc)725 3276 y Fj(>)c(C)861 3284 y Fh(cc)938 3276
y Fn(+)c Fj(C)1070 3284 y Fh(r)-152 3413 y Fn(This)24
b(is)g(a)g(conserv)l(ativ)n(e)f(rule)h(of)g(th)n(um)n(b)d(for)j
(deciding)g(the)f(b)r(ene\014t)-152 3500 y(of)k(redesign)f(and)f(v)l
(aries)h(dep)r(ending)g(on)f(the)h(application.)-152
3700 y Fo(5.)100 b(EXPERIMENTS)-152 3875 y(5.1)f(Goals)-77
3983 y Fn(The)28 b(goal)h(of)f(our)g(exp)r(erimen)n(ts)e(is)i(to)g(sho)
n(w)g(that)g(data-cen)n(tric)-152 4070 y(grouping)e(of)h(up)r(dates)e
(using)h(our)g(greedy)g(heuristic)g(\(denoted)f(b)n(y)-152
4157 y Fm(dc)t Fn(\),)d(results)f(in)f(faster)i Fm(r)l(efr)l(esh)h
(times)k Fn(for)21 b(the)f(a)n(v)n(erage)h(clien)n(t)f(than)-152
4244 y(other,)37 b(more)d(in)n(tuitiv)n(e)g(metho)r(ds.)59
b(Refresh)35 b(time)f(includes)g(the)-152 4332 y(time)h(required)g(for)
i(the)e(serv)n(er)h(to)g(generate)g(an)g(up)r(date)f(log\(s\))-152
4419 y(\(including)26 b(computation)f(and)g(storage\))i(and)e(transmit)
g(it)g(to)h(the)-152 4506 y(prop)r(er)g(clien)n(t.)34
b(These)26 b(costs)g(corresp)r(ond)g(to)f(the)g(ones)h(describ)r(ed)
-152 4593 y(in)j(Section)g(3.)45 b(The)30 b(other)f(grouping)g(metho)r
(ds)f(w)n(e)i(consider)f(are)-152 4680 y(describ)r(ed)d(in)g(T)-6
b(able)26 b(1.)-77 4767 y(In)i(our)h(exp)r(erimen)n(tal)f(design,)i
(the)f(database)g(is)g(comp)r(osed)g(of)-152 4855 y(100)e(fragmen)n
(ts.)34 b(Eac)n(h)25 b(fragmen)n(t)g Fj(i)h Fn(is)f(assigned)i(a)e(v)l
(alue,)h Fj(p)1641 4863 y Fh(i)1692 4855 y Fn(\(0)21
b Fp(\024)-152 4942 y Fj(p)-113 4950 y Fh(i)-46 4942
y Fp(\024)40 b Fn(1,)154 4886 y Fg(P)235 4965 y Fh(i)274
4942 y Fj(p)313 4950 y Fh(i)379 4942 y Fn(=)h(1\).)69
b(Eac)n(h)37 b(clien)n(t)h(subscrib)r(es)g(to)f(fragmen)n(t)-152
5029 y Fj(i)h Fn(with)f(a)h(probabilit)n(y)f Fj(p)617
5037 y Fh(i)643 5029 y Fn(.)69 b(T)-6 b(o)38 b(assign)h(v)l(alues)e(to)
h(eac)n(h)f Fj(p)1666 5037 y Fh(i)1692 5029 y Fn(,)j(w)n(e)-152
5116 y(consider)d(t)n(w)n(o)f(probabilit)n(y)f(distributions:)55
b(one)36 b(highly)g(sk)n(ew)n(ed)-152 5203 y(\(Zip\014an,)k(with)e
Fj(\022)k Fn(=)e(1\),)h(and)c(one)g(uniform.)68 b(This)38
b(results)g(in)-152 5290 y(the)30 b(a)n(v)n(erage)h(clien)n(t)g
(subscribing)g(to)f(1\045)h(of)g(the)f(database.)50 b(The)-152
5378 y(total)22 b(v)n(olume)f(of)h(up)r(dates)f(is)h(a)f(linear)h
(function)g(of)g(the)f(n)n(um)n(b)r(er)e(of)2040 1046
y(clien)n(ts.)46 b(They)29 b(are)g(allo)r(cated)i(to)f(eac)n(h)f
(fragmen)n(t)g(in)g(prop)r(ortion)2040 1133 y(to)e(that)f(fragmen)n
(t's)h Fj(p)2718 1141 y Fh(i)2770 1133 y Fn(v)l(alue.)36
b(Eac)n(h)27 b(clien)n(t)g(is)g(assumed)f(to)g(ha)n(v)n(e)2040
1220 y(the)f(same)h(net)n(w)n(ork)f(bandwidth)g(\()p
Fj(C)3131 1188 y Fh(i)3126 1235 y(B)3200 1220 y Fn(=)c
Fj(C)3341 1185 y Fh(j)3336 1241 y(B)3389 1220 y Fj(;)38
b Fn(1)22 b Fp(\024)f Fj(i;)13 b(j)26 b Fp(\024)c Fj(N)8
b Fn(\).)2115 1307 y(The)17 b(clien)n(t)h(p)r(opulation)f(and)g(clien)n
(t)g(bandwidth.)31 b(V)-6 b(arying)17 b(these)2040 1394
y(parameters)27 b(o)n(v)n(er)g(these)g(v)l(alues)g(re\015ects)g(a)h
(wide)f(range)h(of)g(appli-)2040 1482 y(cations,)41 b(suc)n(h)36
b(as)i(the)e(OL)-6 b(TP-class)38 b(mobile)f(o\016ce)g(application)2040
1569 y(describ)r(ed)31 b(in)f(the)h(b)r(eginning)f(of)i(this)e(pap)r
(er.)50 b(W)-6 b(e)30 b(omit)g(exp)r(eri-)2040 1656 y(men)n(ts)h(v)l
(arying)h(up)r(date)f(v)n(olume)g(for)i(the)f(sak)n(e)g(of)h(brevit)n
(y)-6 b(.)53 b(See)2040 1743 y(T)-6 b(able)26 b(2.)2115
1830 y(W)-6 b(e)28 b(sho)n(w)h(that)f(as)h(an)n(y)e(of)i(the)f(exp)r
(erimen)n(tal)g(parameters)g(in-)2040 1917 y(creases,)k(the)d(adv)l(an)
n(tage)g(of)h(using)g Fm(dc)k Fn(increases)c(o)n(v)n(er)g(the)f(other)
2040 2005 y(tec)n(hniques.)44 b(F)-6 b(or)29 b(example,)g(the)g
(di\013erence)g(b)r(et)n(w)n(een)g Fm(dc)k Fn(and)c Fm(c)l(c)2040
2092 y Fn(increases)20 b(with)f(the)f(n)n(um)n(b)r(er)e(of)k(clien)n
(ts.)32 b(P)n(erformance)19 b(gains)h(gen-)2040 2179
y(erally)25 b(come)e(from)g(detecting)h(and)g(remo)n(ving)f(redundan)n
(t)f(up)r(date)2040 2266 y(pro)r(cessing)j(\(i.e.,)h(o)n(v)n(erlapping)
e(subscriptions\),)h(but)e(as)h(w)n(e)h(sho)n(w,)2040
2353 y(under)20 b(some)g(circumstances,)i(can)e(also)i(come)e(b)n(y)g
(o\017oading)h(w)n(ork)2040 2440 y(on)n(to)26 b(other)g(comp)r(onen)n
(ts)e(in)i(the)f(arc)n(hitecture.)2040 2624 y Fo(5.2)99
b(Experimental)26 b(Set\255Up)2115 2732 y Fn(W)-6 b(e)33
b(ran)g(our)g(exp)r(erimen)n(t)f(on)h(an)g(Ethernet)g(LAN)f(consisting)
2040 2819 y(of)23 b(P)n(en)n(tium)d(I)r(I)i(computers)f(running)g
(Windo)n(ws)h(NT.)g(Up)r(date)g(ser-)2040 2907 y(vices)37
b(are)f(pro)n(vided)g(b)n(y)f(Sync)n(hrologic)i(iMobile)h(on)e(a)g
(266MHz)2040 2994 y(PC)20 b(with)g(64MB)h(RAM.)e(\(P)n(erformance)g
(trends)g(using)h(alternativ)n(e)2040 3081 y(ISDB)k(middlew)n(are,)i
(suc)n(h)e(as)h(those)g(b)n(y)f(Oracle,)i(IBM)f(or)h(Sybase,)2040
3168 y(should)37 b(b)r(e)f(similar)h(to)g(those)g(rep)r(orted)f
(here.\))67 b(The)37 b(database)2040 3255 y(serv)n(er)28
b(is)g(Sybase)g(SQL)f(An)n(ywhere)g(v.6,)i(running)e(on)h(a)g(200MHz)
2040 3342 y(PC)g(with)f(128MB)i(RAM.)e(The)g(database)g(stores)h(a)g
(univ)n(ersal)f(re-)2040 3430 y(lation)c(to)f(whic)n(h)f(w)n(e)i(apply)
e(up)r(dates)g(that)h(are)g(distributed)f(to)h(the)2040
3517 y(clien)n(ts.)2115 3604 y(F)-6 b(or)17 b(the)g(data-cen)n(tric)g
(exp)r(erimen)n(ts,)h(extensions)f(based)h(on)f(those)2040
3691 y(describ)r(ed)31 b(in)g([5])g(ha)n(v)n(e)f(b)r(een)h(incorp)r
(orated)g(in)n(to)g(iMobile.)51 b(One)2040 3778 y(of)28
b(the)e(consequences)h(of)h(these)f(extensions)g(is)g(that)g(an)g
(extra)f(set)2040 3865 y(of)33 b(meta-data)e(m)n(ust)g(b)r(e)h(sen)n(t)
f(to)h(eac)n(h)h(clien)n(t.)53 b(The)32 b(size)h(of)g(the)2040
3953 y(meta-data)20 b(\014le)g(has)h(b)r(een)f Fm(empiric)l(al)t(ly)27
b Fn(estimated)20 b(as)h(\()3697 3922 y Fi(24)p 3697
3936 61 4 v 3697 3978 a(82)3767 3953 y Fp(j)p Fj(G)p
Fp(j)7 b Fn(+)g(9\),)2040 4040 y(where)19 b Fp(j)p Fj(G)p
Fp(j)g Fn(is)g(the)e(n)n(um)n(b)r(er)g(of)i(datagroups)g(generated.)32
b(The)19 b(meta-)2040 4127 y(data)f(gro)n(ws)h(with)f(the)g(n)n(um)n(b)
r(er)e(of)i(groups)g(b)r(ecause)h(increasing)g(the)2040
4214 y(n)n(um)n(b)r(er)i(of)j(groups)g(results)g(in)f(the)g(need)f(to)i
(store)g(more)e Fm(mapping)2040 4301 y Fn(information)36
b(for)h(them.)63 b(This)36 b(extra)g(metadata)f(increases)i(the)2040
4388 y(refresh)23 b(times)g(of)g Fm(dc)p Fn(,)h Fm(o)l(g)30
b Fn(and)22 b Fm(op)27 b Fn(generally)d(b)n(y)e(adding)g(transmis-)2040
4476 y(sion)34 b(time.)58 b(This)35 b(extra)e(cost)i(b)r(ecomes)e
(insigni\014can)n(t)h(ho)n(w)n(ev)n(er,)2040 4563 y(as)28
b(w)n(orkloads)i(increase)e(and)g(do)r(es)g(not)g(a\013ect)g(the)f
(trends)g(of)i(the)2040 4650 y(results.)2040 4834 y Fo(5.3)99
b(Experiment)27 b(1:)36 b(V)-9 b(arying)24 b(Client)h(P)n(opulation)
2115 4942 y Fn(The)j(results)g(for)h(b)r(oth)e(data)h(distributions)g
(are)g(nearly)g(iden)n(ti-)2040 5029 y(cal.)35 b(Metho)r(d)25
b Fm(op)30 b Fn(is)25 b(bad)f(with)h(lo)n(w)h(p)r(opulations)f(b)r
(ecause)g(it)g(gen-)2040 5116 y(erates)d(up)r(date)f(logs)i(regardless)
g(of)g(whether)e(they)g(are)h(subscrib)r(ed)2040 5203
y(to)27 b(or)g(not.)37 b(But,)27 b(as)g(the)f(p)r(opulation)h
(increases,)h(the)f(probabilit)n(y)2040 5290 y(that)22
b(a)h(datagroup)g(is)h(not)e(subscrib)r(ed)h(to)f(b)r(ecomes)h(lo)n(w.)
34 b(Metho)r(d)2040 5378 y Fm(o)l(g)g Fn(mak)n(es)25
b(sense)j(when)e(there)g(are)h(few)h(clien)n(ts,)g(b)r(ecause)f(it)f
(sa)n(v)n(es)p eop
%%Page: 7 7
7 6 bop -7 -92 3896 4 v -9 -4 4 88 v 38 -30 a Fn(Grouping)26
b(Metho)r(ds)g(\(notation\))p 1080 -4 V 90 w(commen)n(ts)p
3886 -4 V -7 -1 3896 4 v -9 86 4 88 v 38 60 a(data-cen)n(tric)f(\()p
Fm(dc)t Fn(\))p 1080 86 V 527 w(groups)h(generated)g(with)g(the)f
(greedy)h(heuristic)p 3886 86 V -9 173 V 38 147 a(clien)n(t-cen)n(tric)
f(\()p Fm(c)l(c)t Fn(\))p 1080 173 V 503 w(emplo)n(y)n(ed)f(in)i
(industry)-6 b(,)24 b(creates)j(a)f(unique)e(group)i(for)h(eac)n(h)f
(clien)n(t)p 3886 173 V -9 261 V 38 234 a(one-gian)n(t-group)f(\()p
Fm(o)l(g)7 b Fn(\))p 1080 261 V 400 w(minimizes)25 b(costs)h(at)g(the)f
(serv)n(er)h(b)n(y)f(storing)h(up)r(dates)g(for)g(all)h(clien)n(ts)f
(in)g(a)g(single)g(group)p 3886 261 V -9 435 4 175 v
38 322 a(one-p)r(er-fragmen)n(t)e(\()p Fm(op)5 b Fn(\))p
1080 435 V 347 w(minimizes)28 b(net)n(w)n(ork)i(costs)g(and)f
(eliminates)h(some)f(storage)i(redundancy)d(b)n(y)g(generating)1127
409 y(a)e(single)h(group)e(for)i(eac)n(h)f(fragmen)n(t)p
3886 435 V -7 438 3896 4 v 1399 581 a Fl(T)-7 b(able)29
b(1:)39 b(Grouping)32 b(Metho)r(ds)p 199 779 3483 4 v
197 867 4 88 v 244 840 a(P)n(arameter)e(Description)p
1591 867 V 515 w(V)-7 b(alues)29 b(\(con)n(trol)i(v)-5
b(alues)30 b(in)g Fa(fg)p Fl(\))p 3680 867 V 199 870
3483 4 v 197 957 4 88 v 244 931 a Fn(Num)n(b)r(er)24
b(of)i(clien)n(ts)p 1591 957 V 799 w(1,)g(5,)h(50,)f
Fp(f)p Fn(100)p Fp(g)p Fn(,)i(200,)f(500,)g(1000)p 3680
957 V 197 1044 V 244 1018 a(W)-6 b(orkload)26 b(\(up)r(dates/clien)n
(t\))p 1591 1044 V 504 w Fp(f)p Fn(50)p Fp(g)p 3680 1044
V 197 1134 4 90 v 244 1108 a Fn(Clien)n(t)g(bandwidth)f(\(bps\))p
1591 1134 V 606 w(19)p Fj(:)p Fn(2)19 b Fp(\002)d Fn(10)1944
1076 y Fi(3)1980 1108 y Fj(;)d Fp(f)p Fn(57)p Fj(:)p
Fn(6)19 b Fp(\002)e Fn(10)2359 1076 y Fi(3)2394 1108
y Fp(g)p Fj(;)d Fn(5)p Fj(:)p Fn(12)k Fp(\002)f Fn(10)2773
1076 y Fi(5)2808 1108 y Fj(;)c Fn(1)p Fj(:)p Fn(024)19
b Fp(\002)e Fn(10)3187 1076 y Fi(6)3223 1108 y Fj(;)c
Fn(1)p Fj(:)p Fn(024)19 b Fp(\002)d Fn(10)3601 1076 y
Fi(7)p 3680 1134 V 197 1221 4 88 v 244 1195 a Fn(Distribution)26
b(of)g(up)r(dates)g(o)n(v)n(er)f(fragmen)n(ts)p 1591
1221 V 90 w(Zipf)h(\()p Fj(\022)d Fn(=)e(1\),)26 b(Uniform)g(\()p
Fj(p)2456 1203 y Fh(i)2503 1195 y Fn(=)21 b Fj(:)p Fn(01\))p
3680 1221 V 199 1225 3483 4 v 1100 1368 a Fl(T)-7 b(able)29
b(2:)39 b(P)n(arameter)30 b(v)-5 b(alues)29 b(for)h(exp)r(erimen)n(ts.)
-107 3073 y
 currentpoint currentpoint translate 0.37135 0.37135 scale neg exch
neg exch translate
 -107 3073 a @beginspecial 76 @llx 58 @lly
763 @urx 518 @ury 6870 @rwi @setspecial
%%BeginDocument: chart2.eps

76 58 moveto
763 58 lineto
763 518 lineto
76 518 lineto
closepath clip newpath
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 150 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
PDFVars begin PDF begin
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load 5 dict begin settransfer end
0 i
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} bd
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} bd
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} bd
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} bd
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} bind def
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
/_ColorSep5044? true dd
currentscreen
dup type /dicttype eq
{ /_defaulthalftone xdd
pop pop
}
{
5 dict begin
1 [/HalftoneType /SpotFunction /Angle /Frequency ]
{ exch def } forall
/_defaulthalftone currentdict
end
dd
} ifelse
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /setcolortransfer {
settransfer pop pop pop
} bd
/_defaultcolortransfer [currenttransfer dup dup dup] dd
}
ifelse
/initialize {
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/scn { sc } bd
/SCN { SC } bd
/rf {re f} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/gs
{
begin
/SA here { /_sa? xdd } if
/OP here { /_OP? xdd } if
/op here
{ /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/TR here
{
dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
} if
/HT here { tn5044sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/_sfc
{
_fp null eq
{ _fcs type /arraytype eq
{_fcs 0 get /Separation eq
{
_fcs 1 get /All eq
{
_fc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _fcs 3 get exec _fcs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_fc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
_op? setoverprint
} bind dd
/_ssc
{
_sp null eq
{ _scs type /arraytype eq
{_scs 0 get /Separation eq
{
_scs 1 get /All eq
{
_sc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _scs 3 get exec _scs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_sc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
_OP? setoverprint
} bind dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
currentpoint iTm moveto
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
[/N8/Helvetica 1 TZ
PDFVars/TermAll get exec end end

PDFVars begin PDF begin PDFVars/InitAll get exec
76 58 687 460 re W n
[ 0 -1 1 0 18 594 ] concat
/N9 16 dict dup begin
/SA false def
/TR {}def
/SM 0.02 def
end /ExtGState defineRes pop
1 g
/N9 /ExtGState findRes gs
1 i
76.53 732.57001 458.39999 -674.16 rf
0 G
0 J
0 j
0.24001 w
10 M
[]0 d
76.28999 732.81 458.88 -674.64 re
S 
0.754 g
100.28999 673.28999 350.39999 -524.64 re
f* 
q
407.00999 673.28999 0.24001 -524.64 re
W* n 
407.00999 148.64999 m
407.00999 673.28999 l
S 
Q
q
363.09 673.28999 0.24001 -524.64 re
W* n 
363.09 148.64999 m
363.09 673.28999 l
S 
Q
q
319.41 673.28999 0.24001 -524.64 re
W* n 
319.41 148.64999 m
319.41 673.28999 l
S 
Q
q
275.49001 673.28999 0.24001 -524.64 re
W* n 
275.49001 148.64999 m
275.49001 673.28999 l
S 
Q
q
231.81 673.28999 0.24001 -524.64 re
W* n 
231.81 148.64999 m
231.81 673.28999 l
S 
Q
q
187.89 673.28999 0.24001 -524.64 re
W* n 
187.89 148.64999 m
187.89 673.28999 l
S 
Q
q
144.21001 673.28999 0.24001 -524.64 re
W* n 
144.21001 148.64999 m
144.21001 673.28999 l
S 
Q
q
100.28999 673.28999 0.24001 -524.64 re
W* n 
100.28999 148.64999 m
100.28999 673.28999 l
S 
Q
0.5 G
1 J
0.96001 w
100.28999 673.28999 350.39999 -524.64 re
S 
0.64101 g
0 G
436.77 172.17 13.92 -13.44 re
B* 
442.05 247.05 8.64 -13.44 re
B* 
431.25 322.17 19.44 -13.44 re
B* 
416.85001 397.05 33.84 -13.44 re
B* 
387.57001 471.92999 63.12 -13.44 re
B* 
300.45 546.81 150.24001 -13.44 re
B* 
154.77 621.92999 295.92 -13.44 re
B* 
0.336 g
179.25 185.85001 271.44 -13.44 re
B* 
386.13 260.73 64.56 -13.44 re
B* 
432.69 335.85001 18 -13.44 re
B* 
435.81 410.73 14.88 -13.44 re
B* 
437.25 485.61 13.44 -13.44 re
B* 
436.05 560.49001 14.64 -13.44 re
B* 
434.85001 635.61 15.84 -13.44 re
B* 
0.97701 g
440.61 199.28999 10.08 -13.2 re
B* 
443.49001 274.41 7.2 -13.44 re
B* 
442.28999 349.28999 8.39999 -13.2 re
B* 
q
431.49001 431.61 19.2 -27.84 re
W* n 
438.69 424.17 12 -13.2 re
B* 
Q
434.37 499.05 16.32001 -13.2 re
B* 
418.53 574.17 32.16 -13.44 re
B* 
393.33 649.05 57.36 -13.2 re
B* 
0.94099 g
433.64999 212.97 17.03999 -13.44 re
B* 
442.77 288.09 7.92 -13.44 re
B* 
442.05 362.97 8.64 -13.44 re
B* 
q
433.17 445.28999 17.52 -28.08 re
W* n 
440.37 437.85001 10.32001 -13.44 re
B* 
Q
437.73 512.73 12.96001 -13.44 re
B* 
436.28999 587.85001 14.39999 -13.44 re
B* 
434.85001 662.73 15.84 -13.44 re
B* 
0.24001 w
100.28999 148.64999 m
450.69 148.64999 l
450.69 142.64999 m
450.69 148.64999 l
407.00999 142.64999 m
407.00999 148.64999 l
363.09 142.64999 m
363.09 148.64999 l
319.41 142.64999 m
319.41 148.64999 l
275.49001 142.64999 m
275.49001 148.64999 l
231.81 142.64999 m
231.81 148.64999 l
187.89 142.64999 m
187.89 148.64999 l
144.21001 142.64999 m
144.21001 148.64999 l
100.28999 142.64999 m
100.28999 148.64999 l
450.69 148.64999 m
450.69 673.28999 l
456.69 148.64999 m
450.69 148.64999 l
456.69 223.53 m
450.69 223.53 l
456.69 298.64999 m
450.69 298.64999 l
456.69 373.53 m
450.69 373.53 l
456.69 448.41 m
450.69 448.41 l
456.69 523.28999 m
450.69 523.28999 l
456.69 598.41 m
450.69 598.41 l
456.69 673.28999 m
450.69 673.28999 l
S 
BT
/N8 1 Tf
0 19.44 -19.44 0 457.17 122.97 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (0)Tj
-0.5556 2.2469 TD
/N8 1 Tf (20)Tj
0 2.25929 TD
/N8 1 Tf (40)Tj
0 2.2469 TD
/N8 1 Tf (60)Tj
0 2.25929 TD
/N8 1 Tf (80)Tj
-0.5556 2.2469 TD
/N8 1 Tf (100)Tj
0 2.25929 TD
/N8 1 Tf (120)Tj
0 2.2469 TD
/N8 1 Tf (140)Tj
0 2.25929 TD
/N8 1 Tf (160)Tj
4.0864 -19.4691 TD
/N8 1 Tf [(1)-3295.89999 ]TJ /N8 1 Tf [(5)-3024.2 ]TJ /N8 1 Tf [(50)-2468.2 ]TJ /N8 1 Tf [(100)-2183.89999 ]TJ /N8 1 Tf [(200)-2196.2 ]TJ /N8 1 Tf [(500)-1899.89999 ]TJ /N8 1 Tf [(1000)]TJ
10 -1.6543 TD
/N8 1 Tf (# clients)Tj
-19.44 0 0 -19.44 341.25 88.64999 Tm
0.0061 Tc
-0.0002 Tw
/N8 1 Tf [(r)5.8 ]TJ /N8 1 Tf [(e)6.5 ]TJ /N8 1 Tf [(fr)5.8 ]TJ /N8 1 Tf [(e)6.5 ]TJ /N8 1 Tf [(s)-0.10001 ]TJ /N8 1 Tf [(h)6.5 ]TJ /N8 1 Tf [( ti)5.89999 ]TJ /N8 1 Tf [(me)6.5 ]TJ /N8 1 Tf [( \()5.8 ]TJ /N8 1 Tf [(s)-0.10001 ]TJ /N8 1 Tf [(\))]TJ
ET
1 g
223.41 729.45 104.16 -47.75999 rf
223.17 729.69 104.64 -48.24001 re
S 
0.64101 g
0.96001 w
231.57001 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 243.81 703.53 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (og)Tj
ET
0.336 g
257.73 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 269.97 703.53 Tm
0 g
/N8 1 Tf (op)Tj
ET
0.97701 g
283.89 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 296.13 703.53 Tm
0 g
/N8 1 Tf (cc)Tj
ET
0.94099 g
310.05 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 322.28999 703.53 Tm
0 g
/N8 1 Tf (dc)Tj
ET
0.24001 w
76.28999 732.81 458.88 -674.64 re
S 
PDFVars/TermAll get exec end end

%%EndDocument
 @endspecial -107 3073 a
 currentpoint currentpoint translate 1 0.37135 div 1 0.37135 div scale
neg exch neg exch translate
 -107 3073 a 2109 3073 a
 currentpoint currentpoint translate 0.37135 0.37135 scale neg exch
neg exch translate
 2109
3073 a @beginspecial 76 @llx 58 @lly 763 @urx 518 @ury
6870 @rwi @setspecial
%%BeginDocument: chart1.eps

76 58 moveto
763 58 lineto
763 518 lineto
76 518 lineto
closepath clip newpath
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 150 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
PDFVars begin PDF begin
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load 5 dict begin settransfer end
0 i
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} bd
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} bd
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} bd
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} bd
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} bind def
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
/_ColorSep5044? true dd
currentscreen
dup type /dicttype eq
{ /_defaulthalftone xdd
pop pop
}
{
5 dict begin
1 [/HalftoneType /SpotFunction /Angle /Frequency ]
{ exch def } forall
/_defaulthalftone currentdict
end
dd
} ifelse
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /setcolortransfer {
settransfer pop pop pop
} bd
/_defaultcolortransfer [currenttransfer dup dup dup] dd
}
ifelse
/initialize {
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/scn { sc } bd
/SCN { SC } bd
/rf {re f} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/gs
{
begin
/SA here { /_sa? xdd } if
/OP here { /_OP? xdd } if
/op here
{ /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/TR here
{
dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
} if
/HT here { tn5044sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/_sfc
{
_fp null eq
{ _fcs type /arraytype eq
{_fcs 0 get /Separation eq
{
_fcs 1 get /All eq
{
_fc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _fcs 3 get exec _fcs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_fc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
_op? setoverprint
} bind dd
/_ssc
{
_sp null eq
{ _scs type /arraytype eq
{_scs 0 get /Separation eq
{
_scs 1 get /All eq
{
_sc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _scs 3 get exec _scs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_sc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
_OP? setoverprint
} bind dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
currentpoint iTm moveto
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
[/N8/Helvetica 1 TZ
PDFVars/TermAll get exec end end

PDFVars begin PDF begin PDFVars/InitAll get exec
76 58 687 460 re W n
[ 0 -1 1 0 18 594 ] concat
/N9 16 dict dup begin
/SA false def
/TR {}def
/SM 0.02 def
end /ExtGState defineRes pop
1 g
/N9 /ExtGState findRes gs
1 i
76.53 732.57001 458.39999 -674.16 rf
0 G
0 J
0 j
0.24001 w
10 M
[]0 d
76.28999 732.81 458.88 -674.64 re
S 
0.754 g
100.28999 673.28999 350.39999 -524.64 re
f* 
q
407.00999 673.28999 0.24001 -524.64 re
W* n 
407.00999 148.64999 m
407.00999 673.28999 l
S 
Q
q
363.09 673.28999 0.24001 -524.64 re
W* n 
363.09 148.64999 m
363.09 673.28999 l
S 
Q
q
319.41 673.28999 0.24001 -524.64 re
W* n 
319.41 148.64999 m
319.41 673.28999 l
S 
Q
q
275.49001 673.28999 0.24001 -524.64 re
W* n 
275.49001 148.64999 m
275.49001 673.28999 l
S 
Q
q
231.81 673.28999 0.24001 -524.64 re
W* n 
231.81 148.64999 m
231.81 673.28999 l
S 
Q
q
187.89 673.28999 0.24001 -524.64 re
W* n 
187.89 148.64999 m
187.89 673.28999 l
S 
Q
q
144.21001 673.28999 0.24001 -524.64 re
W* n 
144.21001 148.64999 m
144.21001 673.28999 l
S 
Q
q
100.28999 673.28999 0.24001 -524.64 re
W* n 
100.28999 148.64999 m
100.28999 673.28999 l
S 
Q
0.5 G
1 J
0.96001 w
100.28999 673.28999 350.39999 -524.64 re
S 
0.64101 g
0 G
437.49001 172.17 13.2 -13.44 re
B* 
444.45 247.05 6.24001 -13.44 re
B* 
431.00999 322.17 19.67999 -13.44 re
B* 
416.37 397.05 34.32001 -13.44 re
B* 
387.33 471.92999 63.36 -13.44 re
B* 
299.97 546.81 150.72 -13.44 re
B* 
154.53 621.92999 296.16 -13.44 re
B* 
0.336 g
172.53 185.85001 278.16 -13.44 re
B* 
381.81 260.73 68.88 -13.44 re
B* 
432.21001 335.85001 18.48 -13.44 re
B* 
435.81 410.73 14.88 -13.44 re
B* 
437.25 485.61 13.44 -13.44 re
B* 
436.05 560.49001 14.64 -13.44 re
B* 
434.85001 635.61 15.84 -13.44 re
B* 
0.97701 g
440.61 199.28999 10.08 -13.2 re
B* 
442.53 274.41 8.16 -13.44 re
B* 
440.13 349.28999 10.56 -13.2 re
B* 
q
430.77 431.61 19.92 -27.84 re
W* n 
437.97 424.17 12.72 -13.2 re
B* 
Q
429.09 499.05 21.60001 -13.2 re
B* 
408.92999 574.17 41.75999 -13.44 re
B* 
374.13 649.05 76.56 -13.2 re
B* 
0.94099 g
433.64999 212.97 17.03999 -13.44 re
B* 
442.53 288.09 8.16 -13.44 re
B* 
441.33 362.97 9.36 -13.44 re
B* 
q
431.97 445.28999 18.72 -28.08 re
W* n 
439.17 437.85001 11.52 -13.44 re
B* 
Q
437.25 512.73 13.44 -13.44 re
B* 
436.05 587.85001 14.64 -13.44 re
B* 
434.85001 662.73 15.84 -13.44 re
B* 
0.24001 w
100.28999 148.64999 m
450.69 148.64999 l
450.69 142.64999 m
450.69 148.64999 l
407.00999 142.64999 m
407.00999 148.64999 l
363.09 142.64999 m
363.09 148.64999 l
319.41 142.64999 m
319.41 148.64999 l
275.49001 142.64999 m
275.49001 148.64999 l
231.81 142.64999 m
231.81 148.64999 l
187.89 142.64999 m
187.89 148.64999 l
144.21001 142.64999 m
144.21001 148.64999 l
100.28999 142.64999 m
100.28999 148.64999 l
450.69 148.64999 m
450.69 673.28999 l
456.69 148.64999 m
450.69 148.64999 l
456.69 223.53 m
450.69 223.53 l
456.69 298.64999 m
450.69 298.64999 l
456.69 373.53 m
450.69 373.53 l
456.69 448.41 m
450.69 448.41 l
456.69 523.28999 m
450.69 523.28999 l
456.69 598.41 m
450.69 598.41 l
456.69 673.28999 m
450.69 673.28999 l
S 
BT
/N8 1 Tf
0 19.44 -19.44 0 457.17 122.97 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (0)Tj
-0.5556 2.2469 TD
/N8 1 Tf (20)Tj
0 2.25929 TD
/N8 1 Tf (40)Tj
0 2.2469 TD
/N8 1 Tf (60)Tj
0 2.25929 TD
/N8 1 Tf (80)Tj
-0.5556 2.2469 TD
/N8 1 Tf (100)Tj
0 2.25929 TD
/N8 1 Tf (120)Tj
0 2.2469 TD
/N8 1 Tf (140)Tj
0 2.25929 TD
/N8 1 Tf (160)Tj
4.0864 -19.4691 TD
/N8 1 Tf [(1)-3295.89999 ]TJ /N8 1 Tf [(5)-3024.2 ]TJ /N8 1 Tf [(50)-2468.2 ]TJ /N8 1 Tf [(100)-2183.89999 ]TJ /N8 1 Tf [(200)-2196.2 ]TJ /N8 1 Tf [(500)-1899.89999 ]TJ /N8 1 Tf [(1000)]TJ
10 -1.6543 TD
/N8 1 Tf (# clients)Tj
-19.44 0 0 -19.44 341.25 88.64999 Tm
0.0061 Tc
-0.0002 Tw
/N8 1 Tf [(r)5.8 ]TJ /N8 1 Tf [(e)6.5 ]TJ /N8 1 Tf [(fr)5.8 ]TJ /N8 1 Tf [(e)6.5 ]TJ /N8 1 Tf [(s)-0.10001 ]TJ /N8 1 Tf [(h)6.5 ]TJ /N8 1 Tf [( ti)5.89999 ]TJ /N8 1 Tf [(me)6.5 ]TJ /N8 1 Tf [( \()5.8 ]TJ /N8 1 Tf [(s)-0.10001 ]TJ /N8 1 Tf [(\))]TJ
ET
1 g
223.41 729.45 104.16 -47.75999 rf
223.17 729.69 104.64 -48.24001 re
S 
0.64101 g
0.96001 w
231.57001 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 243.81 703.53 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (og)Tj
ET
0.336 g
257.73 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 269.97 703.53 Tm
0 g
/N8 1 Tf (op)Tj
ET
0.97701 g
283.89 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 296.13 703.53 Tm
0 g
/N8 1 Tf (cc)Tj
ET
0.94099 g
310.05 698.73 11.75999 -11.75999 re
B* 
BT
0 19.44 -19.44 0 322.28999 703.53 Tm
0 g
/N8 1 Tf (dc)Tj
ET
0.24001 w
76.28999 732.81 458.88 -674.64 re
S 
PDFVars/TermAll get exec end end

%%EndDocument
 @endspecial 2109 3073 a
 currentpoint currentpoint translate 1 0.37135 div 1 0.37135 div scale
neg exch neg exch translate
 2109 3073 a 548 3160 a Fn(A.)25
b(Uniform)g(Distribution)1473 b(B.)26 b(Zipf)g(Distribution)425
3334 y Fl(Figure)k(4:)39 b(P)n(er-Clien)n(t)30 b(Refresh)g(Time)e
(\(seconds\))j(With)g(V)-7 b(arying)29 b(Clien)n(t)h(P)n(opulation.)
-107 5041 y
 currentpoint currentpoint translate 0.37082 0.37082 scale neg exch
neg exch translate
 -107 5041 a @beginspecial 76 @llx 58 @lly
764 @urx 518 @ury 6880 @rwi @setspecial
%%BeginDocument: chart5.eps

76 58 moveto
764 58 lineto
764 518 lineto
76 518 lineto
closepath clip newpath
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 150 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
PDFVars begin PDF begin
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load 5 dict begin settransfer end
0 i
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} bd
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} bd
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} bd
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} bd
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} bind def
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
/_ColorSep5044? true dd
currentscreen
dup type /dicttype eq
{ /_defaulthalftone xdd
pop pop
}
{
5 dict begin
1 [/HalftoneType /SpotFunction /Angle /Frequency ]
{ exch def } forall
/_defaulthalftone currentdict
end
dd
} ifelse
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /setcolortransfer {
settransfer pop pop pop
} bd
/_defaultcolortransfer [currenttransfer dup dup dup] dd
}
ifelse
/initialize {
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/scn { sc } bd
/SCN { SC } bd
/rf {re f} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/gs
{
begin
/SA here { /_sa? xdd } if
/OP here { /_OP? xdd } if
/op here
{ /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/TR here
{
dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
} if
/HT here { tn5044sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/_sfc
{
_fp null eq
{ _fcs type /arraytype eq
{_fcs 0 get /Separation eq
{
_fcs 1 get /All eq
{
_fc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _fcs 3 get exec _fcs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_fc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
_op? setoverprint
} bind dd
/_ssc
{
_sp null eq
{ _scs type /arraytype eq
{_scs 0 get /Separation eq
{
_scs 1 get /All eq
{
_sc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _scs 3 get exec _scs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_sc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
_OP? setoverprint
} bind dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
currentpoint iTm moveto
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
[/N8/Helvetica 1 TZ
PDFVars/TermAll get exec end end

PDFVars begin PDF begin PDFVars/InitAll get exec
76 58 688 460 re W n
[ 0 -1 1 0 18 594 ] concat
/N9 16 dict dup begin
/SA false def
/TR {}def
/SM 0.02 def
end /ExtGState defineRes pop
1 g
/N9 /ExtGState findRes gs
1 i
76.53 732.57001 458.39999 -674.16 rf
0 G
0 J
0 j
0.24001 w
10 M
[]0 d
76.28999 732.81 458.88 -674.64 re
S 
0.754 g
99.81 674.49001 352.8 -538.56 re
f* 
q
417.33 674.49001 0.24001 -538.56 re
W* n 
417.33 135.92999 m
417.33 674.49001 l
S 
Q
q
382.05 674.49001 0.24001 -538.56 re
W* n 
382.05 135.92999 m
382.05 674.49001 l
S 
Q
q
346.77 674.49001 0.24001 -538.56 re
W* n 
346.77 135.92999 m
346.77 674.49001 l
S 
Q
q
311.49001 674.49001 0.24001 -538.56 re
W* n 
311.49001 135.92999 m
311.49001 674.49001 l
S 
Q
q
276.21001 674.49001 0.24001 -538.56 re
W* n 
276.21001 135.92999 m
276.21001 674.49001 l
S 
Q
q
240.92999 674.49001 0.24001 -538.56 re
W* n 
240.92999 135.92999 m
240.92999 674.49001 l
S 
Q
q
205.64999 674.49001 0.24001 -538.56 re
W* n 
205.64999 135.92999 m
205.64999 674.49001 l
S 
Q
q
170.37 674.49001 0.24001 -538.56 re
W* n 
170.37 135.92999 m
170.37 674.49001 l
S 
Q
q
135.09 674.49001 0.24001 -538.56 re
W* n 
135.09 135.92999 m
135.09 674.49001 l
S 
Q
q
99.81 674.49001 0.24001 -538.56 re
W* n 
99.81 135.92999 m
99.81 674.49001 l
S 
Q
0.5 G
1 J
0.96001 w
99.81 674.49001 352.8 -538.56 re
S 
0.64101 g
0 G
126.69 170.00999 325.92 -19.44 re
B* 
343.41 277.77 109.2 -19.44 re
B* 
439.64999 385.53 12.96001 -19.44 re
B* 
445.64999 493.05 6.96001 -19.44 re
B* 
451.17 600.81 1.44 -19.44 re
B* 
0.336 g
321.33 189.69 131.28 -19.44 re
B* 
404.61 297.45 48 -19.44 re
B* 
441.57001 404.97 11.03999 -19.2 re
B* 
443.73 512.73 8.88 -19.44 re
B* 
445.89 620.49001 6.72 -19.44 re
B* 
0.97701 g
361.89 209.13 90.72 -19.2 re
B* 
410.61 316.89 42 -19.2 re
B* 
432.69 424.64999 19.92 -19.44 re
B* 
435.09 532.17 17.52 -19.2 re
B* 
435.09 639.92999 17.52 -19.2 re
B* 
0.94099 g
365.49001 228.81 87.12 -19.44 re
B* 
421.17 336.57001 31.44 -19.44 re
B* 
446.13 444.09 6.48 -19.2 re
B* 
447.57001 551.85001 5.03999 -19.44 re
B* 
449.00999 659.61 3.60001 -19.44 re
B* 
0.24001 w
99.81 135.92999 m
452.61 135.92999 l
452.61 129.92999 m
452.61 135.92999 l
417.33 129.92999 m
417.33 135.92999 l
382.05 129.92999 m
382.05 135.92999 l
346.77 129.92999 m
346.77 135.92999 l
311.49001 129.92999 m
311.49001 135.92999 l
276.21001 129.92999 m
276.21001 135.92999 l
240.92999 129.92999 m
240.92999 135.92999 l
205.64999 129.92999 m
205.64999 135.92999 l
170.37 129.92999 m
170.37 135.92999 l
135.09 129.92999 m
135.09 135.92999 l
99.81 129.92999 m
99.81 135.92999 l
452.61 135.92999 m
452.61 674.49001 l
458.61 135.92999 m
452.61 135.92999 l
458.61 243.69 m
452.61 243.69 l
458.61 351.45 m
452.61 351.45 l
458.61 458.97 m
452.61 458.97 l
458.61 566.73 m
452.61 566.73 l
458.61 674.49001 m
452.61 674.49001 l
S 
BT
/N8 1 Tf
0 19.2 -19.2 0 459.09 110.73 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (0)Tj
0 1.83749 TD
/N8 1 Tf (5)Tj
-0.55 1.83749 TD
/N8 1 Tf (10)Tj
T*
/N8 1 Tf (15)Tj
T*
/N8 1 Tf (20)Tj
T*
/N8 1 Tf (25)Tj
T*
/N8 1 Tf (30)Tj
T*
/N8 1 Tf (35)Tj
T*
/N8 1 Tf (40)Tj
T*
/N8 1 Tf (45)Tj
T*
/N8 1 Tf (50)Tj
3.28751 -19.8125 TD
/N8 1 Tf [(19200)-2832.5 ]TJ /N8 1 Tf [(57600)-2557.5 ]TJ /N8 1 Tf [(512000)-2001.5 ]TJ /N8 1 Tf [(1024000)-1445.5 ]TJ /N8 1 Tf [(10240000)]TJ
9.075 -1.625 TD
/N8 1 Tf (bandwidth \(bps\))Tj
-19.2 0 0 -19.2 340.77 88.17 Tm
0.00459 Tc
-0.0076 Tw
/N8 1 Tf [(ref)7.60001 ]TJ /N8 1 Tf [(r)0.10001 ]TJ /N8 1 Tf [(esh t)7.60001 ]TJ /N8 1 Tf [(i)1.60001 ]TJ /N8 1 Tf [(me \(s\))]TJ
ET
1 g
225.57001 729.45 101.28 -46.56 rf
225.33 729.69 101.75999 -47.03999 re
S 
0.64101 g
0.96001 w
233.25 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 245.49001 704.49001 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (og)Tj
ET
0.336 g
258.69 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 270.92999 704.49001 Tm
0 g
/N8 1 Tf (op)Tj
ET
0.97701 g
284.13 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 296.37 704.49001 Tm
0 g
/N8 1 Tf (cc)Tj
ET
0.94099 g
309.57001 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 321.81 704.49001 Tm
0 g
/N8 1 Tf (dc)Tj
ET
0.24001 w
76.28999 732.81 458.88 -674.64 re
S 
PDFVars/TermAll get exec end end

%%EndDocument
 @endspecial -107 5041 a
 currentpoint currentpoint translate 1 0.37082 div 1 0.37082 div scale
neg exch neg exch translate
 -107 5041 a 2109 5041 a
 currentpoint currentpoint translate 0.37082 0.37082 scale neg exch
neg exch translate
 2109
5041 a @beginspecial 76 @llx 58 @lly 764 @urx 518 @ury
6880 @rwi @setspecial
%%BeginDocument: chart6.eps

76 58 moveto
764 58 lineto
764 518 lineto
76 518 lineto
closepath clip newpath
/currentpacking where{pop currentpacking true setpacking}if
userdict /PDF 150 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
PDFVars begin PDF begin
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load 5 dict begin settransfer end
0 i
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} bd
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} bd
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} bd
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} bd
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} bind def
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
/_ColorSep5044? true dd
currentscreen
dup type /dicttype eq
{ /_defaulthalftone xdd
pop pop
}
{
5 dict begin
1 [/HalftoneType /SpotFunction /Angle /Frequency ]
{ exch def } forall
/_defaulthalftone currentdict
end
dd
} ifelse
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /setcolortransfer {
settransfer pop pop pop
} bd
/_defaultcolortransfer [currenttransfer dup dup dup] dd
}
ifelse
/initialize {
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/scn { sc } bd
/SCN { SC } bd
/rf {re f} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/gs
{
begin
/SA here { /_sa? xdd } if
/OP here { /_OP? xdd } if
/op here
{ /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/TR here
{
dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
} if
/HT here { tn5044sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/_sfc
{
_fp null eq
{ _fcs type /arraytype eq
{_fcs 0 get /Separation eq
{
_fcs 1 get /All eq
{
_fc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _fcs 3 get exec _fcs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_fc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
_op? setoverprint
} bind dd
/_ssc
{
_sp null eq
{ _scs type /arraytype eq
{_scs 0 get /Separation eq
{
_scs 1 get /All eq
{
_sc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _scs 3 get exec _scs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_sc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
_OP? setoverprint
} bind dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
currentpoint iTm moveto
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
[/N8/Helvetica 1 TZ
PDFVars/TermAll get exec end end

PDFVars begin PDF begin PDFVars/InitAll get exec
76 58 688 460 re W n
[ 0 -1 1 0 18 594 ] concat
/N9 16 dict dup begin
/SA false def
/TR {}def
/SM 0.02 def
end /ExtGState defineRes pop
1 g
/N9 /ExtGState findRes gs
1 i
76.53 732.57001 458.39999 -674.16 rf
0 G
0 J
0 j
0.24001 w
10 M
[]0 d
76.28999 732.81 458.88 -674.64 re
S 
0.754 g
99.81 674.49001 352.8 -538.56 re
f* 
q
417.33 674.49001 0.24001 -538.56 re
W* n 
417.33 135.92999 m
417.33 674.49001 l
S 
Q
q
382.05 674.49001 0.24001 -538.56 re
W* n 
382.05 135.92999 m
382.05 674.49001 l
S 
Q
q
346.77 674.49001 0.24001 -538.56 re
W* n 
346.77 135.92999 m
346.77 674.49001 l
S 
Q
q
311.49001 674.49001 0.24001 -538.56 re
W* n 
311.49001 135.92999 m
311.49001 674.49001 l
S 
Q
q
276.21001 674.49001 0.24001 -538.56 re
W* n 
276.21001 135.92999 m
276.21001 674.49001 l
S 
Q
q
240.92999 674.49001 0.24001 -538.56 re
W* n 
240.92999 135.92999 m
240.92999 674.49001 l
S 
Q
q
205.64999 674.49001 0.24001 -538.56 re
W* n 
205.64999 135.92999 m
205.64999 674.49001 l
S 
Q
q
170.37 674.49001 0.24001 -538.56 re
W* n 
170.37 135.92999 m
170.37 674.49001 l
S 
Q
q
135.09 674.49001 0.24001 -538.56 re
W* n 
135.09 135.92999 m
135.09 674.49001 l
S 
Q
q
99.81 674.49001 0.24001 -538.56 re
W* n 
99.81 135.92999 m
99.81 674.49001 l
S 
Q
0.5 G
1 J
0.96001 w
99.81 674.49001 352.8 -538.56 re
S 
0.64101 g
0 G
123.57001 170.00999 329.03999 -19.44 re
B* 
342.45 277.77 110.16 -19.44 re
B* 
439.41 385.53 13.2 -19.44 re
B* 
445.64999 493.05 6.96001 -19.44 re
B* 
451.17 600.81 1.44 -19.44 re
B* 
0.336 g
321.33 189.69 131.28 -19.44 re
B* 
404.37 297.45 48.24001 -19.44 re
B* 
441.33 404.97 11.28 -19.2 re
B* 
443.49001 512.73 9.12 -19.44 re
B* 
445.64999 620.49001 6.96001 -19.44 re
B* 
0.97701 g
354.69 209.13 97.92 -19.2 re
B* 
405.57001 316.89 47.03999 -19.2 re
B* 
433.17 424.64999 19.44 -19.44 re
B* 
438.21001 532.17 14.39999 -19.2 re
B* 
435.57001 639.92999 17.03999 -19.2 re
B* 
0.94099 g
352.28999 228.81 100.32001 -19.44 re
B* 
405.57001 336.57001 47.03999 -19.44 re
B* 
444.92999 444.09 7.67999 -19.2 re
B* 
446.61 551.85001 6 -19.44 re
B* 
451.17 659.61 1.44 -19.44 re
B* 
0.24001 w
99.81 135.92999 m
452.61 135.92999 l
452.61 129.92999 m
452.61 135.92999 l
417.33 129.92999 m
417.33 135.92999 l
382.05 129.92999 m
382.05 135.92999 l
346.77 129.92999 m
346.77 135.92999 l
311.49001 129.92999 m
311.49001 135.92999 l
276.21001 129.92999 m
276.21001 135.92999 l
240.92999 129.92999 m
240.92999 135.92999 l
205.64999 129.92999 m
205.64999 135.92999 l
170.37 129.92999 m
170.37 135.92999 l
135.09 129.92999 m
135.09 135.92999 l
99.81 129.92999 m
99.81 135.92999 l
452.61 135.92999 m
452.61 674.49001 l
458.61 135.92999 m
452.61 135.92999 l
458.61 243.69 m
452.61 243.69 l
458.61 351.45 m
452.61 351.45 l
458.61 458.97 m
452.61 458.97 l
458.61 566.73 m
452.61 566.73 l
458.61 674.49001 m
452.61 674.49001 l
S 
BT
/N8 1 Tf
0 19.2 -19.2 0 459.09 110.73 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (0)Tj
0 1.83749 TD
/N8 1 Tf (5)Tj
-0.55 1.83749 TD
/N8 1 Tf (10)Tj
T*
/N8 1 Tf (15)Tj
T*
/N8 1 Tf (20)Tj
T*
/N8 1 Tf (25)Tj
T*
/N8 1 Tf (30)Tj
T*
/N8 1 Tf (35)Tj
T*
/N8 1 Tf (40)Tj
T*
/N8 1 Tf (45)Tj
T*
/N8 1 Tf (50)Tj
3.28751 -19.8125 TD
/N8 1 Tf [(19200)-2832.5 ]TJ /N8 1 Tf [(57600)-2557.5 ]TJ /N8 1 Tf [(512000)-2001.5 ]TJ /N8 1 Tf [(1024000)-1445.5 ]TJ /N8 1 Tf [(10240000)]TJ
9.075 -1.625 TD
/N8 1 Tf (bandwidth \(bps\))Tj
-19.2 0 0 -19.2 340.77 88.17 Tm
0.00459 Tc
-0.0076 Tw
/N8 1 Tf [(ref)7.60001 ]TJ /N8 1 Tf [(r)0.10001 ]TJ /N8 1 Tf [(esh t)7.60001 ]TJ /N8 1 Tf [(i)1.60001 ]TJ /N8 1 Tf [(me \(s\))]TJ
ET
1 g
225.57001 729.45 101.28 -46.56 rf
225.33 729.69 101.75999 -47.03999 re
S 
0.64101 g
0.96001 w
233.25 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 245.49001 704.49001 Tm
0 g
0 Tc
0 Tw
/N8 1 Tf (og)Tj
ET
0.336 g
258.69 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 270.92999 704.49001 Tm
0 g
/N8 1 Tf (op)Tj
ET
0.97701 g
284.13 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 296.37 704.49001 Tm
0 g
/N8 1 Tf (cc)Tj
ET
0.94099 g
309.57001 699.69 11.75999 -11.75999 re
B* 
BT
0 19.2 -19.2 0 321.81 704.49001 Tm
0 g
/N8 1 Tf (dc)Tj
ET
0.24001 w
76.28999 732.81 458.88 -674.64 re
S 
PDFVars/TermAll get exec end end

%%EndDocument
 @endspecial 2109 5041 a
 currentpoint currentpoint translate 1 0.37082 div 1 0.37082 div scale
neg exch neg exch translate
 2109 5041 a 548 5129 a Fn(A.)25
b(Uniform)g(Distribution)1473 b(B.)26 b(Zipf)g(Distribution)422
5302 y Fl(Figure)k(5:)39 b(P)n(er-Clien)n(t)31 b(Refresh)e(Time)g
(\(seconds\))h(With)h(V)-7 b(arying)30 b(Clien)n(t)g(Bandwidth.)p
eop
%%Page: 8 8
8 7 bop -152 -69 a Fn(the)24 b(serv)n(er)h(some)f(w)n(ork.)34
b(The)24 b(amoun)n(t)g(of)h(sup)r(er\015uous)e(data)i(sen)n(t)-152
19 y(to)i(eac)n(h)f(clien)n(t)h(gro)n(ws,)h(ho)n(w)n(ev)n(er,)f(with)f
(the)g(p)r(opulation,)i(making)-152 106 y(this)20 b(grouping)f
(infeasible.)35 b(Metho)r(d)19 b Fm(c)l(c)24 b Fn(breaks)19
b(do)n(wn)h(with)f(a)h(high)-152 193 y(p)r(opulation)31
b(b)r(ecause)g(of)g(the)f(increasing)i(amoun)n(t)d(of)i(redundan)n(t)
-152 280 y(w)n(ork)26 b(it)g(m)n(ust)e(do)i(with)g(a)g(gro)n(wing)h(p)r
(opulation.)-77 367 y(In)d(these)g(tests,)h Fm(dc)p Fn(,)h(whic)n(h)e
(uses)g(the)g(prop)r(osed)h(greedy)f(heuris-)-152 454
y(tic,)g(has)f(consisten)n(tly)h(go)r(o)r(d)g(p)r(erformance,)f
(resulting)h(in)f(the)f(lo)n(w-)-152 542 y(est)31 b(or)g(nearly)g(the)f
(lo)n(w)n(est)h(refresh)h(times)e(o)n(v)n(er)g(all)i(p)r(opulations.)
-152 629 y(Metho)r(d)20 b Fm(dc)k Fn(outp)r(erforms)19
b Fm(op)p Fn(,)i(b)r(ecause)f Fm(dc)k Fn(groups)19 b(together)h(frag-)
-152 716 y(men)n(ts)36 b(that)h(are)g(often)h(subscrib)r(ed)f(to)g
(together.)69 b(Metho)r(d)37 b Fm(dc)-152 803 y Fn(a)n(v)n(oids)29
b(the)g(problems)f(asso)r(ciated)j(with)e Fm(o)l(g)37
b Fn(and)28 b Fm(c)l(c)34 b Fn(b)n(y)28 b(generat-)-152
890 y(ing)22 b(man)n(y)f(datagroups)h(with)g(little)h(o)n(v)n(erlap,)g
(but)e(not)h(so)g(man)n(y)e(as)-152 977 y(to)26 b(compromise)f(serv)n
(er)h(p)r(erformance.)35 b(See)25 b(Figure)h(4.)-77 1065
y(Please)34 b(note)e(that)f(the)h(total)h(v)n(olume)e(of)h(data)h
(distributed)e(is)-152 1152 y(not)f(scaled)h(up)f(p)r(er)g(clien)n(t)g
(as)h(the)f(clien)n(t)g(p)r(opulation)h(increases.)-152
1239 y(W)-6 b(e)29 b(k)n(eep)f(the)g(total)h(v)n(olume)f(of)h(data)g
(constan)n(t)g(in)f(order)h(to)g(iso-)-152 1326 y(late)22
b(clien)n(t-p)r(opulation)e(e\013ects.)34 b(Ho)n(w)n(ev)n(er,)21
b(exp)r(erimen)n(tal)f(results)-152 1413 y(giv)n(en)f(a)g(greater)h
(total)g(v)n(olume)e(of)i(data)f(mak)n(e)f(the)g Fm(dc)24
b Fn(results)19 b(ev)n(en)-152 1500 y(more)26 b(fa)n(v)n(orable)g(with)
g(resp)r(ect)g(to)g(the)f(others.)-152 1653 y Fo(5.4)99
b(Experiment)27 b(2:)36 b(V)-9 b(arying)24 b(Client)h(Band)o(width)-77
1761 y Fn(In)34 b(practice,)j(clien)n(ts)e(ma)n(y)e(c)n(ho)r(ose)j
(among)e(man)n(y)e(connectiv-)-152 1848 y(it)n(y)20 b(options,)i
(including)e(wireless)i(mo)r(dem,)e(con)n(v)n(en)n(tional)g(mo)r(dem,)
-152 1935 y(high-sp)r(eed)g(wireless)i(LAN,)d(or)h(simply)f(do)r(c)n
(king)h(the)g(p)r(ortable)g(de-)-152 2022 y(vice)i(at)g(the)g(o\016ce)g
(LAN.)f(W)-6 b(e)22 b(therefore)g(study)f(ho)n(w)h(these)g(c)n(hang-)
-152 2109 y(ing)h(bandwidths)g(a\013ect)g(the)f(e\013ectiv)n(eness)h
(of)h(the)e(v)l(arious)h(group-)-152 2196 y(ing)j(metho)r(ds.)-77
2284 y(Although)33 b Fm(o)l(g)41 b Fn(p)r(erforms)34
b(p)r(o)r(orly)g(when)g(there)f(is)h(little)h(band-)-152
2371 y(width,)c(it)e(gains)h(the)f(most)g(as)h(bandwidth)e(increases.)
47 b(With)29 b Fm(o)l(g)p Fn(,)-152 2458 y(w)n(ork)23
b(at)f(the)g(serv)n(er)g(is)h(already)g(minimized,)f(so)h(more)e
(bandwidth)-152 2545 y(reduces)41 b(the)f(most)g(harmful)g(e\013ects)h
(of)g(shipping)f(sup)r(er\015uous)-152 2632 y(data.)-77
2719 y(Metho)r(d)21 b Fm(op)26 b Fn(has)21 b(go)r(o)r(d)g(p)r
(erformance)g(as)h(w)n(ell,)h(but)d(fails)i(to)f(tak)n(e)-152
2807 y(adv)l(an)n(tage)31 b(of)h(the)e(increased)h(bandwidth)f(b)n(y)g
(generating)i(few)n(er)-152 2894 y(groups)f(in)e(order)h(to)g(sa)n(v)n
(e)g(the)g(serv)n(er)g(some)f(w)n(ork.)48 b(It)29 b(therefore)-152
2981 y(ultimately)c(p)r(erforms)h(w)n(orse)h(than)e Fm(o)l(g)p
Fn(.)-77 3068 y(With)34 b(high)g(bandwidth,)h Fm(c)l(c)k
Fn(has)34 b(the)g(w)n(orst)h(p)r(erformance)f(of)-152
3155 y(all,)24 b(b)r(ecause)f(of)f(the)g(redundan)n(t)e(w)n(ork)i(that)
f(m)n(ust)g(b)r(e)h(done)f(at)h(the)-152 3243 y(serv)n(er,)g
(regardless)g(of)f(net)n(w)n(ork)e(p)r(erformance.)33
b(This)21 b(is)g(an)f(imp)r(or-)-152 3330 y(tan)n(t)i(result,)h(and)e
(indicates)i(that,)f Fm(r)l(e)l(gar)l(d)t(less)k(of)e(the)h(c)l(ap)l
(ability)f(of)-152 3417 y(the)j(network,)g(p)l(er-client)g(ISDB)e(r)l
(efr)l(esh)i(pr)l(o)l(c)l(essing)g(using)f(c)l(c)g(has)-152
3504 y(a)i(p)l(erformanc)l(e)h(\015o)l(or)p Fn(.)-77
3591 y(Metho)r(d)42 b Fm(dc)k Fn(do)r(es)d(the)e(b)r(est,)46
b(b)n(y)41 b(generating)i(m)n(ultiple)e(dis-)-152 3678
y(join)n(t)36 b(groups)g(whic)n(h)f(conserv)n(e)h(net)n(w)n(ork)f
(resources)h(when)g(they)-152 3766 y(are)22 b(p)r(o)r(or,)h(and)e
(generating)h(few)n(er)h(groups)e(whic)n(h)g(conserv)n(e)h(serv)n(er)
-152 3853 y(resources)27 b(when)f(the)f(net)n(w)n(ork)g(is)i(fast.)35
b(See)26 b(Figure)g(5.)-152 4049 y Fo(6.)100 b(CONCLUSION)-77
4157 y Fn(In)31 b(this)i(pap)r(er,)h(w)n(e)e(de\014ne)f(a)i(detailed)f
(mo)r(del)g(of)h(ISDBs,)g(de-)-152 4244 y(scrib)r(e)22
b(ho)n(w)g(this)g(mo)r(del)f(inheren)n(tly)f(leads)i(to)g(p)r
(erformance)f(prob-)-152 4332 y(lems)28 b(with)h(clien)n(t)g(refresh,)h
(and)e(o\013er)g(a)h(grouping)g(solution.)43 b(W)-6 b(e)-152
4419 y(prop)r(ose)21 b(redesigning)h(up)r(dates)e(in)n(to)g(groups)g
(based)h(on)f(the)g(aggre-)-152 4506 y(gated)i(in)n(terests)g(of)g(the)
e(en)n(tire)i(clien)n(t)f(p)r(opulation)h(\(data-cen)n(tric\).)-152
4593 y(This)d(allo)n(ws)i(clien)n(ts)e(to)g(share)g(groups)f(in)n
(tended)g(for)h(man)n(y)e(clien)n(ts.)-152 4680 y(T)-6
b(o)27 b(form)n(ulate)f(a)g(redesign)h(tec)n(hnique)e(w)n(e)h(de\014ne)
f(a)i(detailed)f(cost)-152 4767 y(mo)r(del,)g(de\014ne)e(op)r(erators)j
(that)e(manipulate)g(costs)h(based)g(on)f(the)-152 4855
y(system)32 b(con\014guration,)k(and)d(devise)g(a)g(w)n(a)n(y)g(of)h
(applying)f(them,)-152 4942 y(based)26 b(on)g(greedy)f(heuristics.)-77
5029 y(W)-6 b(e)30 b(tested)h(our)g(greedy)g(heuristic)g(against)h(the)
f(clien)n(t-cen)n(tric)-152 5116 y(approac)n(h,)37 b(and)d(t)n(w)n(o)h
(other)f(in)n(tuitiv)n(e)g(solutions:)53 b(a)35 b(monolithic)-152
5203 y(group)20 b(con)n(taining)h(all)g(up)r(dates)e(and)h(individuals)
g(groups)g(for)h(eac)n(h)-152 5290 y(fragmen)n(t.)64
b(Ov)n(erall,)39 b(our)d(heuristic)g(outp)r(erforms)f(all)i(the)e(oth-)
-152 5378 y(ers)27 b(in)f(terms)f(of)i(refresh)f(time)g(b)r(ecause)g
(it)g(greedily)h(allo)r(cates)h(re-)2040 -69 y(sources)34
b(where)g(they)e(are)i(needed{either)f(to)g(the)g(serv)n(er)g(or)h(the)
2040 19 y(net)n(w)n(ork)c(dep)r(ending)f(on)h(the)g(con\014guration)g
(of)h(the)f(ISDB.)g(F)-6 b(ur-)2040 106 y(thermore,)36
b(the)e(relativ)n(e)g(b)r(ene\014t)g(of)g(data-cen)n(tric)g(grouping)h
(in-)2040 193 y(creases)27 b(with)f(the)f(clien)n(t)h(p)r(opulation,)h
(impro)n(ving)e(scalabilit)n(y)-6 b(.)2115 280 y(Our)27
b(w)n(ork)h(on)g(ISDBs)g(is)g(ongoing.)43 b(F)-6 b(or)28
b(example,)g(w)n(e)g(limited)2040 367 y(clien)n(t)k(connectivit)n(y)f
(to)h(unicast)f(b)r(ecause)h(this)g(is)g(curren)n(tly)f(the)2040
454 y(dominan)n(t)e(form)g(of)i(comm)n(unication)e(in)h(practice.)47
b(W)-6 b(e)30 b(are)g(cur-)2040 542 y(ren)n(tly)18 b(exploring)h(the)f
(use)h(of)g(m)n(ulticast)g(as)g(a)g(means)f(of)h(impro)n(ving)2040
629 y(net)n(w)n(ork)26 b(scalabilit)n(y)-6 b(.)2040 828
y Fo(7.)99 b(A)-5 b(CKNO)g(WLEDGMENTS)2115 936 y Fn(The)30
b(authors)g(w)n(ould)g(lik)n(e)g(to)h(ac)n(kno)n(wledge)f(Ms.)48
b(Mireille)32 b(Ja-)2040 1023 y(cobson)26 b(for)h(her)e(v)l(aluable)h
(editorial)h(assistance.)2040 1222 y Fo(8.)99 b(REFERENCES)2078
1332 y Fn([1])39 b(Y.)25 b(Breitbart)i(and)e(H.)h(F.)g(Korth.)f
(Replication)i(and)2197 1419 y(consistency:)35 b(Being)26
b(lazy)g(helps)g(sometimes.)f Fm(Pr)l(o)l(c)l(e)l(e)l(dings)2197
1506 y(of)i(the)h(A)n(CM)g(SIGMOD)e(Principles)i(of)f(Datab)l(ase)j
(Systems)p Fn(,)2197 1593 y(1997.)2078 1689 y([2])39
b(A.)25 b(R.)h(Diener,)g(R.)f(P)-6 b(.)26 b(Bragger,)i(A.)d(Dudler,)h
(and)f(C.)h(A.)2197 1776 y(Zehnder.)f(Replicating)i(and)e(allo)r
(cation)j(data)e(in)f(a)2197 1863 y(distributed)g(database)h(system)f
(for)i(w)n(orkstations.)g Fm(A)n(CM)2197 1950 y(Symp)l(osium)h(on)g
(Smal)t(l)e(Systems)p Fn(,)i(1985.)2078 2046 y([3])39
b(J.)26 b(Gra)n(y,)g(P)-6 b(.)26 b(Helland,)g(P)-6 b(.)26
b(O'Neil,)g(and)g(D.)f(Shasha.)h(The)2197 2133 y(dangers)g(of)h
(replication)f(and)g(a)g(solution.)h Fm(Pr)l(o)l(c)l(e)l(e)l(dings)i
(of)2197 2220 y(A)n(CM)e(SIGMOD)g(International)i(Confer)l(enc)l(e)g
(on)2197 2307 y(Management)g(of)e(Data)p Fn(,)g(1993.)2078
2403 y([4])39 b(V.)25 b(Harinara)n(y)n(an,)i(A.)e(Ra)t(jaraman,)i(and)e
(J.)h(D.)g(Ullman.)2197 2490 y(Implemen)n(ting)d(data)j(cub)r(es)g
(e\016cien)n(tly)-6 b(.)25 b Fm(Pr)l(o)l(c)l(e)l(e)l(dings)30
b(of)2197 2577 y(A)n(CM)d(SIGMOD)g(International)i(Confer)l(enc)l(e)g
(on)2197 2664 y(Management)g(of)e(Data)p Fn(,)g(pages)f(205{216,)j
(1996.)2078 2760 y([5])39 b(S.)26 b(Maha)t(jan,)h(M.)f(J.)h(Donaho)r
(o,)f(S.)g(B.)g(Na)n(v)l(athe,)f(M.)i(H.)2197 2847 y(Ammar,)d(and)h(S.)
h(Malik.)h(Grouping)f(tec)n(hniques)f(for)2197 2934 y(up)r(date)g
(propagation)i(in)e(in)n(termitten)n(tly)f(connected)2197
3021 y(databases.)j Fm(Pr)l(o)l(c)l(e)l(e)l(dings)j(of)d(the)h(IEEE)f
(International)2197 3109 y(Confer)l(enc)l(e)i(on)f(Data)g(Engine)l
(ering)p Fn(,)f(F)-6 b(eb.)25 b(1998.)2078 3204 y([6])39
b(S.)26 b(B.)g(Na)n(v)l(athe,)f(S.)h(Ceri,)g(G.)h(Wiederhold,)f(and)f
(J.)i(Dou.)2197 3291 y(V)-6 b(ertical)26 b(partitioning)h(algorithms)f
(for)g(database)h(design.)2197 3378 y Fm(A)n(CM)g(T)-6
b(r)l(ansactions)30 b(on)e(Datab)l(ase)h(Systems)p Fn(,)f(9\(4\),)e
(1984.)2078 3474 y([7])39 b(M.)26 b(T.)g(Ozsu)g(and)f(P)-6
b(.)26 b(V)-6 b(alduriez.)25 b Fm(Principles)j(of)f(Distribute)l(d)2197
3561 y(Datab)l(ase)i(Systems)p Fn(.)f(Pren)n(tice-Hall,)f(2nd)e
(edition,)h(1998.)2078 3657 y([8])39 b(S.)26 b(H.)f(Phatak)h(and)f(B.)h
(R.)g(Badrinath.)g(Data)g(partitioning)2197 3744 y(for)g(disconnected)g
(clien)n(t)g(serv)n(er)g(databases.)h Fm(MobiDE)2197
3831 y(Confer)l(enc)l(e)p Fn(,)g(1999.)2078 3926 y([9])39
b(M.)26 b(Sat)n(y)n(anara)n(y)n(anan,)g(J.)g(J.)g(Kistler,)h(L.)f(B.)g
(Mummert,)2197 4014 y(M.)g(R.)g(Ebling,)g(P)-6 b(.)26
b(Kumar,)f(and)g(Q.)h(Lu.)f(Exp)r(erience)h(with)2197
4101 y(disconnected)g(op)r(eration)g(in)g(a)g(mobile)f(computing)2197
4188 y(en)n(vironmen)n(t.)f Fm(Pr)l(o)l(c)l(e)l(e)l(dings)30
b(of)d(the)h(1993)h(USENIX)2197 4275 y(Symp)l(osium)f(on)g(Mobile)f
(and)h(L)l(o)l(c)l(ation-Indep)l(endent)2197 4362 y(Computing)p
Fn(,)e(Aug.)g(1993.)2040 4458 y([10])39 b(Sync)n(hrologic,)26
b(Inc.)g(Sync)n(hrologic)g(imobile)g(user)g(guide.)2197
4545 y(Included)f(in)g(v)n(ersion)h(2.41,)h(1999.)2040
4640 y([11])39 b(W.)26 b(G.)g(Y)-6 b(ee,)25 b(M.)i(J.)f(Donaho)r(o,)h
(and)e(S.)h(B.)g(Na)n(v)l(athe.)f(A)2197 4728 y(framew)n(ork)h(for)g
(serv)n(er)g(data)g(fragmen)n(t)f(grouping)i(to)2197
4815 y(impro)n(v)n(e)d(scalabilit)n(y)j(in)f(in)n(termitten)n(tly)e
(sync)n(hronized)2197 4902 y(databases.)j Fm(Confer)l(enc)l(e)i(On)e
(Information)h(A)n(nd)2197 4989 y(Know)t(le)l(dge)g(Management)p
Fn(,)g(No)n(v.)d(2000.)2040 5085 y([12])39 b(W.)26 b(G.)g(Y)-6
b(ee,)25 b(E.)i(Omiecinski,)e(and)g(S.)h(B.)g(Na)n(v)l(athe.)2197
5172 y(Minimizing)g(redundan)n(t)e(w)n(ork)i(in)g(lazily)g(up)r(dated)
2197 5259 y(replicated)g(databases.)h(T)-6 b(ec)n(hnical)27
b(Rep)r(ort)e(GIT-CC-00-10,)2197 5346 y(Georgia)i(Institute)f(of)g(T)-6
b(ec)n(hnology)g(,)26 b(F)-6 b(eb.)26 b(2000.)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
