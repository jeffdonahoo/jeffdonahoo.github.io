head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2006.11.08.13.44.00;	author donahoo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<html>
<head>
<title>SQL:  Practical Guide for Developers</title>
<link rel="stylesheet" type="text/css" href="style.css" />
</head>
<body>
<center><font size=+10>SQL:  Practical Guide for Developers<br>MySQL</font></center><p>
<center><font size=+3>Corrected Queries for MySQL</font></center><p>
<p><b>Query 2.8 </b>(see <a href="details-mysql.html#ch2StringSyntax">String Syntax</a>): 
<pre>   SELECT repfname, replname
   FROM vendors 
   WHERE companyname = 'Don\'s Dairy';</pre>
<p></p>
<p><b>Query 3.14</b> (see <a href="details-mysql.html#ch2StringSyntax">String Syntax</a>): 
<pre>   SELECT vendorid, companyname,
       TRIM(TRAILING '\'S' FROM
	        TRIM(SUBSTRING(UPPER(companyname) FROM 1 FOR 
               POSITION(' ' IN companyname)))) AS "CoName"
   FROM vendors;</pre>
<p></p>
<p><strong>Query 3.15 </strong>(see <a href="details-mysql.html#ch3DateObjects">Date 
  Objects</a>): 
<pre>   SELECT name, dateadded, DATEDIFF('2005-01-02', dateadded) AS "Days on Menu"
   FROM items;</pre>
<p></p>
<p><strong>Query 7.19</strong> (see <a href="details-mysql.html#ch7NULLComp">NULL 
  Comparison</a>):  
<pre>SELECT companyname
FROM vendors
WHERE referredby NOT IN 
        (SELECT vendorid
         FROM vendors
         WHERE companyname = 'No Such Company') OR
    referredby IS NULL;</pre>
<p></p>
<p><strong>Query 7.39</strong> (see <a href="details-mysql.html#ch7DTnames">Derived 
  Table Names</a>):
<pre>SELECT food, companyname, val
FROM vendors v, (SELECT name AS food, vendorid AS vdrno, unitprice * inventory AS val
                 FROM ingredients i
                 WHERE foodgroup IN ('Fruit', 'Vegetable')) AS d
WHERE v.vendorid = d.vdrno;</pre>
<p></p>
<p><strong>Query 7.40</strong> (see <a href="details-mysql.html#ch7DTnames">Derived 
  Table Names</a>):
<pre>SELECT p.companyname
FROM (SELECT COUNT(*) AS items
      FROM ingredients i, vendors v
      WHERE i.vendorid = v.vendorid AND
            companyname = 'Spring Water Supply') AS q,
     (SELECT companyname, COUNT(*) AS items
      FROM ingredients i, vendors v
      WHERE i.vendorid = v.vendorid
      GROUP BY v.vendorid, companyname) AS p
WHERE p.items > q.items;</pre>
<p></p>
<p><strong>Query 7.41</strong> (see <a href="details-mysql.html#ch7DTnames">Derived 
  Table Names</a>): 
<pre>SELECT name, price - cost AS profit
FROM items theitm, (SELECT itm.itemid AS itemid, SUM(quantity * unitprice) AS cost
                    FROM items itm, madewith mw, ingredients ing
                    WHERE itm.itemid = mw.itemid AND
                          mw.ingredientid = ing.ingredientid
                    GROUP BY itm.itemid) AS itemcost
WHERE theitm.itemid = itemcost.itemid;</pre>
<p></p>
<p><strong>Query 7.44</strong> (see <a href="details-mysql.html#ch7DTnames">Derived 
  Table Names</a>): 
<pre>SELECT manager
FROM stores s, orders o
WHERE s.storeid = o.storeid
GROUP BY s.storeid, manager
HAVING SUM(price) > (SELECT AVG(sales) 
                     FROM (SELECT SUM(price) AS sales
                           FROM orders
                           GROUP BY storeid) AS d);</pre>
<p></p>
<p><strong>Query 8.3</strong> (see <a href="details-mysql.html#ch8DefIns">Inserting 
  DEFAULT rows</a>): 
<pre>INSERT INTO ads VALUES();</pre>
<p></p>
<p><strong>Query 9.12</strong> (see <a href="details-mysql.html#ch9NamingConstraints">Naming 
  Constraints</a>): 
<pre>CREATE TABLE ingredients(
    ingredientid CHAR(5) PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    unit CHAR(10),
    unitprice NUMERIC(5, 2),
    foodgroup CHAR(15) CHECK(foodgroup IN ('Milk', 'Meat', 'Bread', 'Fruit', 
                                           'Vegetable')),
    inventory INTEGER DEFAULT 0,    
    vendorid CHAR(5),
    CHECK(unitprice * inventory <= 4000),
    FOREIGN KEY(vendorid) REFERENCES vendors(vendorid),
    CONSTRAINT vidfk FOREIGN KEY(ingredientid) REFERENCES vendors(vendorid)
);</pre>
<p></p>
<p><strong>Query 9.13</strong> (see <a href="details-mysql.html#ch7DTnames">CREATE 
  TABLE AS</a>):
  <pre>CREATE TABLE sales
SELECT s.storeid, manager, SUM(price) AS total
FROM orders o, stores s
WHERE o.storeid = s.storeid
GROUP BY s.storeid, s.manager;</pre>
<p></p>
<p><strong>Query 9.27</strong> (see <a href="details-mysql.html#ch9DropConstraint">DROP 
  CONSTRAINT</a>): 
<pre>ALTER TABLE ingredients
DROP FOREIGN KEY vidfk;</pre>
<p></p>
<p><strong>Query 9.28</strong> (see <a href="details-mysql.html#ch9GenBy">GENERATED BY</a>): 
<pre>CREATE TABLE purchases(
    orderno INTEGER NOT NULL AUTO_INCREMENT,
    vendorid CHAR(5) REFERENCES vendors,
    ordertime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(orderno, vendorid)
);</pre>
<p></p>
<p><strong>Query 9.34</strong> (see <a href="details-mysql.html#ch9TempTable">Temporary Tables</a>): 
<pre>CREATE TEMPORARY TABLE temp(
    intKey INTEGER,
    charValue VARCHAR(100)
);</pre>
<p></p>
<p><strong>Query 10.6</strong> (see <a href="details-mysql.html#ch3CAST">Cast</a>): 
<pre>CREATE VIEW menuitems (menuitems, name, price) AS
    (SELECT m.mealid, m.name, CAST(SUM(price*(1-discount)) AS DECIMAL)
    FROM meals m LEFT OUTER JOIN partof p ON m.mealid = p.mealid
        LEFT OUTER JOIN items i ON p.itemid = i.itemid
    GROUP BY m.mealid, m.name)
UNION
    (SELECT itemid, name, price
     FROM items);</pre>
<p></p>
<p><strong>Query 13.2</strong> (see <a href="details-mysql.html#ch13CreateProc">CREATE 
  PROCUDRE/FUNCTION Syntax</a>): 
<pre>CREATE PROCEDURE AllergyMenu (OUT allergen VARCHAR(30)) 
BEGIN
    SELECT name, price
    FROM items IT
    WHERE NOT EXISTS
        (SELECT *
        FROM madewith m JOIN ingredients ig ON (m.ingredientid = ig.ingredientid)
        WHERE it.itemid = m.itemid AND ig.name = allergen);
END;</pre>
<p></p>
<p><strong>Query 13.3</strong> (see <a href="details-mysql.html#ch13CreateTrig">CREATE 
  TRIGGER Syntax</a>): 
<pre>CREATE TRIGGER markup
AFTER UPDATE ON ingredients
FOR EACH ROW BEGIN
    UPDATE items SET price =
        (SELECT 2 * SUM(quantity * unitprice)
        FROM madewith m, ingredients i
        WHERE m.ingredientid = i.ingredientid AND items.itemid = m.itemid);
END;</pre>
<p></p>
<p><strong>Query 13.4</strong> (see <a href="details-mysql.html#ch13CreateTrig">CREATE 
  TRIGGER Syntax</a>): 
<pre>CREATE TRIGGER logging
BEFORE DELETE ON items
FOR EACH ROW BEGIN
    INSERT INTO logs VALUES(CURRENT_DATE, OLD.itemid);
END</pre>
<p></p>
@
